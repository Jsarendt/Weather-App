!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=9)}([function(e,t,n){"use strict";e.exports=n(11)},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t,n){e.exports=n(13)()},function(e,t,n){"use strict";n.r(t),n.d(t,"MemoryRouter",(function(){return T})),n.d(t,"Prompt",(function(){return j})),n.d(t,"Redirect",(function(){return $})),n.d(t,"Route",(function(){return N})),n.d(t,"Router",(function(){return P})),n.d(t,"StaticRouter",(function(){return W})),n.d(t,"Switch",(function(){return q})),n.d(t,"__HistoryContext",(function(){return S})),n.d(t,"__RouterContext",(function(){return O})),n.d(t,"generatePath",(function(){return M})),n.d(t,"matchPath",(function(){return U})),n.d(t,"useHistory",(function(){return z})),n.d(t,"useLocation",(function(){return G})),n.d(t,"useParams",(function(){return X})),n.d(t,"useRouteMatch",(function(){return Y})),n.d(t,"withRouter",(function(){return V}));var r=n(1),o=n(0),i=n.n(o);n(2);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function u(e){return"/"===e.charAt(0)}function c(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var s=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],i=e&&u(e),a=t&&u(t),s=i||a;if(e&&u(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var l=o[o.length-1];n="."===l||".."===l||""===l}else n=!1;for(var f=0,p=o.length;p>=0;p--){var h=o[p];"."===h?c(o,p):".."===h?(c(o,p),f++):f&&(c(o,p),f--)}if(!s)for(;f--;f)o.unshift("..");!s||""===o[0]||o[0]&&u(o[0])||o.unshift("");var d=o.join("/");return n&&"/"!==d.substr(-1)&&(d+="/"),d};function l(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}var f=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"==typeof t||"object"==typeof n){var r=l(t),o=l(n);return r!==t||o!==n?e(r,o):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1};var p=function(e,t){if(!e)throw new Error("Invariant failed")};function h(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function d(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=a({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=s(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function m(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}"undefined"==typeof window||!window.document||window.document.createElement;function y(e,t,n){return Math.min(Math.max(e,t),n)}function v(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,r=t.initialEntries,o=void 0===r?["/"]:r,i=t.initialIndex,u=void 0===i?0:i,c=t.keyLength,s=void 0===c?6:c,l=m();function f(e){a(w,e),w.length=w.entries.length,l.notifyListeners(w.location,w.action)}function p(){return Math.random().toString(36).substr(2,s)}var v=y(u,0,o.length-1),b=o.map((function(e){return d(e,void 0,"string"==typeof e?p():e.key||p())})),g=h;function E(e){var t=y(w.index+e,0,w.entries.length-1),r=w.entries[t];l.confirmTransitionTo(r,"POP",n,(function(e){e?f({action:"POP",location:r,index:t}):f()}))}var w={length:b.length,action:"POP",location:b[v],index:v,entries:b,createHref:g,push:function(e,t){var r=d(e,t,p(),w.location);l.confirmTransitionTo(r,"PUSH",n,(function(e){if(e){var t=w.index+1,n=w.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),f({action:"PUSH",location:r,index:t,entries:n})}}))},replace:function(e,t){var r=d(e,t,p(),w.location);l.confirmTransitionTo(r,"REPLACE",n,(function(e){e&&(w.entries[w.index]=r,f({action:"REPLACE",location:r}))}))},go:E,goBack:function(){E(-1)},goForward:function(){E(1)},canGo:function(e){var t=w.index+e;return t>=0&&t<w.entries.length},block:function(e){return void 0===e&&(e=!1),l.setPrompt(e)},listen:function(e){return l.appendListener(e)}};return w}var b=n(4),g=n(5),E=n.n(g);n(7);function w(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var x=n(8),C=n.n(x),S=function(e){var t=Object(b.a)();return t.displayName=e,t}("Router-History"),O=function(e){var t=Object(b.a)();return t.displayName=e,t}("Router"),P=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}Object(r.a)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return i.a.createElement(O.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},i.a.createElement(S.Provider,{children:this.props.children||null,value:this.props.history}))},t}(i.a.Component);var T=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=v(t.props),t}return Object(r.a)(t,e),t.prototype.render=function(){return i.a.createElement(P,{history:this.history,children:this.props.children})},t}(i.a.Component);var _=function(e){function t(){return e.apply(this,arguments)||this}Object(r.a)(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(e){this.props.onUpdate&&this.props.onUpdate.call(this,this,e)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},t}(i.a.Component);function j(e){var t=e.message,n=e.when,r=void 0===n||n;return i.a.createElement(O.Consumer,null,(function(e){if(e||p(!1),!r||e.staticContext)return null;var n=e.history.block;return i.a.createElement(_,{onMount:function(e){e.release=n(t)},onUpdate:function(e,r){r.message!==t&&(e.release(),e.release=n(t))},onUnmount:function(e){e.release()},message:t})}))}var k={},R=0;function M(e,t){return void 0===e&&(e="/"),void 0===t&&(t={}),"/"===e?e:function(e){if(k[e])return k[e];var t=E.a.compile(e);return R<1e4&&(k[e]=t,R++),t}(e)(t,{pretty:!0})}function $(e){var t=e.computedMatch,n=e.to,r=e.push,o=void 0!==r&&r;return i.a.createElement(O.Consumer,null,(function(e){e||p(!1);var r=e.history,u=e.staticContext,c=o?r.push:r.replace,s=d(t?"string"==typeof n?M(n,t.params):a({},n,{pathname:M(n.pathname,t.params)}):n);return u?(c(s),null):i.a.createElement(_,{onMount:function(){c(s)},onUpdate:function(e,t){var n,r,o=d(t.to);n=o,r=a({},s,{key:o.key}),n.pathname===r.pathname&&n.search===r.search&&n.hash===r.hash&&n.key===r.key&&f(n.state,r.state)||c(s)},to:n})}))}var A={},D=0;function U(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,a=n.strict,u=void 0!==a&&a,c=n.sensitive,s=void 0!==c&&c;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=A[n]||(A[n]={});if(r[e])return r[e];var o=[],i={regexp:E()(e,o,t),keys:o};return D<1e4&&(r[e]=i,D++),i}(n,{end:i,strict:u,sensitive:s}),o=r.regexp,a=r.keys,c=o.exec(e);if(!c)return null;var l=c[0],f=c.slice(1),p=e===l;return i&&!p?null:{path:n,url:"/"===n&&""===l?"/":l,isExact:p,params:a.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var N=function(e){function t(){return e.apply(this,arguments)||this}return Object(r.a)(t,e),t.prototype.render=function(){var e=this;return i.a.createElement(O.Consumer,null,(function(t){t||p(!1);var n=e.props.location||t.location,r=a({},t,{location:n,match:e.props.computedMatch?e.props.computedMatch:e.props.path?U(n.pathname,e.props):t.match}),o=e.props,u=o.children,c=o.component,s=o.render;return Array.isArray(u)&&0===u.length&&(u=null),i.a.createElement(O.Provider,{value:r},r.match?u?"function"==typeof u?u(r):u:c?i.a.createElement(c,r):s?s(r):null:"function"==typeof u?u(r):null)}))},t}(i.a.Component);function L(e){return"/"===e.charAt(0)?e:"/"+e}function I(e,t){if(!e)return t;var n=L(e);return 0!==t.pathname.indexOf(n)?t:a({},t,{pathname:t.pathname.substr(n.length)})}function F(e){return"string"==typeof e?e:h(e)}function H(e){return function(){p(!1)}}function B(){}var W=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).handlePush=function(e){return t.navigateTo(e,"PUSH")},t.handleReplace=function(e){return t.navigateTo(e,"REPLACE")},t.handleListen=function(){return B},t.handleBlock=function(){return B},t}Object(r.a)(t,e);var n=t.prototype;return n.navigateTo=function(e,t){var n=this.props,r=n.basename,o=void 0===r?"":r,i=n.context,u=void 0===i?{}:i;u.action=t,u.location=function(e,t){return e?a({},t,{pathname:L(e)+t.pathname}):t}(o,d(e)),u.url=F(u.location)},n.render=function(){var e=this.props,t=e.basename,n=void 0===t?"":t,r=e.context,o=void 0===r?{}:r,u=e.location,c=void 0===u?"/":u,s=w(e,["basename","context","location"]),l={createHref:function(e){return L(n+F(e))},action:"POP",location:I(n,d(c)),push:this.handlePush,replace:this.handleReplace,go:H(),goBack:H(),goForward:H(),listen:this.handleListen,block:this.handleBlock};return i.a.createElement(P,a({},s,{history:l,staticContext:o}))},t}(i.a.Component);var q=function(e){function t(){return e.apply(this,arguments)||this}return Object(r.a)(t,e),t.prototype.render=function(){var e=this;return i.a.createElement(O.Consumer,null,(function(t){t||p(!1);var n,r,o=e.props.location||t.location;return i.a.Children.forEach(e.props.children,(function(e){if(null==r&&i.a.isValidElement(e)){n=e;var u=e.props.path||e.props.from;r=u?U(o.pathname,a({},e.props,{path:u})):t.match}})),r?i.a.cloneElement(n,{location:o,computedMatch:r}):null}))},t}(i.a.Component);function V(e){var t="withRouter("+(e.displayName||e.name)+")",n=function(t){var n=t.wrappedComponentRef,r=w(t,["wrappedComponentRef"]);return i.a.createElement(O.Consumer,null,(function(t){return t||p(!1),i.a.createElement(e,a({},r,t,{ref:n}))}))};return n.displayName=t,n.WrappedComponent=e,C()(n,e)}var J=i.a.useContext;function z(){return J(S)}function G(){return J(O).location}function X(){var e=J(O).match;return e?e.params:{}}function Y(e){var t=G(),n=J(O).match;return e?U(t.pathname,e):n}},function(e,t,n){"use strict";(function(e){var r=n(0),o=n.n(r),i=n(1),a=n(2),u=n.n(a),c="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e?e:{};function s(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var l=o.a.createContext||function(e,t){var n,o,a,l="__create-react-context-"+((c[a="__global_unique_id__"]=(c[a]||0)+1)+"__"),f=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=s(t.props.value),t}Object(i.a)(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[l]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i==1/a:i!=i&&a!=a)?n=0:(n="function"==typeof t?t(r,o):1073741823,0!==(n|=0)&&this.emitter.set(e.value,n))}var i,a},r.render=function(){return this.props.children},n}(r.Component);f.childContextTypes=((n={})[l]=u.a.object.isRequired,n);var p=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}Object(i.a)(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?1073741823:t},r.componentDidMount=function(){this.context[l]&&this.context[l].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?1073741823:e},r.componentWillUnmount=function(){this.context[l]&&this.context[l].off(this.onUpdate)},r.getValue=function(){return this.context[l]?this.context[l].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return p.contextTypes=((o={})[l]=u.a.object,o),{Provider:f,Consumer:p}};t.a=l}).call(this,n(15))},function(e,t,n){var r=n(16);e.exports=h,e.exports.parse=i,e.exports.compile=function(e,t){return u(i(e,t),t)},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,u="",l=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],p=n[1],h=n.index;if(u+=e.slice(a,h),a=h+f.length,p)u+=p[1];else{var d=e[a],m=n[2],y=n[3],v=n[4],b=n[5],g=n[6],E=n[7];u&&(r.push(u),u="");var w=null!=m&&null!=d&&d!==m,x="+"===g||"*"===g,C="?"===g||"*"===g,S=n[2]||l,O=v||b;r.push({name:y||i++,prefix:m||"",delimiter:S,optional:C,repeat:x,partial:w,asterisk:!!E,pattern:O?s(O):E?".*":"[^"+c(S)+"]+?"})}}return a<e.length&&(u+=e.substr(a)),u&&r.push(u),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function u(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var i="",u=t||{},c=(o||{}).pretty?a:encodeURIComponent,s=0;s<e.length;s++){var l=e[s];if("string"!=typeof l){var f,p=u[l.name];if(null==p){if(l.optional){l.partial&&(i+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(r(p)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var h=0;h<p.length;h++){if(f=c(p[h]),!n[s].test(f))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===h?l.prefix:l.delimiter)+f}}else{if(f=l.asterisk?encodeURI(p).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):c(p),!n[s].test(f))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+f+'"');i+=l.prefix+f}}else i+=l}return i}}function c(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function l(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function p(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",u=0;u<e.length;u++){var s=e[u];if("string"==typeof s)a+=c(s);else{var p=c(s.prefix),h="(?:"+s.pattern+")";t.push(s),s.repeat&&(h+="(?:"+p+h+")*"),a+=h=s.optional?s.partial?p+"("+h+")?":"(?:"+p+"("+h+"))?":p+"("+h+")"}}var d=c(n.delimiter||"/"),m=a.slice(-d.length)===d;return o||(a=(m?a.slice(0,-d.length):a)+"(?:"+d+"(?=$))?"),a+=i?"$":o&&m?"":"(?="+d+"|$)",l(new RegExp("^"+a,f(n)),t)}function h(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return l(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(h(e[o],t,n).source);return l(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return p(i(e,n),t,n)}(e,t,n)}},,function(e,t,n){"use strict";e.exports=n(17)},function(e,t,n){"use strict";var r=n(7),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function c(e){return r.isMemo(e)?a:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=a;var s=Object.defineProperty,l=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,h=Object.getPrototypeOf,d=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(d){var o=h(n);o&&o!==d&&e(t,o,r)}var a=l(n);f&&(a=a.concat(f(n)));for(var u=c(t),m=c(n),y=0;y<a.length;++y){var v=a[y];if(!(i[v]||r&&r[v]||m&&m[v]||u&&u[v])){var b=p(n,v);try{s(t,v,b)}catch(e){}}}}return t}},function(e,t,n){"use strict";n.r(t),function(e){n.d(t,"default",(function(){return C}));var r=n(0),o=n.n(r),i=n(3);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t,n){return t&&c(e.prototype,t),n&&c(e,n),e}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=m(e);if(t){var o=m(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return h(this,n)}}function h(e,t){return!t||"object"!==a(t)&&"function"!=typeof t?d(e):t}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function m(e){return(m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var v=n(3).Link,b=(new Date).getHours(),g=((new Date).getMinutes(),""),E="",w="",x=[{id:"Sunday",abb:"Sun"},{id:"Monday",abb:"Mon"},{id:"Tuesday",abb:"Tues"},{id:"Wednesday",abb:"Wed"},{id:"Thursday",abb:"Thurs"},{id:"Friday",abb:"Fri"},{id:"Saturday",abb:"Sat"}],C=function(e){l(n,e);var t=p(n);function n(e){var r;return u(this,n),y(d(r=t.call(this,e)),"handleClick",(function(e){var t=r.props,n=t.replace,o=t.to,i=t.delay,a=t.onDelayStart,u=t.onDelayEnd,c=r.context.router;a(e,o),e.defaultPrevented||(e.preventDefault(),r.timeout=setTimeout((function(){n?c.replace(o):c.push(o),u(e,o)}),i))})),r.timeout=null,r}return s(n,[{key:"componentWillUnmount",value:function(){this.timeout&&clearTimeout(this.timeout)}},{key:"render",value:function(){var e=Object.assign({},this.props);return delete e.delay,delete e.onDelayStart,delete e.onDelayEnd,o.a.createElement(v,Object.assign({},e,{onClick:this.handleClick}),"Search")}}]),n}(o.a.Component);y(C,"propTypes",{delay:"prop-types".number,onDelayStart:"prop-types".func,onDelayEnd:"prop-types".func}),y(C,"defaultProps",{delay:0,onDelayStart:function(){},onDelayEnd:function(){}}),y(C,"contextTypes",v.contextTypes);var S=function(e){l(n,e);var t=p(n);function n(e){var r;return u(this,n),(r=t.call(this,e)).state={input:""},r.handleChange=r.handleChange.bind(d(r)),r.updateCity=r.updateCity.bind(d(r)),r}return s(n,[{key:"updateCity",value:function(){var e="https://maps.googleapis.com/maps/api/geocode/json?address="+this.state.input+"&key=AIzaSyB_oG1OC4gzj7MvBJyUVQTJqGCAoUmeCeE&libraries=places",t=new XMLHttpRequest;t.open("GET",e,!0),t.onload=function(){w=JSON.parse(t.response).results[0].formatted_address,g=JSON.parse(t.response).results[0].geometry.location.lat,E=JSON.parse(t.response).results[0].geometry.location.lng},t.send()}},{key:"handleChange",value:function(e){this.setState({input:e.target.value})}},{key:"render",value:function(){return o.a.createElement("div",{id:"search-main"},o.a.createElement("div",null,o.a.createElement("input",{id:"search-input",placeholder:"Enter City",value:this.state.input,onChange:this.handleChange}),o.a.createElement("button",{id:"search-button",className:"btn",onClick:this.updateCity},o.a.createElement(C,{to:"/application",delay:800,className:"btn"}))))}}]),n}(o.a.Component),O=function(e){l(n,e);var t=p(n);function n(e){var r;return u(this,n),(r=t.call(this,e)).state={icon:"",unit:"fahrenheit",currentTemp:"",currentDay:"",daily:"",timeTest:(new Date).getHours()+":"+((new Date).getMinutes()<10?"0"+(new Date).getMinutes():(new Date).getMinutes())},r.unitChange=r.unitChange.bind(d(r)),r}return s(n,[{key:"componentDidMount",value:function(){var e=this;this.intervalID=setInterval((function(){return e.setState((function(e){return{timeTest:(new Date).getHours()+":"+((new Date).getMinutes()<10?"0"+(new Date).getMinutes():(new Date).getMinutes())}}))}),1e4);var t=new XMLHttpRequest,n="https://api.openweathermap.org/data/2.5/onecall?lat="+g+"&lon="+E+"&units=imperial&exclude=minutely,hourly&appid=3daff8b6e93781c1d80277bbed731195";t.open("GET",n,!0),t.onload=function(){var n=JSON.parse(t.response);e.setState((function(e){return{daily:n.daily,icon:n.current.weather[0].icon,currentTemp:JSON.stringify(Math.floor(n.current.temp)),currentDay:x[(Math.floor((JSON.stringify(n.current.dt)-18e3)/86400)+4)%7].id}}))},t.send()}},{key:"componentWillUnmount",value:function(){clearInterval(this.intervalID)}},{key:"unitChange",value:function(e){"f"==e?this.setState((function(e){return{unit:"fahrenheit"}})):this.setState((function(e){return{unit:"celsius"}}))}},{key:"render",value:function(){var e=this;return o.a.createElement("main",{style:{backgroundImage:b>=20||b<5?"linear-gradient(#01081C, #002AA0)":"linear-gradient(#004BAE, #99D9FC)"}},o.a.createElement("nav",{id:"header"},o.a.createElement(v,{to:{pathname:"/week",query:{daily:5}},className:"btn"},"5-Day Forecast"),o.a.createElement(v,{to:"/",className:"btn"},"City Search"),o.a.createElement(v,{to:{pathname:"/week",query:{daily:7}},className:"btn"},"7-Day Forecast")),o.a.createElement("div",{id:"container",style:{color:this.state.darkMode?"lightgrey":"#F0F0F0"}},o.a.createElement("section",{id:"activeDay"},o.a.createElement("h4",null,w),o.a.createElement("div",{id:"activeTemp"},o.a.createElement("img",{id:"currentIcon",style:{width:"65px",height:"65px"},src:"http://openweathermap.org/img/wn/"+"".concat(this.state.icon)+"@2x.png"}),o.a.createElement("div",{id:"currentTemp"},"fahrenheit"==this.state.unit?this.state.currentTemp:Math.round(P(this.state.currentTemp,"temp")),"°"),o.a.createElement("div",{id:"unitChange"},o.a.createElement("button",{style:{fontWeight:"fahrenheit"==this.state.unit?"bold":"400"},className:"btn unitBtn",onClick:function(){return e.unitChange("f")}},"F°"),o.a.createElement("button",{style:{fontWeight:"celsius"==this.state.unit?"bold":"400"},className:"btn unitBtn",onClick:function(){return e.unitChange("c")}},"C°")))),o.a.Children.map(this.props.children,(function(t){return o.a.cloneElement(t,{currentTemp:e.state.currentTemp,daily:e.state.daily,unit:e.state.unit})}))))}}]),n}(o.a.Component);function P(e,t){switch(t){case"temp":return 5/9*(e-32);case"distance":return Math.round(1.609*e*10)/10}}var T=o.a.createClass({displayName:"WeekCard",getInitialState:function(){return{averageHigh:[],active:!1,morn:0,eve:0,windSpeed:0,dewPoint:0,humidity:0}},render:function(e){var t=this,n=this.props.daily.slice(0,this.props.location.query.daily).map((function(e){return o.a.createElement("div",{className:"dayCard",onClick:function(){t.setState((function(t){return{active:!0,morn:Math.floor(e.temp.morn),eve:Math.floor(e.temp.eve),windSpeed:e.wind_speed,dewPoint:Math.floor(e.dew_point),humidity:e.humidity}}))}},o.a.createElement("div",{id:"dayCardCombiner"},o.a.createElement("p",null,x[(Math.floor((e.dt-18e3)/86400)+4)%7].abb),o.a.createElement("img",{id:"dailyIcon",src:"http://openweathermap.org/img/wn/"+e.weather[0].icon+"@2x.png"})),o.a.createElement("div",{id:"spacer",style:{minHeight:"15px",height:t.props.currentTemp>=30?t.props.currentTemp>=100?"".concat(2*(130-e.temp.max),"px"):"".concat(2*(100-e.temp.max),"px"):"".concat(2*(40-e.temp.max),"px")}}),o.a.createElement("div",{id:"temps"},o.a.createElement("div",{id:"high"},"fahrenheit"==t.props.unit?Math.round(e.temp.max):Math.round(P(e.temp.max,"temp")),"°"),o.a.createElement("div",{id:"bar",style:{height:"".concat(3*(e.temp.max-e.temp.min),"px")}}),o.a.createElement("div",{id:"low"},"fahrenheit"==t.props.unit?Math.round(e.temp.min):Math.round(P(e.temp.min,"temp")),"°")))}));return o.a.createElement("div",null,o.a.createElement("div",{id:"weekCard"},n),o.a.createElement("section",{id:"hourly",style:{visibility:this.state.active?"visible":"hidden"}},o.a.createElement("div",{className:"hourlyCard"},o.a.createElement("div",null,"fahrenheit"==this.props.unit?this.state.morn:Math.round(P(this.state.morn,"temp")),"°"),o.a.createElement("div",null,"Morning")),o.a.createElement("div",{className:"hourlyCard"},o.a.createElement("div",null,"fahrenheit"==this.props.unit?this.state.eve:Math.round(P(this.state.eve,"temp")),"°"),o.a.createElement("div",null,"Evening")),o.a.createElement("div",{className:"hourlyCard"},o.a.createElement("div",null,"fahrenheit"==this.props.unit?this.state.windSpeed+"Mph":P(this.state.windSpeed,"distance")+"Km/h"),o.a.createElement("div",null,"Wind Speed")),o.a.createElement("div",{className:"hourlyCard"},o.a.createElement("div",null,"fahrenheit"==this.props.unit?this.state.dewPoint:Math.round(P(this.state.dewPoint,"temp")),"°"),o.a.createElement("div",null,"Dew Point")),o.a.createElement("div",{className:"hourlyCard"},o.a.createElement("div",null,this.state.humidity,"%"),o.a.createElement("div",null,"Humidity"))),o.a.createElement("p",{id:"disclaimer"},"*Disclaimer - Openweathermap's API data uses UNIX time. Current data may be slightly off*"))}}),_=function(){return o.a.createElement(HashRouter,{history:hashHistory,basename:e.env.PUBLIC_URL},o.a.createElement(i.Route,{path:"/weather-app",component:S}),o.a.createElement(i.Route,{path:"/application",component:O},o.a.createElement(i.Route,{path:"/week",component:T})))};ReactDOM.render(o.a.createElement(_,null),document.getElementById("app"))}.call(this,n(10))},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var c,s=[],l=!1,f=-1;function p(){l&&c&&(l=!1,c.length?s=c.concat(s):f=-1,s.length&&h())}function h(){if(!l){var e=u(p);l=!0;for(var t=s.length;t;){for(c=s,s=[];++f<t;)c&&c[f].run();f=-1,t=s.length}c=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new d(e,t)),1!==s.length||l||u(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(12),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,c=o?Symbol.for("react.strict_mode"):60108,s=o?Symbol.for("react.profiler"):60114,l=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.forward_ref"):60112,h=o?Symbol.for("react.suspense"):60113,d=o?Symbol.for("react.memo"):60115,m=o?Symbol.for("react.lazy"):60116,y="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function E(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||b}function w(){}function x(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||b}E.prototype.isReactComponent={},E.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(v(85));this.updater.enqueueSetState(this,e,t,"setState")},E.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=E.prototype;var C=x.prototype=new w;C.constructor=x,r(C,E.prototype),C.isPureReactComponent=!0;var S={current:null},O=Object.prototype.hasOwnProperty,P={key:!0,ref:!0,__self:!0,__source:!0};function T(e,t,n){var r,o={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)O.call(t,r)&&!P.hasOwnProperty(r)&&(o[r]=t[r]);var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){for(var s=Array(c),l=0;l<c;l++)s[l]=arguments[l+2];o.children=s}if(e&&e.defaultProps)for(r in c=e.defaultProps)void 0===o[r]&&(o[r]=c[r]);return{$$typeof:i,type:e,key:a,ref:u,props:o,_owner:S.current}}function _(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var j=/\/+/g,k=[];function R(e,t,n,r){if(k.length){var o=k.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function M(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>k.length&&k.push(e)}function $(e,t,n){return null==e?0:function e(t,n,r,o){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var c=!1;if(null===t)c=!0;else switch(u){case"string":case"number":c=!0;break;case"object":switch(t.$$typeof){case i:case a:c=!0}}if(c)return r(o,t,""===n?"."+A(t,0):n),1;if(c=0,n=""===n?".":n+":",Array.isArray(t))for(var s=0;s<t.length;s++){var l=n+A(u=t[s],s);c+=e(u,l,r,o)}else if(null===t||"object"!=typeof t?l=null:l="function"==typeof(l=y&&t[y]||t["@@iterator"])?l:null,"function"==typeof l)for(t=l.call(t),s=0;!(u=t.next()).done;)c+=e(u=u.value,l=n+A(u,s++),r,o);else if("object"===u)throw r=""+t,Error(v(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return c}(e,"",t,n)}function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function U(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?N(e,r,n,(function(e){return e})):null!=e&&(_(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(j,"$&/")+"/")+n)),r.push(e))}function N(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(j,"$&/")+"/"),$(e,U,t=R(t,i,r,o)),M(t)}var L={current:null};function I(){var e=L.current;if(null===e)throw Error(v(321));return e}var F={ReactCurrentDispatcher:L,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:S,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return N(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;$(e,D,t=R(null,null,t,n)),M(t)},count:function(e){return $(e,(function(){return null}),null)},toArray:function(e){var t=[];return N(e,t,null,(function(e){return e})),t},only:function(e){if(!_(e))throw Error(v(143));return e}},t.Component=E,t.Fragment=u,t.Profiler=s,t.PureComponent=x,t.StrictMode=c,t.Suspense=h,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=F,t.cloneElement=function(e,t,n){if(null==e)throw Error(v(267,e));var o=r({},e.props),a=e.key,u=e.ref,c=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,c=S.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(l in t)O.call(t,l)&&!P.hasOwnProperty(l)&&(o[l]=void 0===t[l]&&void 0!==s?s[l]:t[l])}var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){s=Array(l);for(var f=0;f<l;f++)s[f]=arguments[f+2];o.children=s}return{$$typeof:i,type:e.type,key:a,ref:u,props:o,_owner:c}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=T,t.createFactory=function(e){var t=T.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:p,render:e}},t.isValidElement=_,t.lazy=function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return I().useCallback(e,t)},t.useContext=function(e,t){return I().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return I().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return I().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return I().useLayoutEffect(e,t)},t.useMemo=function(e,t){return I().useMemo(e,t)},t.useReducer=function(e,t,n){return I().useReducer(e,t,n)},t.useRef=function(e){return I().useRef(e)},t.useState=function(e){return I().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,c=a(e),s=1;s<arguments.length;s++){for(var l in n=Object(arguments[s]))o.call(n,l)&&(c[l]=n[l]);if(r){u=r(n);for(var f=0;f<u.length;f++)i.call(n,u[f])&&(c[u[f]]=n[u[f]])}}return c}},function(e,t,n){"use strict";var r=n(14);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,c=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,l=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,h=r?Symbol.for("react.forward_ref"):60112,d=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,y=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116,b=r?Symbol.for("react.block"):60121,g=r?Symbol.for("react.fundamental"):60117,E=r?Symbol.for("react.responder"):60118,w=r?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case p:case a:case c:case u:case d:return e;default:switch(e=e&&e.$$typeof){case l:case h:case v:case y:case s:return e;default:return t}}case i:return t}}}function C(e){return x(e)===p}t.AsyncMode=f,t.ConcurrentMode=p,t.ContextConsumer=l,t.ContextProvider=s,t.Element=o,t.ForwardRef=h,t.Fragment=a,t.Lazy=v,t.Memo=y,t.Portal=i,t.Profiler=c,t.StrictMode=u,t.Suspense=d,t.isAsyncMode=function(e){return C(e)||x(e)===f},t.isConcurrentMode=C,t.isContextConsumer=function(e){return x(e)===l},t.isContextProvider=function(e){return x(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return x(e)===h},t.isFragment=function(e){return x(e)===a},t.isLazy=function(e){return x(e)===v},t.isMemo=function(e){return x(e)===y},t.isPortal=function(e){return x(e)===i},t.isProfiler=function(e){return x(e)===c},t.isStrictMode=function(e){return x(e)===u},t.isSuspense=function(e){return x(e)===d},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===p||e===c||e===u||e===d||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===y||e.$$typeof===s||e.$$typeof===l||e.$$typeof===h||e.$$typeof===g||e.$$typeof===E||e.$$typeof===w||e.$$typeof===b)},t.typeOf=x}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXBhdGhuYW1lL2VzbS9yZXNvbHZlLXBhdGhuYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92YWx1ZS1lcXVhbC9lc20vdmFsdWUtZXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbnktaW52YXJpYW50L2Rpc3QvdGlueS1pbnZhcmlhbnQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzbS9oaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXNtL3JlYWN0LXJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dC9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGF0aC10by1yZWdleHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9hcHBsaWNhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNvbnN0cnVjdG9yIiwiX19wcm90b19fIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJhcHBseSIsInRoaXMiLCJpc0Fic29sdXRlIiwicGF0aG5hbWUiLCJjaGFyQXQiLCJzcGxpY2VPbmUiLCJsaXN0IiwiaW5kZXgiLCJrIiwicG9wIiwidG8iLCJmcm9tIiwidW5kZWZpbmVkIiwiaGFzVHJhaWxpbmdTbGFzaCIsInRvUGFydHMiLCJzcGxpdCIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwiY29uY2F0IiwibGFzdCIsInVwIiwicGFydCIsInVuc2hpZnQiLCJyZXN1bHQiLCJqb2luIiwic3Vic3RyIiwib2JqIiwidmFsdWVPZiIsInZhbHVlRXF1YWwiLCJhIiwiYiIsIkFycmF5IiwiaXNBcnJheSIsImV2ZXJ5IiwiaXRlbSIsImFWYWx1ZSIsImJWYWx1ZSIsImtleXMiLCJjb25kaXRpb24iLCJtZXNzYWdlIiwiRXJyb3IiLCJjcmVhdGVQYXRoIiwibG9jYXRpb24iLCJzZWFyY2giLCJoYXNoIiwicGF0aCIsImNyZWF0ZUxvY2F0aW9uIiwic3RhdGUiLCJjdXJyZW50TG9jYXRpb24iLCJoYXNoSW5kZXgiLCJpbmRleE9mIiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJkZWNvZGVVUkkiLCJlIiwiVVJJRXJyb3IiLCJjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsImxpc3RlbmVycyIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiYWN0aW9uIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImNhbGxiYWNrIiwiYXBwZW5kTGlzdGVuZXIiLCJmbiIsImlzQWN0aXZlIiwibGlzdGVuZXIiLCJwdXNoIiwiZmlsdGVyIiwibm90aWZ5TGlzdGVuZXJzIiwiX2xlbiIsImFyZ3MiLCJfa2V5IiwiZm9yRWFjaCIsIndpbmRvdyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYW1wIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJNYXRoIiwibWluIiwibWF4IiwiY3JlYXRlTWVtb3J5SGlzdG9yeSIsInByb3BzIiwiX3Byb3BzIiwiX3Byb3BzJGluaXRpYWxFbnRyaWVzIiwiaW5pdGlhbEVudHJpZXMiLCJfcHJvcHMkaW5pdGlhbEluZGV4IiwiaW5pdGlhbEluZGV4IiwiX3Byb3BzJGtleUxlbmd0aCIsImtleUxlbmd0aCIsInRyYW5zaXRpb25NYW5hZ2VyIiwic2V0U3RhdGUiLCJuZXh0U3RhdGUiLCJoaXN0b3J5IiwiZW50cmllcyIsImNyZWF0ZUtleSIsInJhbmRvbSIsInRvU3RyaW5nIiwibWFwIiwiZW50cnkiLCJjcmVhdGVIcmVmIiwiZ28iLCJuZXh0SW5kZXgiLCJvayIsIm5leHRFbnRyaWVzIiwic2xpY2UiLCJzcGxpY2UiLCJyZXBsYWNlIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwiY2FuR28iLCJibG9jayIsImxpc3RlbiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiaGlzdG9yeUNvbnRleHQiLCJjb250ZXh0IiwiZGlzcGxheU5hbWUiLCJjcmVhdGVOYW1lZENvbnRleHQkMSIsIl9SZWFjdCRDb21wb25lbnQiLCJSb3V0ZXIiLCJfdGhpcyIsIl9pc01vdW50ZWQiLCJfcGVuZGluZ0xvY2F0aW9uIiwic3RhdGljQ29udGV4dCIsInVubGlzdGVuIiwiY29tcHV0ZVJvb3RNYXRjaCIsInVybCIsInBhcmFtcyIsImlzRXhhY3QiLCJfcHJvdG8iLCJjb21wb25lbnREaWRNb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwicmVuZGVyIiwiUHJvdmlkZXIiLCJtYXRjaCIsImNoaWxkcmVuIiwiQ29tcG9uZW50IiwiTWVtb3J5Um91dGVyIiwiTGlmZWN5Y2xlIiwib25Nb3VudCIsImNvbXBvbmVudERpZFVwZGF0ZSIsInByZXZQcm9wcyIsIm9uVXBkYXRlIiwib25Vbm1vdW50IiwiUHJvbXB0IiwiX3JlZiIsIl9yZWYkd2hlbiIsIndoZW4iLCJDb25zdW1lciIsIm1ldGhvZCIsInNlbGYiLCJyZWxlYXNlIiwiY2FjaGUiLCJjYWNoZUNvdW50IiwiZ2VuZXJhdGVQYXRoIiwiZ2VuZXJhdG9yIiwiY29tcGlsZSIsImNvbXBpbGVQYXRoIiwicHJldHR5IiwiUmVkaXJlY3QiLCJjb21wdXRlZE1hdGNoIiwiX3JlZiRwdXNoIiwicHJldkxvY2F0aW9uIiwiY2FjaGUkMSIsImNhY2hlQ291bnQkMSIsIm1hdGNoUGF0aCIsIm9wdGlvbnMiLCJfb3B0aW9ucyIsIl9vcHRpb25zJGV4YWN0IiwiZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJzZW5zaXRpdmUiLCJyZWR1Y2UiLCJtYXRjaGVkIiwiX2NvbXBpbGVQYXRoIiwiY2FjaGVLZXkiLCJlbmQiLCJwYXRoQ2FjaGUiLCJyZWdleHAiLCJjb21waWxlUGF0aCQxIiwiZXhlYyIsInZhbHVlcyIsIm1lbW8iLCJSb3V0ZSIsImNvbnRleHQkMSIsIl90aGlzJHByb3BzIiwiY29tcG9uZW50IiwiYmFzZW5hbWUiLCJiYXNlIiwiY3JlYXRlVVJMIiwic3RhdGljSGFuZGxlciIsIm1ldGhvZE5hbWUiLCJub29wIiwiU3RhdGljUm91dGVyIiwiaGFuZGxlUHVzaCIsIm5hdmlnYXRlVG8iLCJoYW5kbGVSZXBsYWNlIiwiaGFuZGxlTGlzdGVuIiwiaGFuZGxlQmxvY2siLCJfdGhpcyRwcm9wcyRiYXNlbmFtZSIsIl90aGlzJHByb3BzJGNvbnRleHQiLCJhZGRCYXNlbmFtZSIsIl90aGlzJHByb3BzMiIsIl90aGlzJHByb3BzMiRiYXNlbmFtZSIsIl90aGlzJHByb3BzMiRjb250ZXh0IiwiX3RoaXMkcHJvcHMyJGxvY2F0aW9uIiwicmVzdCIsIlN3aXRjaCIsImVsZW1lbnQiLCJDaGlsZHJlbiIsImNoaWxkIiwiaXNWYWxpZEVsZW1lbnQiLCJjbG9uZUVsZW1lbnQiLCJ3aXRoUm91dGVyIiwiQyIsIndyYXBwZWRDb21wb25lbnRSZWYiLCJyZW1haW5pbmdQcm9wcyIsInJlZiIsIldyYXBwZWRDb21wb25lbnQiLCJ1c2VDb250ZXh0IiwidXNlSGlzdG9yeSIsInVzZUxvY2F0aW9uIiwidXNlUGFyYW1zIiwidXNlUm91dGVNYXRjaCIsImNvbW1vbmpzR2xvYmFsIiwiZ2xvYmFsVGhpcyIsImdsb2JhbCIsImNyZWF0ZUV2ZW50RW1pdHRlciIsImhhbmRsZXJzIiwib24iLCJoYW5kbGVyIiwib2ZmIiwiaCIsInNldCIsIm5ld1ZhbHVlIiwiY2hhbmdlZEJpdHMiLCJjcmVhdGVDb250ZXh0IiwiZGVmYXVsdFZhbHVlIiwiY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJfQ29uc3VtZXIkY29udGV4dFR5cGUiLCJjb250ZXh0UHJvcCIsIl9Db21wb25lbnQiLCJlbWl0dGVyIiwiZ2V0Q2hpbGRDb250ZXh0IiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsIm9sZFZhbHVlIiwieCIsInkiLCJjaGlsZENvbnRleHRUeXBlcyIsImlzUmVxdWlyZWQiLCJfQ29tcG9uZW50MiIsIl90aGlzMiIsImdldFZhbHVlIiwib2JzZXJ2ZWRCaXRzIiwiX3Byb3RvMiIsImNvbnRleHRUeXBlcyIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHAiLCJwYXJzZSIsInN0ciIsInRva2Vuc1RvRnVuY3Rpb24iLCJ0b2tlbnNUb1JlZ0V4cCIsIlBBVEhfUkVHRVhQIiwiUmVnRXhwIiwicmVzIiwidG9rZW5zIiwiZGVmYXVsdERlbGltaXRlciIsImRlbGltaXRlciIsImVzY2FwZWQiLCJvZmZzZXQiLCJuZXh0IiwicHJlZml4IiwiY2FwdHVyZSIsImdyb3VwIiwibW9kaWZpZXIiLCJhc3RlcmlzayIsInBhcnRpYWwiLCJyZXBlYXQiLCJvcHRpb25hbCIsInBhdHRlcm4iLCJlc2NhcGVHcm91cCIsImVzY2FwZVN0cmluZyIsImVuY29kZVVSSUNvbXBvbmVudFByZXR0eSIsImVuY29kZVVSSSIsImNoYXJDb2RlQXQiLCJ0b1VwcGVyQ2FzZSIsIm1hdGNoZXMiLCJmbGFncyIsIm9wdHMiLCJkYXRhIiwiZW5jb2RlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwidG9rZW4iLCJzZWdtZW50IiwiVHlwZUVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsImoiLCJ0ZXN0IiwiYXR0YWNoS2V5cyIsInJlIiwicm91dGUiLCJlbmRzV2l0aERlbGltaXRlciIsImdyb3VwcyIsInJlZ2V4cFRvUmVnZXhwIiwicGFydHMiLCJhcnJheVRvUmVnZXhwIiwic3RyaW5nVG9SZWdleHAiLCJyZWFjdElzIiwiUkVBQ1RfU1RBVElDUyIsImNvbnRleHRUeXBlIiwiZGVmYXVsdFByb3BzIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwidHlwZSIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsIk1lbW8iLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiZGVzY3JpcHRvciIsIkxpbmsiLCJyZXF1aXJlIiwiaG91cnMiLCJEYXRlIiwiZ2V0SG91cnMiLCJsYXQiLCJnZXRNaW51dGVzIiwibG9uIiwiY2l0eSIsImRheXMiLCJpZCIsImFiYiIsIkRlbGF5TGluayIsImRlbGF5Iiwib25EZWxheVN0YXJ0Iiwib25EZWxheUVuZCIsInJvdXRlciIsImRlZmF1bHRQcmV2ZW50ZWQiLCJwcmV2ZW50RGVmYXVsdCIsInRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0Iiwib25DbGljayIsImhhbmRsZUNsaWNrIiwiUmVhY3QiLCJudW1iZXIiLCJmdW5jIiwiQ2l0eVNlYXJjaCIsImlucHV0IiwiaGFuZGxlQ2hhbmdlIiwidXBkYXRlQ2l0eSIsImdlb0FQSSIsInJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJvbmxvYWQiLCJyZXNwb25zZSIsInJlc3VsdHMiLCJmb3JtYXR0ZWRfYWRkcmVzcyIsImdlb21ldHJ5IiwibG5nIiwic2VuZCIsImV2ZW50IiwicGxhY2Vob2xkZXIiLCJvbkNoYW5nZSIsImNsYXNzTmFtZSIsIkFwcGxpY2F0aW9uIiwiaWNvbiIsInVuaXQiLCJjdXJyZW50VGVtcCIsImN1cnJlbnREYXkiLCJkYWlseSIsInRpbWVUZXN0IiwidW5pdENoYW5nZSIsImludGVydmFsSUQiLCJzZXRJbnRlcnZhbCIsIkFQSSIsIkFQSVJlc3BvbnNlIiwiY3VycmVudCIsIndlYXRoZXIiLCJmbG9vciIsInRlbXAiLCJkdCIsImNsZWFySW50ZXJ2YWwiLCJzdHlsZSIsImJhY2tncm91bmRJbWFnZSIsInF1ZXJ5IiwiY29sb3IiLCJkYXJrTW9kZSIsIndpZHRoIiwiaGVpZ2h0Iiwic3JjIiwicm91bmQiLCJtZXRyaWMiLCJmb250V2VpZ2h0IiwiV2Vla0NhcmQiLCJjcmVhdGVDbGFzcyIsImdldEluaXRpYWxTdGF0ZSIsImF2ZXJhZ2VIaWdoIiwiYWN0aXZlIiwibW9ybiIsImV2ZSIsIndpbmRTcGVlZCIsImRld1BvaW50IiwiaHVtaWRpdHkiLCJ3ZWVrIiwiZGF5Iiwid2luZF9zcGVlZCIsImRld19wb2ludCIsIm1pbkhlaWdodCIsInZpc2liaWxpdHkiLCJSb290IiwiSGFzaFJvdXRlciIsImhhc2hIaXN0b3J5IiwicHJvY2VzcyIsImVudiIsIlBVQkxJQ19VUkwiLCJSZWFjdERPTSIsImdldEVsZW1lbnRCeUlkIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsImxlbiIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJhcnJheSIsIm5leHRUaWNrIiwidGl0bGUiLCJicm93c2VyIiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsImFkZExpc3RlbmVyIiwib25jZSIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsImZvciIsInEiLCJ1IiwidiIsInciLCJ6IiwiQSIsIkIiLCJpdGVyYXRvciIsIkQiLCJpc01vdW50ZWQiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZVNldFN0YXRlIiwiRSIsIkYiLCJyZWZzIiwidXBkYXRlciIsIkciLCJIIiwiaXNSZWFjdENvbXBvbmVudCIsImZvcmNlVXBkYXRlIiwiSSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiSiIsIksiLCJMIiwiX19zZWxmIiwiX19zb3VyY2UiLCJNIiwiZyIsImYiLCIkJHR5cGVvZiIsIl9vd25lciIsIk8iLCJQIiwiUSIsIlIiLCJrZXlQcmVmaXgiLCJjb3VudCIsIlMiLCJWIiwiVCIsIlUiLCJkb25lIiwiZXNjYXBlIiwiVyIsImFhIiwiWCIsIk4iLCJZIiwiWiIsImJhIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwic3VzcGVuc2UiLCJSZWFjdEN1cnJlbnRPd25lciIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwidG9BcnJheSIsIm9ubHkiLCJGcmFnbWVudCIsIlByb2ZpbGVyIiwiUHVyZUNvbXBvbmVudCIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiX2NvbnRleHQiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsImxhenkiLCJfY3RvciIsIl9zdGF0dXMiLCJfcmVzdWx0IiwidXNlQ2FsbGJhY2siLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInZhbCIsInRlc3QxIiwiU3RyaW5nIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsImVyciIsInNob3VsZFVzZU5hdGl2ZSIsInN5bWJvbHMiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwiYm9vbCIsInN0cmluZyIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJlbGVtZW50VHlwZSIsImluc3RhbmNlT2YiLCJub2RlIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsInNoYXBlIiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJGdW5jdGlvbiIsImFyciIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRWxlbWVudCIsIkxhenkiLCJQb3J0YWwiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJ0eXBlT2YiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENBQUVULFlBQVksRUFBTUssTUFBT0EsSUFDdEQsRUFBUEUsR0FBNEIsaUJBQVRGLEVBQW1CLElBQUksSUFBSU0sS0FBT04sRUFBT3JCLEVBQW9CVSxFQUFFZSxFQUFJRSxFQUFLLFNBQVNBLEdBQU8sT0FBT04sRUFBTU0sSUFBUUMsS0FBSyxLQUFNRCxJQUM5SSxPQUFPRixHQUlSekIsRUFBb0I2QixFQUFJLFNBQVMxQixHQUNoQyxJQUFJUyxFQUFTVCxHQUFVQSxFQUFPcUIsV0FDN0IsV0FBd0IsT0FBT3JCLEVBQWdCLFNBQy9DLFdBQThCLE9BQU9BLEdBRXRDLE9BREFILEVBQW9CVSxFQUFFRSxFQUFRLElBQUtBLEdBQzVCQSxHQUlSWixFQUFvQmEsRUFBSSxTQUFTaUIsRUFBUUMsR0FBWSxPQUFPakIsT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLdUIsRUFBUUMsSUFHekcvQixFQUFvQmtDLEVBQUksSUFJakJsQyxFQUFvQkEsRUFBb0JtQyxFQUFJLEcsK0JDL0VuRGhDLEVBQU9ELFFBQVUsRUFBUSxLLDZCQ0haLFNBQVNrQyxFQUFlQyxFQUFVQyxHQUMvQ0QsRUFBU0wsVUFBWWxCLE9BQU9ZLE9BQU9ZLEVBQVdOLFdBQzlDSyxFQUFTTCxVQUFVTyxZQUFjRixFQUNqQ0EsRUFBU0csVUFBWUYsRUFIdkIsbUMsZ0JDaUJFbkMsRUFBT0QsUUFBVSxFQUFRLEdBQVIsSSxvdkJDakJKLFNBQVN1QyxJQWV0QixPQWRBQSxFQUFXM0IsT0FBTzRCLFFBQVUsU0FBVUMsR0FDcEMsSUFBSyxJQUFJdkMsRUFBSSxFQUFHQSxFQUFJd0MsVUFBVUMsT0FBUXpDLElBQUssQ0FDekMsSUFBSTBDLEVBQVNGLFVBQVV4QyxHQUV2QixJQUFLLElBQUl1QixLQUFPbUIsRUFDVmhDLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS3VDLEVBQVFuQixLQUMvQ2dCLEVBQU9oQixHQUFPbUIsRUFBT25CLElBSzNCLE9BQU9nQixJQUdPSSxNQUFNQyxLQUFNSixXQ2Y5QixTQUFTSyxFQUFXQyxHQUNsQixNQUE4QixNQUF2QkEsRUFBU0MsT0FBTyxHQUl6QixTQUFTQyxFQUFVQyxFQUFNQyxHQUN2QixJQUFLLElBQUlsRCxFQUFJa0QsRUFBT0MsRUFBSW5ELEVBQUksRUFBR3lCLEVBQUl3QixFQUFLUixPQUFRVSxFQUFJMUIsRUFBR3pCLEdBQUssRUFBR21ELEdBQUssRUFDbEVGLEVBQUtqRCxHQUFLaUQsRUFBS0UsR0FHakJGLEVBQUtHLE1BZ0VRLE1BNURmLFNBQXlCQyxFQUFJQyxRQUNkQyxJQUFURCxJQUFvQkEsRUFBTyxJQUUvQixJQWtCSUUsRUFsQkFDLEVBQVdKLEdBQU1BLEVBQUdLLE1BQU0sTUFBUyxHQUNuQ0MsRUFBYUwsR0FBUUEsRUFBS0ksTUFBTSxNQUFTLEdBRXpDRSxFQUFVUCxHQUFNUixFQUFXUSxHQUMzQlEsRUFBWVAsR0FBUVQsRUFBV1MsR0FDL0JRLEVBQWFGLEdBQVdDLEVBVzVCLEdBVElSLEdBQU1SLEVBQVdRLEdBRW5CTSxFQUFZRixFQUNIQSxFQUFRaEIsU0FFakJrQixFQUFVUCxNQUNWTyxFQUFZQSxFQUFVSSxPQUFPTixLQUcxQkUsRUFBVWxCLE9BQVEsTUFBTyxJQUc5QixHQUFJa0IsRUFBVWxCLE9BQVEsQ0FDcEIsSUFBSXVCLEVBQU9MLEVBQVVBLEVBQVVsQixPQUFTLEdBQ3hDZSxFQUE0QixNQUFUUSxHQUF5QixPQUFUQSxHQUEwQixLQUFUQSxPQUVwRFIsR0FBbUIsRUFJckIsSUFEQSxJQUFJUyxFQUFLLEVBQ0FqRSxFQUFJMkQsRUFBVWxCLE9BQVF6QyxHQUFLLEVBQUdBLElBQUssQ0FDMUMsSUFBSWtFLEVBQU9QLEVBQVUzRCxHQUVSLE1BQVRrRSxFQUNGbEIsRUFBVVcsRUFBVzNELEdBQ0gsT0FBVGtFLEdBQ1RsQixFQUFVVyxFQUFXM0QsR0FDckJpRSxLQUNTQSxJQUNUakIsRUFBVVcsRUFBVzNELEdBQ3JCaUUsS0FJSixJQUFLSCxFQUFZLEtBQU9HLElBQU1BLEVBQUlOLEVBQVVRLFFBQVEsT0FHbERMLEdBQ2lCLEtBQWpCSCxFQUFVLElBQ1JBLEVBQVUsSUFBT2QsRUFBV2MsRUFBVSxLQUV4Q0EsRUFBVVEsUUFBUSxJQUVwQixJQUFJQyxFQUFTVCxFQUFVVSxLQUFLLEtBSTVCLE9BRkliLEdBQTBDLE1BQXRCWSxFQUFPRSxRQUFRLEtBQVlGLEdBQVUsS0FFdERBLEdDdkVULFNBQVMsRUFBUUcsR0FDZixPQUFPQSxFQUFJQyxRQUFVRCxFQUFJQyxVQUFZOUQsT0FBT2tCLFVBQVU0QyxRQUFRckUsS0FBS29FLEdBa0N0RCxNQS9CZixTQUFTRSxFQUFXQyxFQUFHQyxHQUVyQixHQUFJRCxJQUFNQyxFQUFHLE9BQU8sRUFHcEIsR0FBUyxNQUFMRCxHQUFrQixNQUFMQyxFQUFXLE9BQU8sRUFFbkMsR0FBSUMsTUFBTUMsUUFBUUgsR0FDaEIsT0FDRUUsTUFBTUMsUUFBUUYsSUFDZEQsRUFBRWpDLFNBQVdrQyxFQUFFbEMsUUFDZmlDLEVBQUVJLE9BQU0sU0FBU0MsRUFBTTdCLEdBQ3JCLE9BQU91QixFQUFXTSxFQUFNSixFQUFFekIsT0FLaEMsR0FBaUIsaUJBQU53QixHQUErQixpQkFBTkMsRUFBZ0IsQ0FDbEQsSUFBSUssRUFBUyxFQUFRTixHQUNqQk8sRUFBUyxFQUFRTixHQUVyQixPQUFJSyxJQUFXTixHQUFLTyxJQUFXTixFQUFVRixFQUFXTyxFQUFRQyxHQUVyRHZFLE9BQU93RSxLQUFLeEUsT0FBTzRCLE9BQU8sR0FBSW9DLEVBQUdDLElBQUlHLE9BQU0sU0FBU3ZELEdBQ3pELE9BQU9rRCxFQUFXQyxFQUFFbkQsR0FBTW9ELEVBQUVwRCxPQUloQyxPQUFPLEdDcEJNLE1BVmYsU0FBbUI0RCxFQUFXQyxHQUMxQixJQUFJRCxFQUlBLE1BQU0sSUFBSUUsTUFOTCxxQkM0Q2IsU0FBU0MsRUFBV0MsR0FDbEIsSUFBSXpDLEVBQVd5QyxFQUFTekMsU0FDcEIwQyxFQUFTRCxFQUFTQyxPQUNsQkMsRUFBT0YsRUFBU0UsS0FDaEJDLEVBQU81QyxHQUFZLElBR3ZCLE9BRkkwQyxHQUFxQixNQUFYQSxJQUFnQkUsR0FBNkIsTUFBckJGLEVBQU96QyxPQUFPLEdBQWF5QyxFQUFTLElBQU1BLEdBQzVFQyxHQUFpQixNQUFUQSxJQUFjQyxHQUEyQixNQUFuQkQsRUFBSzFDLE9BQU8sR0FBYTBDLEVBQU8sSUFBTUEsR0FDakVDLEVBR1QsU0FBU0MsRUFBZUQsRUFBTUUsRUFBT3JFLEVBQUtzRSxHQUN4QyxJQUFJTixFQUVnQixpQkFBVEcsR0FFVEgsRUF2Q0osU0FBbUJHLEdBQ2pCLElBQUk1QyxFQUFXNEMsR0FBUSxJQUNuQkYsRUFBUyxHQUNUQyxFQUFPLEdBQ1BLLEVBQVloRCxFQUFTaUQsUUFBUSxNQUVkLElBQWZELElBQ0ZMLEVBQU8zQyxFQUFTd0IsT0FBT3dCLEdBQ3ZCaEQsRUFBV0EsRUFBU3dCLE9BQU8sRUFBR3dCLElBR2hDLElBQUlFLEVBQWNsRCxFQUFTaUQsUUFBUSxLQU9uQyxPQUxxQixJQUFqQkMsSUFDRlIsRUFBUzFDLEVBQVN3QixPQUFPMEIsR0FDekJsRCxFQUFXQSxFQUFTd0IsT0FBTyxFQUFHMEIsSUFHekIsQ0FDTGxELFNBQVVBLEVBQ1YwQyxPQUFtQixNQUFYQSxFQUFpQixHQUFLQSxFQUM5QkMsS0FBZSxNQUFUQSxFQUFlLEdBQUtBLEdBa0JmUSxDQUFVUCxJQUNaRSxNQUFRQSxRQUlTckMsS0FEMUJnQyxFQUFXbEQsRUFBUyxHQUFJcUQsSUFDWDVDLFdBQXdCeUMsRUFBU3pDLFNBQVcsSUFFckR5QyxFQUFTQyxPQUN1QixNQUE5QkQsRUFBU0MsT0FBT3pDLE9BQU8sS0FBWXdDLEVBQVNDLE9BQVMsSUFBTUQsRUFBU0MsUUFFeEVELEVBQVNDLE9BQVMsR0FHaEJELEVBQVNFLEtBQ3FCLE1BQTVCRixFQUFTRSxLQUFLMUMsT0FBTyxLQUFZd0MsRUFBU0UsS0FBTyxJQUFNRixFQUFTRSxNQUVwRUYsRUFBU0UsS0FBTyxRQUdKbEMsSUFBVnFDLFFBQTBDckMsSUFBbkJnQyxFQUFTSyxRQUFxQkwsRUFBU0ssTUFBUUEsSUFHNUUsSUFDRUwsRUFBU3pDLFNBQVdvRCxVQUFVWCxFQUFTekMsVUFDdkMsTUFBT3FELEdBQ1AsTUFBSUEsYUFBYUMsU0FDVCxJQUFJQSxTQUFTLGFBQWViLEVBQVN6QyxTQUF4QixpRkFFYnFELEVBb0JWLE9BaEJJNUUsSUFBS2dFLEVBQVNoRSxJQUFNQSxHQUVwQnNFLEVBRUdOLEVBQVN6QyxTQUU2QixNQUFoQ3lDLEVBQVN6QyxTQUFTQyxPQUFPLEtBQ2xDd0MsRUFBU3pDLFNBQVcsRUFBZ0J5QyxFQUFTekMsU0FBVStDLEVBQWdCL0MsV0FGdkV5QyxFQUFTekMsU0FBVytDLEVBQWdCL0MsU0FNakN5QyxFQUFTekMsV0FDWnlDLEVBQVN6QyxTQUFXLEtBSWpCeUMsRUFNVCxTQUFTYyxJQUNQLElBQUlDLEVBQVMsS0FpQ2IsSUFBSUMsRUFBWSxHQTRCaEIsTUFBTyxDQUNMQyxVQTVERixTQUFtQkMsR0FHakIsT0FEQUgsRUFBU0csRUFDRixXQUNESCxJQUFXRyxJQUFZSCxFQUFTLFFBeUR0Q0ksb0JBckRGLFNBQTZCbkIsRUFBVW9CLEVBQVFDLEVBQXFCQyxHQUlsRSxHQUFjLE1BQVZQLEVBQWdCLENBQ2xCLElBQUlsQyxFQUEyQixtQkFBWGtDLEVBQXdCQSxFQUFPZixFQUFVb0IsR0FBVUwsRUFFakQsaUJBQVhsQyxFQUMwQixtQkFBeEJ3QyxFQUNUQSxFQUFvQnhDLEVBQVF5QyxHQUc1QkEsR0FBUyxHQUlYQSxHQUFvQixJQUFYekMsUUFHWHlDLEdBQVMsSUFtQ1hDLGVBN0JGLFNBQXdCQyxHQUN0QixJQUFJQyxHQUFXLEVBRWYsU0FBU0MsSUFDSEQsR0FBVUQsRUFBR3BFLFdBQU0sRUFBUUgsV0FJakMsT0FEQStELEVBQVVXLEtBQUtELEdBQ1IsV0FDTEQsR0FBVyxFQUNYVCxFQUFZQSxFQUFVWSxRQUFPLFNBQVVwQyxHQUNyQyxPQUFPQSxJQUFTa0MsT0FtQnBCRyxnQkFkRixXQUNFLElBQUssSUFBSUMsRUFBTzdFLFVBQVVDLE9BQVE2RSxFQUFPLElBQUkxQyxNQUFNeUMsR0FBT0UsRUFBTyxFQUFHQSxFQUFPRixFQUFNRSxJQUMvRUQsRUFBS0MsR0FBUS9FLFVBQVUrRSxHQUd6QmhCLEVBQVVpQixTQUFRLFNBQVVQLEdBQzFCLE9BQU9BLEVBQVN0RSxXQUFNLEVBQVEyRSxRQVlDLG9CQUFYRyxTQUEwQkEsT0FBT0MsVUFBWUQsT0FBT0MsU0FBU0MsY0Era0J2RixTQUFTQyxFQUFNbkcsRUFBR29HLEVBQVlDLEdBQzVCLE9BQU9DLEtBQUtDLElBQUlELEtBQUtFLElBQUl4RyxFQUFHb0csR0FBYUMsR0FPM0MsU0FBU0ksRUFBb0JDLFFBQ2IsSUFBVkEsSUFDRkEsRUFBUSxJQUdWLElBQUlDLEVBQVNELEVBQ1R2QixFQUFzQndCLEVBQU94QixvQkFDN0J5QixFQUF3QkQsRUFBT0UsZUFDL0JBLE9BQTJDLElBQTFCRCxFQUFtQyxDQUFDLEtBQU9BLEVBQzVERSxFQUFzQkgsRUFBT0ksYUFDN0JBLE9BQXVDLElBQXhCRCxFQUFpQyxFQUFJQSxFQUNwREUsRUFBbUJMLEVBQU9NLFVBQzFCQSxPQUFpQyxJQUFyQkQsRUFBOEIsRUFBSUEsRUFDOUNFLEVBQW9CdEMsSUFFeEIsU0FBU3VDLEVBQVNDLEdBQ2hCeEcsRUFBU3lHLEVBQVNELEdBRWxCQyxFQUFRckcsT0FBU3FHLEVBQVFDLFFBQVF0RyxPQUNqQ2tHLEVBQWtCdkIsZ0JBQWdCMEIsRUFBUXZELFNBQVV1RCxFQUFRbkMsUUFHOUQsU0FBU3FDLElBQ1AsT0FBT2pCLEtBQUtrQixTQUFTQyxTQUFTLElBQUk1RSxPQUFPLEVBQUdvRSxHQUc5QyxJQUFJeEYsRUFBUTBFLEVBQU1ZLEVBQWMsRUFBR0YsRUFBZTdGLE9BQVMsR0FDdkRzRyxFQUFVVCxFQUFlYSxLQUFJLFNBQVVDLEdBQ3pDLE9BQW1DekQsRUFBZXlELE9BQU83RixFQUFqQyxpQkFBVjZGLEVBQXNESixJQUFnREksRUFBTTdILEtBQU95SCxRQUcvSEssRUFBYS9ELEVBeUNqQixTQUFTZ0UsRUFBRzdILEdBQ1YsSUFBSThILEVBQVkzQixFQUFNa0IsRUFBUTVGLE1BQVF6QixFQUFHLEVBQUdxSCxFQUFRQyxRQUFRdEcsT0FBUyxHQUVqRThDLEVBQVd1RCxFQUFRQyxRQUFRUSxHQUMvQlosRUFBa0JqQyxvQkFBb0JuQixFQUZ6QixNQUUyQ3FCLEdBQXFCLFNBQVU0QyxHQUNqRkEsRUFDRlosRUFBUyxDQUNQakMsT0FMTyxNQU1QcEIsU0FBVUEsRUFDVnJDLE1BQU9xRyxJQUtUWCxPQThCTixJQUFJRSxFQUFVLENBQ1pyRyxPQUFRc0csRUFBUXRHLE9BQ2hCa0UsT0FBUSxNQUNScEIsU0FBVXdELEVBQVE3RixHQUNsQkEsTUFBT0EsRUFDUDZGLFFBQVNBLEVBQ1RNLFdBQVlBLEVBQ1puQyxLQTFGRixTQUFjeEIsRUFBTUUsR0FFbEIsSUFDSUwsRUFBV0ksRUFBZUQsRUFBTUUsRUFBT29ELElBQWFGLEVBQVF2RCxVQUNoRW9ELEVBQWtCakMsb0JBQW9CbkIsRUFGekIsT0FFMkNxQixHQUFxQixTQUFVNEMsR0FDckYsR0FBS0EsRUFBTCxDQUNBLElBQ0lELEVBRFlULEVBQVE1RixNQUNJLEVBQ3hCdUcsRUFBY1gsRUFBUUMsUUFBUVcsTUFBTSxHQUVwQ0QsRUFBWWhILE9BQVM4RyxFQUN2QkUsRUFBWUUsT0FBT0osRUFBV0UsRUFBWWhILE9BQVM4RyxFQUFXaEUsR0FFOURrRSxFQUFZdkMsS0FBSzNCLEdBR25CcUQsRUFBUyxDQUNQakMsT0FmUyxPQWdCVHBCLFNBQVVBLEVBQ1ZyQyxNQUFPcUcsRUFDUFIsUUFBU1UsU0F1RWJHLFFBbEVGLFNBQWlCbEUsRUFBTUUsR0FFckIsSUFDSUwsRUFBV0ksRUFBZUQsRUFBTUUsRUFBT29ELElBQWFGLEVBQVF2RCxVQUNoRW9ELEVBQWtCakMsb0JBQW9CbkIsRUFGekIsVUFFMkNxQixHQUFxQixTQUFVNEMsR0FDaEZBLElBQ0xWLEVBQVFDLFFBQVFELEVBQVE1RixPQUFTcUMsRUFDakNxRCxFQUFTLENBQ1BqQyxPQU5TLFVBT1RwQixTQUFVQSxTQTBEZCtELEdBQUlBLEVBQ0pPLE9BbkNGLFdBQ0VQLEdBQUksSUFtQ0pRLFVBaENGLFdBQ0VSLEVBQUcsSUFnQ0hTLE1BN0JGLFNBQWV0SSxHQUNiLElBQUk4SCxFQUFZVCxFQUFRNUYsTUFBUXpCLEVBQ2hDLE9BQU84SCxHQUFhLEdBQUtBLEVBQVlULEVBQVFDLFFBQVF0RyxRQTRCckR1SCxNQXpCRixTQUFlMUQsR0FLYixZQUplLElBQVhBLElBQ0ZBLEdBQVMsR0FHSnFDLEVBQWtCbkMsVUFBVUYsSUFxQm5DMkQsT0FsQkYsU0FBZ0JoRCxHQUNkLE9BQU8wQixFQUFrQjdCLGVBQWVHLEtBbUIxQyxPQUFPNkIsRSxnQ0NuNUJNLFNBQVNvQixFQUE4QnhILEVBQVF5SCxHQUM1RCxHQUFjLE1BQVZ6SCxFQUFnQixNQUFPLEdBQzNCLElBRUluQixFQUFLdkIsRUFGTHVDLEVBQVMsR0FDVDZILEVBQWExSixPQUFPd0UsS0FBS3hDLEdBRzdCLElBQUsxQyxFQUFJLEVBQUdBLEVBQUlvSyxFQUFXM0gsT0FBUXpDLElBQ2pDdUIsRUFBTTZJLEVBQVdwSyxHQUNibUssRUFBU3BFLFFBQVF4RSxJQUFRLElBQzdCZ0IsRUFBT2hCLEdBQU9tQixFQUFPbkIsSUFHdkIsT0FBT2dCLEUsb0JDU0w4SCxFQU5xQixTQUE0QjlKLEdBQ25ELElBQUkrSixFQUFVLGNBRWQsT0FEQUEsRUFBUUMsWUFBY2hLLEVBQ2YrSixFQUtULENBQW1CLGtCQVVmLEVBTnVCLFNBQTRCL0osR0FDckQsSUFBSStKLEVBQVUsY0FFZCxPQURBQSxFQUFRQyxZQUFjaEssRUFDZitKLEVBS1RFLENBQXFCLFVBTWpCLEVBRUosU0FBVUMsR0FZUixTQUFTQyxFQUFPdkMsR0FDZCxJQUFJd0MsRUEwQkosT0F4QkFBLEVBQVFGLEVBQWlCdEssS0FBS3lDLEtBQU11RixJQUFVdkYsTUFDeENnRCxNQUFRLENBQ1pMLFNBQVU0QyxFQUFNVyxRQUFRdkQsVUFPMUJvRixFQUFNQyxZQUFhLEVBQ25CRCxFQUFNRSxpQkFBbUIsS0FFcEIxQyxFQUFNMkMsZ0JBQ1RILEVBQU1JLFNBQVc1QyxFQUFNVyxRQUFRbUIsUUFBTyxTQUFVMUUsR0FDMUNvRixFQUFNQyxXQUNSRCxFQUFNL0IsU0FBUyxDQUNickQsU0FBVUEsSUFHWm9GLEVBQU1FLGlCQUFtQnRGLE1BS3hCb0YsRUF0Q1QsWUFBZUQsRUFBUUQsR0FFdkJDLEVBQU9NLGlCQUFtQixTQUEwQmxJLEdBQ2xELE1BQU8sQ0FDTDRDLEtBQU0sSUFDTnVGLElBQUssSUFDTEMsT0FBUSxHQUNSQyxRQUFzQixNQUFickksSUFrQ2IsSUFBSXNJLEVBQVNWLEVBQU85SSxVQThCcEIsT0E1QkF3SixFQUFPQyxrQkFBb0IsV0FDekJ6SSxLQUFLZ0ksWUFBYSxFQUVkaEksS0FBS2lJLGtCQUNQakksS0FBS2dHLFNBQVMsQ0FDWnJELFNBQVUzQyxLQUFLaUksb0JBS3JCTyxFQUFPRSxxQkFBdUIsV0FDeEIxSSxLQUFLbUksVUFBVW5JLEtBQUttSSxZQUcxQkssRUFBT0csT0FBUyxXQUNkLE9BQU8sSUFBTTVELGNBQWMsRUFBUTZELFNBQVUsQ0FDM0N2SyxNQUFPLENBQ0w2SCxRQUFTbEcsS0FBS3VGLE1BQU1XLFFBQ3BCdkQsU0FBVTNDLEtBQUtnRCxNQUFNTCxTQUNyQmtHLE1BQU9mLEVBQU9NLGlCQUFpQnBJLEtBQUtnRCxNQUFNTCxTQUFTekMsVUFDbkRnSSxjQUFlbEksS0FBS3VGLE1BQU0yQyxnQkFFM0IsSUFBTW5ELGNBQWMwQyxFQUFlbUIsU0FBVSxDQUM5Q0UsU0FBVTlJLEtBQUt1RixNQUFNdUQsVUFBWSxLQUNqQ3pLLE1BQU8yQixLQUFLdUYsTUFBTVcsWUFJZjRCLEVBeEVULENBeUVFLElBQU1pQixXQWtCUixJQUFJLEVBRUosU0FBVWxCLEdBR1IsU0FBU21CLElBR1AsSUFGQSxJQUFJakIsRUFFS3RELEVBQU83RSxVQUFVQyxPQUFRNkUsRUFBTyxJQUFJMUMsTUFBTXlDLEdBQU9FLEVBQU8sRUFBR0EsRUFBT0YsRUFBTUUsSUFDL0VELEVBQUtDLEdBQVEvRSxVQUFVK0UsR0FLekIsT0FGQW9ELEVBQVFGLEVBQWlCdEssS0FBS3dDLE1BQU04SCxFQUFrQixDQUFDN0gsTUFBTW1CLE9BQU91RCxLQUFVMUUsTUFDeEVrRyxRQUFVWixFQUFvQnlDLEVBQU14QyxPQUNuQ3dDLEVBWVQsT0F2QkEsWUFBZWlCLEVBQWNuQixHQWNoQm1CLEVBQWFoSyxVQUVuQjJKLE9BQVMsV0FDZCxPQUFPLElBQU01RCxjQUFjLEVBQVEsQ0FDakNtQixRQUFTbEcsS0FBS2tHLFFBQ2Q0QyxTQUFVOUksS0FBS3VGLE1BQU11RCxZQUlsQkUsRUF4QlQsQ0F5QkUsSUFBTUQsV0FnQlIsSUFBSSxFQUVKLFNBQVVsQixHQUdSLFNBQVNvQixJQUNQLE9BQU9wQixFQUFpQjlILE1BQU1DLEtBQU1KLFlBQWNJLEtBSHBELFlBQWVpSixFQUFXcEIsR0FNMUIsSUFBSVcsRUFBU1MsRUFBVWpLLFVBa0J2QixPQWhCQXdKLEVBQU9DLGtCQUFvQixXQUNyQnpJLEtBQUt1RixNQUFNMkQsU0FBU2xKLEtBQUt1RixNQUFNMkQsUUFBUTNMLEtBQUt5QyxLQUFNQSxPQUd4RHdJLEVBQU9XLG1CQUFxQixTQUE0QkMsR0FDbERwSixLQUFLdUYsTUFBTThELFVBQVVySixLQUFLdUYsTUFBTThELFNBQVM5TCxLQUFLeUMsS0FBTUEsS0FBTW9KLElBR2hFWixFQUFPRSxxQkFBdUIsV0FDeEIxSSxLQUFLdUYsTUFBTStELFdBQVd0SixLQUFLdUYsTUFBTStELFVBQVUvTCxLQUFLeUMsS0FBTUEsT0FHNUR3SSxFQUFPRyxPQUFTLFdBQ2QsT0FBTyxNQUdGTSxFQXpCVCxDQTBCRSxJQUFNRixXQU1SLFNBQVNRLEVBQU9DLEdBQ2QsSUFBSWhILEVBQVVnSCxFQUFLaEgsUUFDZmlILEVBQVlELEVBQUtFLEtBQ2pCQSxPQUFxQixJQUFkRCxHQUE4QkEsRUFDekMsT0FBTyxJQUFNMUUsY0FBYyxFQUFRNEUsU0FBVSxNQUFNLFNBQVVqQyxHQUUzRCxHQURDQSxHQUF1SCxHQUFVLElBQzdIZ0MsR0FBUWhDLEVBQVFRLGNBQWUsT0FBTyxLQUMzQyxJQUFJMEIsRUFBU2xDLEVBQVF4QixRQUFRa0IsTUFDN0IsT0FBTyxJQUFNckMsY0FBYyxFQUFXLENBQ3BDbUUsUUFBUyxTQUFpQlcsR0FDeEJBLEVBQUtDLFFBQVVGLEVBQU9wSCxJQUV4QjZHLFNBQVUsU0FBa0JRLEVBQU1ULEdBQzVCQSxFQUFVNUcsVUFBWUEsSUFDeEJxSCxFQUFLQyxVQUNMRCxFQUFLQyxRQUFVRixFQUFPcEgsS0FHMUI4RyxVQUFXLFNBQW1CTyxHQUM1QkEsRUFBS0MsV0FFUHRILFFBQVNBLE9BYWYsSUFBSXVILEVBQVEsR0FFUkMsRUFBYSxFQWtCakIsU0FBU0MsRUFBYW5ILEVBQU13RixHQVMxQixZQVJhLElBQVR4RixJQUNGQSxFQUFPLFVBR00sSUFBWHdGLElBQ0ZBLEVBQVMsSUFHSyxNQUFUeEYsRUFBZUEsRUF6QnhCLFNBQXFCQSxHQUNuQixHQUFJaUgsRUFBTWpILEdBQU8sT0FBT2lILEVBQU1qSCxHQUM5QixJQUFJb0gsRUFBWSxJQUFhQyxRQUFRckgsR0FPckMsT0FMSWtILEVBUFcsTUFRYkQsRUFBTWpILEdBQVFvSCxFQUNkRixLQUdLRSxFQWdCc0JFLENBQVl0SCxFQUFac0gsQ0FBa0I5QixFQUFRLENBQ3JEK0IsUUFBUSxJQVFaLFNBQVNDLEVBQVNkLEdBQ2hCLElBQUllLEVBQWdCZixFQUFLZSxjQUNyQjlKLEVBQUsrSSxFQUFLL0ksR0FDVitKLEVBQVloQixFQUFLbEYsS0FDakJBLE9BQXFCLElBQWRrRyxHQUErQkEsRUFDMUMsT0FBTyxJQUFNekYsY0FBYyxFQUFRNEUsU0FBVSxNQUFNLFNBQVVqQyxHQUMxREEsR0FBeUgsR0FBVSxHQUNwSSxJQUFJeEIsRUFBVXdCLEVBQVF4QixRQUNsQmdDLEVBQWdCUixFQUFRUSxjQUN4QjBCLEVBQVN0RixFQUFPNEIsRUFBUTVCLEtBQU80QixFQUFRYyxRQUN2Q3JFLEVBQVdJLEVBQWV3SCxFQUE4QixpQkFBUDlKLEVBQWtCd0osRUFBYXhKLEVBQUk4SixFQUFjakMsUUFBVTdJLEVBQVMsR0FBSWdCLEVBQUksQ0FDL0hQLFNBQVUrSixFQUFheEosRUFBR1AsU0FBVXFLLEVBQWNqQyxVQUMvQzdILEdBR0wsT0FBSXlILEdBQ0YwQixFQUFPakgsR0FDQSxNQUdGLElBQU1vQyxjQUFjLEVBQVcsQ0FDcENtRSxRQUFTLFdBQ1BVLEVBQU9qSCxJQUVUMEcsU0FBVSxTQUFrQlEsRUFBTVQsR0FDaEMsSUZ0TW1CdEgsRUFBR0MsRUVzTWxCMEksRUFBZTFILEVBQWVxRyxFQUFVM0ksSUZ0TXpCcUIsRUV3TUkySSxFRnhNRDFJLEVFd01ldEMsRUFBUyxHQUFJa0QsRUFBVSxDQUMxRGhFLElBQUs4TCxFQUFhOUwsTUZ4TW5CbUQsRUFBRTVCLFdBQWE2QixFQUFFN0IsVUFBWTRCLEVBQUVjLFNBQVdiLEVBQUVhLFFBQVVkLEVBQUVlLE9BQVNkLEVBQUVjLE1BQVFmLEVBQUVuRCxNQUFRb0QsRUFBRXBELEtBQU8sRUFBV21ELEVBQUVrQixNQUFPakIsRUFBRWlCLFFFME1uSDRHLEVBQU9qSCxJQUdYbEMsR0FBSUEsT0FhVixJQUFJaUssRUFBVSxHQUVWQyxFQUFlLEVBeUJuQixTQUFTQyxFQUFVMUssRUFBVTJLLFFBQ1gsSUFBWkEsSUFDRkEsRUFBVSxLQUdXLGlCQUFaQSxHQUF3QjdJLE1BQU1DLFFBQVE0SSxNQUMvQ0EsRUFBVSxDQUNSL0gsS0FBTStILElBSVYsSUFBSUMsRUFBV0QsRUFDWC9ILEVBQU9nSSxFQUFTaEksS0FDaEJpSSxFQUFpQkQsRUFBU0UsTUFDMUJBLE9BQTJCLElBQW5CRCxHQUFvQ0EsRUFDNUNFLEVBQWtCSCxFQUFTSSxPQUMzQkEsT0FBNkIsSUFBcEJELEdBQXFDQSxFQUM5Q0UsRUFBcUJMLEVBQVNNLFVBQzlCQSxPQUFtQyxJQUF2QkQsR0FBd0NBLEVBRXhELE1BRFksR0FBR2hLLE9BQU8yQixHQUNUdUksUUFBTyxTQUFVQyxFQUFTeEksR0FDckMsSUFBS0EsR0FBaUIsS0FBVEEsRUFBYSxPQUFPLEtBQ2pDLEdBQUl3SSxFQUFTLE9BQU9BLEVBRXBCLElBQUlDLEVBL0NSLFNBQXVCekksRUFBTStILEdBQzNCLElBQUlXLEVBQVcsR0FBS1gsRUFBUVksSUFBTVosRUFBUUssT0FBU0wsRUFBUU8sVUFDdkRNLEVBQVloQixFQUFRYyxLQUFjZCxFQUFRYyxHQUFZLElBQzFELEdBQUlFLEVBQVU1SSxHQUFPLE9BQU80SSxFQUFVNUksR0FDdEMsSUFBSVIsRUFBTyxHQUVQZCxFQUFTLENBQ1htSyxPQUZXLElBQWE3SSxFQUFNUixFQUFNdUksR0FHcEN2SSxLQUFNQSxHQVFSLE9BTElxSSxFQWRhLE1BZWZlLEVBQVU1SSxHQUFRdEIsRUFDbEJtSixLQUdLbkosRUErQmNvSyxDQUFjOUksRUFBTSxDQUNyQzJJLElBQUtULEVBQ0xFLE9BQVFBLEVBQ1JFLFVBQVdBLElBRVRPLEVBQVNKLEVBQWFJLE9BQ3RCckosRUFBT2lKLEVBQWFqSixLQUVwQnVHLEVBQVE4QyxFQUFPRSxLQUFLM0wsR0FDeEIsSUFBSzJJLEVBQU8sT0FBTyxLQUNuQixJQUFJUixFQUFNUSxFQUFNLEdBQ1ppRCxFQUFTakQsRUFBTS9CLE1BQU0sR0FDckJ5QixFQUFVckksSUFBYW1JLEVBQzNCLE9BQUkyQyxJQUFVekMsRUFBZ0IsS0FDdkIsQ0FDTHpGLEtBQU1BLEVBRU51RixJQUFjLE1BQVR2RixHQUF3QixLQUFSdUYsRUFBYSxJQUFNQSxFQUV4Q0UsUUFBU0EsRUFFVEQsT0FBUWhHLEVBQUsrSSxRQUFPLFNBQVVVLEVBQU1wTixFQUFLMkIsR0FFdkMsT0FEQXlMLEVBQUtwTixFQUFJaEIsTUFBUW1PLEVBQU94TCxHQUNqQnlMLElBQ04sT0FFSixNQWlCTCxJQUFJLEVBRUosU0FBVWxFLEdBR1IsU0FBU21FLElBQ1AsT0FBT25FLEVBQWlCOUgsTUFBTUMsS0FBTUosWUFBY0ksS0FtQ3BELE9BdENBLFlBQWVnTSxFQUFPbkUsR0FNVG1FLEVBQU1oTixVQUVaMkosT0FBUyxXQUNkLElBQUlaLEVBQVEvSCxLQUVaLE9BQU8sSUFBTStFLGNBQWMsRUFBUTRFLFNBQVUsTUFBTSxTQUFVc0MsR0FDMURBLEdBQXdILEdBQVUsR0FDbkksSUFBSXRKLEVBQVdvRixFQUFNeEMsTUFBTTVDLFVBQVlzSixFQUFVdEosU0FJN0M0QyxFQUFROUYsRUFBUyxHQUFJd00sRUFBVyxDQUNsQ3RKLFNBQVVBLEVBQ1ZrRyxNQUxVZCxFQUFNeEMsTUFBTWdGLGNBQWdCeEMsRUFBTXhDLE1BQU1nRixjQUNsRHhDLEVBQU14QyxNQUFNekMsS0FBTzhILEVBQVVqSSxFQUFTekMsU0FBVTZILEVBQU14QyxPQUFTMEcsRUFBVXBELFFBT3ZFcUQsRUFBY25FLEVBQU14QyxNQUNwQnVELEVBQVdvRCxFQUFZcEQsU0FDdkJxRCxFQUFZRCxFQUFZQyxVQUN4QnhELEVBQVN1RCxFQUFZdkQsT0FPekIsT0FKSTNHLE1BQU1DLFFBQVE2RyxJQUFpQyxJQUFwQkEsRUFBU2pKLFNBQ3RDaUosRUFBVyxNQUdOLElBQU0vRCxjQUFjLEVBQVE2RCxTQUFVLENBQzNDdkssTUFBT2tILEdBQ05BLEVBQU1zRCxNQUFRQyxFQUErQixtQkFBYkEsRUFBdUhBLEVBQVN2RCxHQUFTdUQsRUFBV3FELEVBQVksSUFBTXBILGNBQWNvSCxFQUFXNUcsR0FBU29ELEVBQVNBLEVBQU9wRCxHQUFTLEtBQTJCLG1CQUFidUQsRUFBdUhBLEVBQVN2RCxHQUFTLFVBSXhaeUcsRUF2Q1QsQ0F3Q0UsSUFBTWpELFdBOEJSLFNBQVMsRUFBZ0JqRyxHQUN2QixNQUEwQixNQUFuQkEsRUFBSzNDLE9BQU8sR0FBYTJDLEVBQU8sSUFBTUEsRUFVL0MsU0FBUyxFQUFjc0osRUFBVXpKLEdBQy9CLElBQUt5SixFQUFVLE9BQU96SixFQUN0QixJQUFJMEosRUFBTyxFQUFnQkQsR0FDM0IsT0FBd0MsSUFBcEN6SixFQUFTekMsU0FBU2lELFFBQVFrSixHQUFvQjFKLEVBQzNDbEQsRUFBUyxHQUFJa0QsRUFBVSxDQUM1QnpDLFNBQVV5QyxFQUFTekMsU0FBU3dCLE9BQU8ySyxFQUFLeE0sVUFJNUMsU0FBU3lNLEVBQVUzSixHQUNqQixNQUEyQixpQkFBYkEsRUFBd0JBLEVBQVdELEVBQVdDLEdBRzlELFNBQVM0SixFQUFjQyxHQUNyQixPQUFPLFdBQ3dHLEdBQVUsSUFJM0gsU0FBU0MsS0FTVCxJQUFJLEVBRUosU0FBVTVFLEdBR1IsU0FBUzZFLElBR1AsSUFGQSxJQUFJM0UsRUFFS3RELEVBQU83RSxVQUFVQyxPQUFRNkUsRUFBTyxJQUFJMUMsTUFBTXlDLEdBQU9FLEVBQU8sRUFBR0EsRUFBT0YsRUFBTUUsSUFDL0VELEVBQUtDLEdBQVEvRSxVQUFVK0UsR0FxQnpCLE9BbEJBb0QsRUFBUUYsRUFBaUJ0SyxLQUFLd0MsTUFBTThILEVBQWtCLENBQUM3SCxNQUFNbUIsT0FBT3VELEtBQVUxRSxNQUV4RTJNLFdBQWEsU0FBVWhLLEdBQzNCLE9BQU9vRixFQUFNNkUsV0FBV2pLLEVBQVUsU0FHcENvRixFQUFNOEUsY0FBZ0IsU0FBVWxLLEdBQzlCLE9BQU9vRixFQUFNNkUsV0FBV2pLLEVBQVUsWUFHcENvRixFQUFNK0UsYUFBZSxXQUNuQixPQUFPTCxHQUdUMUUsRUFBTWdGLFlBQWMsV0FDbEIsT0FBT04sR0FHRjFFLEVBM0JULFlBQWUyRSxFQUFjN0UsR0E4QjdCLElBQUlXLEVBQVNrRSxFQUFhMU4sVUEyQzFCLE9BekNBd0osRUFBT29FLFdBQWEsU0FBb0JqSyxFQUFVb0IsR0FDaEQsSUFBSW1JLEVBQWNsTSxLQUFLdUYsTUFDbkJ5SCxFQUF1QmQsRUFBWUUsU0FDbkNBLE9BQW9DLElBQXpCWSxFQUFrQyxHQUFLQSxFQUNsREMsRUFBc0JmLEVBQVl4RSxRQUNsQ0EsT0FBa0MsSUFBeEJ1RixFQUFpQyxHQUFLQSxFQUNwRHZGLEVBQVEzRCxPQUFTQSxFQUNqQjJELEVBQVEvRSxTQTdFWixTQUFxQnlKLEVBQVV6SixHQUM3QixPQUFLeUosRUFDRTNNLEVBQVMsR0FBSWtELEVBQVUsQ0FDNUJ6QyxTQUFVLEVBQWdCa00sR0FBWXpKLEVBQVN6QyxXQUYzQnlDLEVBNEVEdUssQ0FBWWQsRUFBVXJKLEVBQWVKLElBQ3hEK0UsRUFBUVcsSUFBTWlFLEVBQVU1RSxFQUFRL0UsV0FHbEM2RixFQUFPRyxPQUFTLFdBQ2QsSUFBSXdFLEVBQWVuTixLQUFLdUYsTUFDcEI2SCxFQUF3QkQsRUFBYWYsU0FDckNBLE9BQXFDLElBQTFCZ0IsRUFBbUMsR0FBS0EsRUFDbkRDLEVBQXVCRixFQUFhekYsUUFDcENBLE9BQW1DLElBQXpCMkYsRUFBa0MsR0FBS0EsRUFDakRDLEVBQXdCSCxFQUFheEssU0FDckNBLE9BQXFDLElBQTFCMkssRUFBbUMsSUFBTUEsRUFDcERDLEVBQU9qRyxFQUE4QjZGLEVBQWMsQ0FBQyxXQUFZLFVBQVcsYUFFM0VqSCxFQUFVLENBQ1pPLFdBQVksU0FBb0IzRCxHQUM5QixPQUFPLEVBQWdCc0osRUFBV0UsRUFBVXhKLEtBRTlDaUIsT0FBUSxNQUNScEIsU0FBVSxFQUFjeUosRUFBVXJKLEVBQWVKLElBQ2pEMkIsS0FBTXRFLEtBQUsyTSxXQUNYM0YsUUFBU2hILEtBQUs2TSxjQUNkbkcsR0FBSTZGLElBQ0p0RixPQUFRc0YsSUFDUnJGLFVBQVdxRixJQUNYbEYsT0FBUXJILEtBQUs4TSxhQUNiMUYsTUFBT3BILEtBQUsrTSxhQUVkLE9BQU8sSUFBTWhJLGNBQWMsRUFBUXRGLEVBQVMsR0FBSThOLEVBQU0sQ0FDcERySCxRQUFTQSxFQUNUZ0MsY0FBZVIsTUFJWmdGLEVBMUVULENBMkVFLElBQU0zRCxXQWtCUixJQUFJLEVBRUosU0FBVWxCLEdBR1IsU0FBUzJGLElBQ1AsT0FBTzNGLEVBQWlCOUgsTUFBTUMsS0FBTUosWUFBY0ksS0FnQ3BELE9BbkNBLFlBQWV3TixFQUFRM0YsR0FNVjJGLEVBQU94TyxVQUViMkosT0FBUyxXQUNkLElBQUlaLEVBQVEvSCxLQUVaLE9BQU8sSUFBTStFLGNBQWMsRUFBUTRFLFNBQVUsTUFBTSxTQUFVakMsR0FDMURBLEdBQXVILEdBQVUsR0FDbEksSUFDSStGLEVBQVM1RSxFQURUbEcsRUFBV29GLEVBQU14QyxNQUFNNUMsVUFBWStFLEVBQVEvRSxTQWUvQyxPQVRBLElBQU0rSyxTQUFTOUksUUFBUW1ELEVBQU14QyxNQUFNdUQsVUFBVSxTQUFVNkUsR0FDckQsR0FBYSxNQUFUOUUsR0FBaUIsSUFBTStFLGVBQWVELEdBQVEsQ0FDaERGLEVBQVVFLEVBQ1YsSUFBSTdLLEVBQU82SyxFQUFNcEksTUFBTXpDLE1BQVE2SyxFQUFNcEksTUFBTTdFLEtBQzNDbUksRUFBUS9GLEVBQU84SCxFQUFVakksRUFBU3pDLFNBQVVULEVBQVMsR0FBSWtPLEVBQU1wSSxNQUFPLENBQ3BFekMsS0FBTUEsS0FDRjRFLEVBQVFtQixVQUdYQSxFQUFRLElBQU1nRixhQUFhSixFQUFTLENBQ3pDOUssU0FBVUEsRUFDVjRILGNBQWUxQixJQUNaLFNBSUYyRSxFQXBDVCxDQXFDRSxJQUFNekUsV0FrQlIsU0FBUytFLEVBQVcvRSxHQUNsQixJQUFJcEIsRUFBYyxlQUFpQm9CLEVBQVVwQixhQUFlb0IsRUFBVXBMLE1BQVEsSUFFMUVvUSxFQUFJLFNBQVd4SSxHQUNqQixJQUFJeUksRUFBc0J6SSxFQUFNeUksb0JBQzVCQyxFQUFpQjNHLEVBQThCL0IsRUFBTyxDQUFDLHdCQUUzRCxPQUFPLElBQU1SLGNBQWMsRUFBUTRFLFNBQVUsTUFBTSxTQUFVakMsR0FFM0QsT0FEQ0EsR0FBc0ksR0FBVSxHQUMxSSxJQUFNM0MsY0FBY2dFLEVBQVd0SixFQUFTLEdBQUl3TyxFQUFnQnZHLEVBQVMsQ0FDMUV3RyxJQUFLRixTQWNYLE9BVEFELEVBQUVwRyxZQUFjQSxFQUNoQm9HLEVBQUVJLGlCQUFtQnBGLEVBUWQsSUFBYWdGLEVBQUdoRixHQUd6QixJQUFJcUYsRUFBYSxJQUFNQSxXQUN2QixTQUFTQyxJQUtQLE9BQU9ELEVBQVczRyxHQUVwQixTQUFTNkcsSUFLUCxPQUFPRixFQUFXLEdBQVN6TCxTQUU3QixTQUFTNEwsSUFLUCxJQUFJMUYsRUFBUXVGLEVBQVcsR0FBU3ZGLE1BQ2hDLE9BQU9BLEVBQVFBLEVBQU1QLE9BQVMsR0FFaEMsU0FBU2tHLEVBQWMxTCxHQUtyQixJQUFJSCxFQUFXMkwsSUFDWHpGLEVBQVF1RixFQUFXLEdBQVN2RixNQUNoQyxPQUFPL0YsRUFBTzhILEVBQVVqSSxFQUFTekMsU0FBVTRDLEdBQVErRixJLDhCQ3Z1QnJELHVEQU1JNEYsRUFBdUMsb0JBQWZDLFdBQTZCQSxXQUErQixvQkFBWDdKLE9BQXlCQSxZQUEyQixJQUFYOEosRUFBeUJBLEVBQVMsR0FleEosU0FBU0MsRUFBbUJ2USxHQUMxQixJQUFJd1EsRUFBVyxHQUNmLE1BQU8sQ0FDTEMsR0FBSSxTQUFZQyxHQUNkRixFQUFTdkssS0FBS3lLLElBRWhCQyxJQUFLLFNBQWFELEdBQ2hCRixFQUFXQSxFQUFTdEssUUFBTyxTQUFVMEssR0FDbkMsT0FBT0EsSUFBTUYsTUFHakI5USxJQUFLLFdBQ0gsT0FBT0ksR0FFVDZRLElBQUssU0FBYUMsRUFBVUMsR0FDMUIvUSxFQUFROFEsRUFDUk4sRUFBU2pLLFNBQVEsU0FBVW1LLEdBQ3pCLE9BQU9BLEVBQVExUSxFQUFPK1EsUUF1STlCLElBQUk5TyxFQUFRLElBQU0rTyxlQTdIbEIsU0FBNEJDLEVBQWNDLEdBQ3hDLElBQUlDLEVBQXVCQyxFQXhDdkI5USxFQTBDQStRLEVBQWMsNEJBekNYakIsRUFESDlQLEVBQU0seUJBQ29COFAsRUFBZTlQLElBQVEsR0FBSyxHQXlDSSxNQUUxRGlLLEVBQXdCLFNBQVUrRyxHQUdwQyxTQUFTL0csSUFDUCxJQUFJYixFQUlKLE9BRkFBLEVBQVE0SCxFQUFXNVAsTUFBTUMsS0FBTUosWUFBY0ksTUFDdkM0UCxRQUFVaEIsRUFBbUI3RyxFQUFNeEMsTUFBTWxILE9BQ3hDMEosRUFQVCxZQUFlYSxFQUFVK0csR0FVekIsSUFBSW5ILEVBQVNJLEVBQVM1SixVQW9DdEIsT0FsQ0F3SixFQUFPcUgsZ0JBQWtCLFdBQ3ZCLElBQUlyRyxFQUVKLE9BQU9BLEVBQU8sSUFBU2tHLEdBQWUxUCxLQUFLNFAsUUFBU3BHLEdBR3REaEIsRUFBT3NILDBCQUE0QixTQUFtQ0MsR0FDcEUsR0FBSS9QLEtBQUt1RixNQUFNbEgsUUFBVTBSLEVBQVUxUixNQUFPLENBQ3hDLElBRUkrUSxFQUZBWSxFQUFXaFEsS0FBS3VGLE1BQU1sSCxNQUN0QjhRLEVBQVdZLEVBQVUxUixRQTlEZjRSLEVBaUVHRCxNQWpFQUUsRUFpRVVmLEdBL0RkLElBQU5jLEdBQVcsRUFBSUEsR0FBTSxFQUFJQyxFQUV6QkQsR0FBTUEsR0FBS0MsR0FBTUEsR0E4RGxCZCxFQUFjLEdBRWRBLEVBQThDLG1CQUF6QkcsRUFBc0NBLEVBQXFCUyxFQUFVYixHQTVFeEUsV0FvRkUsS0FGcEJDLEdBQWUsSUFHYnBQLEtBQUs0UCxRQUFRVixJQUFJYSxFQUFVMVIsTUFBTytRLElBN0U5QyxJQUFrQmEsRUFBR0MsR0FtRmpCMUgsRUFBT0csT0FBUyxXQUNkLE9BQU8zSSxLQUFLdUYsTUFBTXVELFVBR2JGLEVBL0NtQixDQWdEMUIsYUFFRkEsRUFBU3VILG9CQUFxQlgsRUFBd0IsSUFBMEJFLEdBQWUsSUFBVTVRLE9BQU9zUixXQUFZWixHQUU1SCxJQUFJN0YsRUFBd0IsU0FBVTBHLEdBR3BDLFNBQVMxRyxJQUNQLElBQUkyRyxFQWlCSixPQWZBQSxFQUFTRCxFQUFZdFEsTUFBTUMsS0FBTUosWUFBY0ksTUFDeENnRCxNQUFRLENBQ2IzRSxNQUFPaVMsRUFBT0MsWUFHaEJELEVBQU9qSCxTQUFXLFNBQVU4RixFQUFVQyxHQUdDLEtBRkksRUFBdEJrQixFQUFPRSxjQUVOcEIsSUFDbEJrQixFQUFPdEssU0FBUyxDQUNkM0gsTUFBT2lTLEVBQU9DLGNBS2JELEVBcEJULFlBQWUzRyxFQUFVMEcsR0F1QnpCLElBQUlJLEVBQVU5RyxFQUFTM0ssVUFrQ3ZCLE9BaENBeVIsRUFBUVgsMEJBQTRCLFNBQW1DQyxHQUNyRSxJQUFJUyxFQUFlVCxFQUFVUyxhQUM3QnhRLEtBQUt3USxhQUFlQSxRQWhJRSxXQWdJNEVBLEdBR3BHQyxFQUFRaEksa0JBQW9CLFdBQ3RCekksS0FBSzBILFFBQVFnSSxJQUNmMVAsS0FBSzBILFFBQVFnSSxHQUFhWixHQUFHOU8sS0FBS3FKLFVBR3BDLElBQUltSCxFQUFleFEsS0FBS3VGLE1BQU1pTCxhQUM5QnhRLEtBQUt3USxhQUFlQSxRQXpJRSxXQXlJNEVBLEdBR3BHQyxFQUFRL0gscUJBQXVCLFdBQ3pCMUksS0FBSzBILFFBQVFnSSxJQUNmMVAsS0FBSzBILFFBQVFnSSxHQUFhVixJQUFJaFAsS0FBS3FKLFdBSXZDb0gsRUFBUUYsU0FBVyxXQUNqQixPQUFJdlEsS0FBSzBILFFBQVFnSSxHQUNSMVAsS0FBSzBILFFBQVFnSSxHQUFhelIsTUFFMUJxUixHQUlYbUIsRUFBUTlILE9BQVMsV0FDZixPQXBIYUcsRUFvSEk5SSxLQUFLdUYsTUFBTXVELFNBbkh6QjlHLE1BQU1DLFFBQVE2RyxHQUFZQSxFQUFTLEdBQUtBLEdBbUhMOUksS0FBS2dELE1BQU0zRSxPQXBIdkQsSUFBbUJ5SyxHQXVIUmEsRUExRG1CLENBMkQxQixhQUdGLE9BREFBLEVBQVMrRyxlQUFnQmpCLEVBQXdCLElBQTBCQyxHQUFlLElBQVU1USxPQUFRMlEsR0FDckcsQ0FDTDdHLFNBQVVBLEVBQ1ZlLFNBQVVBLElBTUMsUSxrQ0MvS2YsSUFBSWdILEVBQVUsRUFBUSxJQUt0QnhULEVBQU9ELFFBQVUwVCxFQUNqQnpULEVBQU9ELFFBQVEyVCxNQUFRQSxFQUN2QjFULEVBQU9ELFFBQVFpTixRQXNHZixTQUFrQjJHLEVBQUtqRyxHQUNyQixPQUFPa0csRUFBaUJGLEVBQU1DLEVBQUtqRyxHQUFVQSxJQXRHL0MxTixFQUFPRCxRQUFRNlQsaUJBQW1CQSxFQUNsQzVULEVBQU9ELFFBQVE4VCxlQUFpQkEsRUFPaEMsSUFBSUMsRUFBYyxJQUFJQyxPQUFPLENBRzNCLFVBT0EsMEdBQ0F6UCxLQUFLLEtBQU0sS0FTYixTQUFTb1AsRUFBT0MsRUFBS2pHLEdBUW5CLElBUEEsSUFLSXNHLEVBTEFDLEVBQVMsR0FDVHpTLEVBQU0sRUFDTjJCLEVBQVEsRUFDUndDLEVBQU8sR0FDUHVPLEVBQW1CeEcsR0FBV0EsRUFBUXlHLFdBQWEsSUFHZixPQUFoQ0gsRUFBTUYsRUFBWXBGLEtBQUtpRixLQUFlLENBQzVDLElBQUl0VCxFQUFJMlQsRUFBSSxHQUNSSSxFQUFVSixFQUFJLEdBQ2RLLEVBQVNMLEVBQUk3USxNQUtqQixHQUpBd0MsR0FBUWdPLEVBQUloSyxNQUFNeEcsRUFBT2tSLEdBQ3pCbFIsRUFBUWtSLEVBQVNoVSxFQUFFcUMsT0FHZjBSLEVBQ0Z6TyxHQUFReU8sRUFBUSxPQURsQixDQUtBLElBQUlFLEVBQU9YLEVBQUl4USxHQUNYb1IsRUFBU1AsRUFBSSxHQUNieFQsRUFBT3dULEVBQUksR0FDWFEsRUFBVVIsRUFBSSxHQUNkUyxFQUFRVCxFQUFJLEdBQ1pVLEVBQVdWLEVBQUksR0FDZlcsRUFBV1gsRUFBSSxHQUdmck8sSUFDRnNPLEVBQU85TSxLQUFLeEIsR0FDWkEsRUFBTyxJQUdULElBQUlpUCxFQUFvQixNQUFWTCxHQUEwQixNQUFSRCxHQUFnQkEsSUFBU0MsRUFDckRNLEVBQXNCLE1BQWJILEdBQWlDLE1BQWJBLEVBQzdCSSxFQUF3QixNQUFiSixHQUFpQyxNQUFiQSxFQUMvQlAsRUFBWUgsRUFBSSxJQUFNRSxFQUN0QmEsRUFBVVAsR0FBV0MsRUFFekJSLEVBQU85TSxLQUFLLENBQ1YzRyxLQUFNQSxHQUFRZ0IsSUFDZCtTLE9BQVFBLEdBQVUsR0FDbEJKLFVBQVdBLEVBQ1hXLFNBQVVBLEVBQ1ZELE9BQVFBLEVBQ1JELFFBQVNBLEVBQ1RELFdBQVlBLEVBQ1pJLFFBQVNBLEVBQVVDLEVBQVlELEdBQVlKLEVBQVcsS0FBTyxLQUFPTSxFQUFhZCxHQUFhLFNBY2xHLE9BVEloUixFQUFRd1EsRUFBSWpSLFNBQ2RpRCxHQUFRZ08sRUFBSXBQLE9BQU9wQixJQUlqQndDLEdBQ0ZzTyxFQUFPOU0sS0FBS3hCLEdBR1BzTyxFQW9CVCxTQUFTaUIsRUFBMEJ2QixHQUNqQyxPQUFPd0IsVUFBVXhCLEdBQUs5SixRQUFRLFdBQVcsU0FBVXZKLEdBQ2pELE1BQU8sSUFBTUEsRUFBRThVLFdBQVcsR0FBR2pNLFNBQVMsSUFBSWtNLGlCQW1COUMsU0FBU3pCLEVBQWtCSyxFQUFRdkcsR0FLakMsSUFIQSxJQUFJNEgsRUFBVSxJQUFJelEsTUFBTW9QLEVBQU92UixRQUd0QnpDLEVBQUksRUFBR0EsRUFBSWdVLEVBQU92UixPQUFRekMsSUFDUixpQkFBZGdVLEVBQU9oVSxLQUNoQnFWLEVBQVFyVixHQUFLLElBQUk4VCxPQUFPLE9BQVNFLEVBQU9oVSxHQUFHOFUsUUFBVSxLQUFNUSxFQUFNN0gsS0FJckUsT0FBTyxTQUFVbEosRUFBS2dSLEdBTXBCLElBTEEsSUFBSTdQLEVBQU8sR0FDUDhQLEVBQU9qUixHQUFPLEdBRWRrUixHQURVRixHQUFRLElBQ0R0SSxPQUFTZ0ksRUFBMkJTLG1CQUVoRDFWLEVBQUksRUFBR0EsRUFBSWdVLEVBQU92UixPQUFRekMsSUFBSyxDQUN0QyxJQUFJMlYsRUFBUTNCLEVBQU9oVSxHQUVuQixHQUFxQixpQkFBVjJWLEVBQVgsQ0FNQSxJQUNJQyxFQURBM1UsRUFBUXVVLEVBQUtHLEVBQU1wVixNQUd2QixHQUFhLE1BQVRVLEVBQWUsQ0FDakIsR0FBSTBVLEVBQU1kLFNBQVUsQ0FFZGMsRUFBTWhCLFVBQ1JqUCxHQUFRaVEsRUFBTXJCLFFBR2hCLFNBRUEsTUFBTSxJQUFJdUIsVUFBVSxhQUFlRixFQUFNcFYsS0FBTyxtQkFJcEQsR0FBSWdULEVBQVF0UyxHQUFaLENBQ0UsSUFBSzBVLEVBQU1mLE9BQ1QsTUFBTSxJQUFJaUIsVUFBVSxhQUFlRixFQUFNcFYsS0FBTyxrQ0FBb0N1VixLQUFLQyxVQUFVOVUsR0FBUyxLQUc5RyxHQUFxQixJQUFqQkEsRUFBTXdCLE9BQWMsQ0FDdEIsR0FBSWtULEVBQU1kLFNBQ1IsU0FFQSxNQUFNLElBQUlnQixVQUFVLGFBQWVGLEVBQU1wVixLQUFPLHFCQUlwRCxJQUFLLElBQUl5VixFQUFJLEVBQUdBLEVBQUkvVSxFQUFNd0IsT0FBUXVULElBQUssQ0FHckMsR0FGQUosRUFBVUgsRUFBT3hVLEVBQU0rVSxLQUVsQlgsRUFBUXJWLEdBQUdpVyxLQUFLTCxHQUNuQixNQUFNLElBQUlDLFVBQVUsaUJBQW1CRixFQUFNcFYsS0FBTyxlQUFpQm9WLEVBQU1iLFFBQVUsb0JBQXNCZ0IsS0FBS0MsVUFBVUgsR0FBVyxLQUd2SWxRLElBQWUsSUFBTnNRLEVBQVVMLEVBQU1yQixPQUFTcUIsRUFBTXpCLFdBQWEwQixPQXBCekQsQ0E0QkEsR0FGQUEsRUFBVUQsRUFBTWpCLFNBNUViUSxVQTRFdUNqVSxHQTVFeEIySSxRQUFRLFNBQVMsU0FBVXZKLEdBQy9DLE1BQU8sSUFBTUEsRUFBRThVLFdBQVcsR0FBR2pNLFNBQVMsSUFBSWtNLGlCQTJFV0ssRUFBT3hVLElBRXJEb1UsRUFBUXJWLEdBQUdpVyxLQUFLTCxHQUNuQixNQUFNLElBQUlDLFVBQVUsYUFBZUYsRUFBTXBWLEtBQU8sZUFBaUJvVixFQUFNYixRQUFVLG9CQUFzQmMsRUFBVSxLQUduSGxRLEdBQVFpUSxFQUFNckIsT0FBU3NCLFFBckRyQmxRLEdBQVFpUSxFQXdEWixPQUFPalEsR0FVWCxTQUFTc1AsRUFBY3RCLEdBQ3JCLE9BQU9BLEVBQUk5SixRQUFRLDZCQUE4QixRQVNuRCxTQUFTbUwsRUFBYVAsR0FDcEIsT0FBT0EsRUFBTTVLLFFBQVEsZ0JBQWlCLFFBVXhDLFNBQVNzTSxFQUFZQyxFQUFJalIsR0FFdkIsT0FEQWlSLEVBQUdqUixLQUFPQSxFQUNIaVIsRUFTVCxTQUFTYixFQUFPN0gsR0FDZCxPQUFPQSxHQUFXQSxFQUFRTyxVQUFZLEdBQUssSUF3RTdDLFNBQVM0RixFQUFnQkksRUFBUTlPLEVBQU11SSxHQUNoQzhGLEVBQVFyTyxLQUNYdUksRUFBa0N2SSxHQUFRdUksRUFDMUN2SSxFQUFPLElBVVQsSUFMQSxJQUFJNEksR0FGSkwsRUFBVUEsR0FBVyxJQUVBSyxPQUNqQk8sR0FBc0IsSUFBaEJaLEVBQVFZLElBQ2QrSCxFQUFRLEdBR0hwVyxFQUFJLEVBQUdBLEVBQUlnVSxFQUFPdlIsT0FBUXpDLElBQUssQ0FDdEMsSUFBSTJWLEVBQVEzQixFQUFPaFUsR0FFbkIsR0FBcUIsaUJBQVYyVixFQUNUUyxHQUFTcEIsRUFBYVcsT0FDakIsQ0FDTCxJQUFJckIsRUFBU1UsRUFBYVcsRUFBTXJCLFFBQzVCQyxFQUFVLE1BQVFvQixFQUFNYixRQUFVLElBRXRDNVAsRUFBS2dDLEtBQUt5TyxHQUVOQSxFQUFNZixTQUNSTCxHQUFXLE1BQVFELEVBQVNDLEVBQVUsTUFheEM2QixHQU5JN0IsRUFKQW9CLEVBQU1kLFNBQ0hjLEVBQU1oQixRQUdDTCxFQUFTLElBQU1DLEVBQVUsS0FGekIsTUFBUUQsRUFBUyxJQUFNQyxFQUFVLE1BS25DRCxFQUFTLElBQU1DLEVBQVUsS0FPekMsSUFBSUwsRUFBWWMsRUFBYXZILEVBQVF5RyxXQUFhLEtBQzlDbUMsRUFBb0JELEVBQU0xTSxPQUFPd0ssRUFBVXpSLFVBQVl5UixFQWtCM0QsT0FaS3BHLElBQ0hzSSxHQUFTQyxFQUFvQkQsRUFBTTFNLE1BQU0sR0FBSXdLLEVBQVV6UixRQUFVMlQsR0FBUyxNQUFRbEMsRUFBWSxXQUk5RmtDLEdBREUvSCxFQUNPLElBSUFQLEdBQVV1SSxFQUFvQixHQUFLLE1BQVFuQyxFQUFZLE1BRzNEZ0MsRUFBVyxJQUFJcEMsT0FBTyxJQUFNc0MsRUFBT2QsRUFBTTdILElBQVd2SSxHQWU3RCxTQUFTc08sRUFBYzlOLEVBQU1SLEVBQU11SSxHQVFqQyxPQVBLOEYsRUFBUXJPLEtBQ1h1SSxFQUFrQ3ZJLEdBQVF1SSxFQUMxQ3ZJLEVBQU8sSUFHVHVJLEVBQVVBLEdBQVcsR0FFakIvSCxhQUFnQm9PLE9BbEp0QixTQUF5QnBPLEVBQU1SLEdBRTdCLElBQUlvUixFQUFTNVEsRUFBS2hELE9BQU8rSSxNQUFNLGFBRS9CLEdBQUk2SyxFQUNGLElBQUssSUFBSXRXLEVBQUksRUFBR0EsRUFBSXNXLEVBQU83VCxPQUFRekMsSUFDakNrRixFQUFLZ0MsS0FBSyxDQUNSM0csS0FBTVAsRUFDTnNVLE9BQVEsS0FDUkosVUFBVyxLQUNYVyxVQUFVLEVBQ1ZELFFBQVEsRUFDUkQsU0FBUyxFQUNURCxVQUFVLEVBQ1ZJLFFBQVMsT0FLZixPQUFPb0IsRUFBV3hRLEVBQU1SLEdBZ0lmcVIsQ0FBZTdRLEVBQTRCLEdBR2hENk4sRUFBUTdOLEdBeEhkLFNBQXdCQSxFQUFNUixFQUFNdUksR0FHbEMsSUFGQSxJQUFJK0ksRUFBUSxHQUVIeFcsRUFBSSxFQUFHQSxFQUFJMEYsRUFBS2pELE9BQVF6QyxJQUMvQndXLEVBQU10UCxLQUFLc00sRUFBYTlOLEVBQUsxRixHQUFJa0YsRUFBTXVJLEdBQVMvSyxRQUtsRCxPQUFPd1QsRUFGTSxJQUFJcEMsT0FBTyxNQUFRMEMsRUFBTW5TLEtBQUssS0FBTyxJQUFLaVIsRUFBTTdILElBRW5DdkksR0FnSGpCdVIsQ0FBb0MsRUFBOEIsRUFBUWhKLEdBckdyRixTQUF5Qi9ILEVBQU1SLEVBQU11SSxHQUNuQyxPQUFPbUcsRUFBZUgsRUFBTS9OLEVBQU0rSCxHQUFVdkksRUFBTXVJLEdBdUczQ2lKLENBQXFDLEVBQThCLEVBQVFqSixLLDhCQ3JhbEYxTixFQUFPRCxRQUFVLEVBQVEsSyw2QkNEM0IsSUFBSTZXLEVBQVUsRUFBUSxHQU1sQkMsRUFBZ0IsQ0FDbEI3RCxtQkFBbUIsRUFDbkI4RCxhQUFhLEVBQ2J2RCxjQUFjLEVBQ2R3RCxjQUFjLEVBQ2R2TSxhQUFhLEVBQ2J3TSxpQkFBaUIsRUFDakJDLDBCQUEwQixFQUMxQkMsMEJBQTBCLEVBQzFCQyxRQUFRLEVBQ1JDLFdBQVcsRUFDWEMsTUFBTSxHQUVKQyxFQUFnQixDQUNsQjlXLE1BQU0sRUFDTmtDLFFBQVEsRUFDUmIsV0FBVyxFQUNYMFYsUUFBUSxFQUNSQyxRQUFRLEVBQ1IvVSxXQUFXLEVBQ1hnVixPQUFPLEdBU0xDLEVBQWUsQ0FDakIsVUFBWSxFQUNaQyxTQUFTLEVBQ1RaLGNBQWMsRUFDZHZNLGFBQWEsRUFDYjRNLFdBQVcsRUFDWEMsTUFBTSxHQUVKTyxFQUFlLEdBSW5CLFNBQVNDLEVBQVc3SSxHQUVsQixPQUFJNEgsRUFBUWtCLE9BQU85SSxHQUNWMEksRUFJRkUsRUFBYTVJLEVBQW9CLFdBQU02SCxFQVZoRGUsRUFBYWhCLEVBQVFtQixZQWhCSyxDQUN4QixVQUFZLEVBQ1p2TSxRQUFRLEVBQ1J1TCxjQUFjLEVBQ2R2TSxhQUFhLEVBQ2I0TSxXQUFXLEdBWWJRLEVBQWFoQixFQUFRb0IsTUFBUU4sRUFZN0IsSUFBSTlXLEVBQWlCRCxPQUFPQyxlQUN4QnFYLEVBQXNCdFgsT0FBT3NYLG9CQUM3QkMsRUFBd0J2WCxPQUFPdVgsc0JBQy9CQyxFQUEyQnhYLE9BQU93WCx5QkFDbENDLEVBQWlCelgsT0FBT3lYLGVBQ3hCQyxFQUFrQjFYLE9BQU9rQixVQXNDN0I3QixFQUFPRCxRQXJDUCxTQUFTdVksRUFBcUJDLEVBQWlCQyxFQUFpQkMsR0FDOUQsR0FBK0IsaUJBQXBCRCxFQUE4QixDQUV2QyxHQUFJSCxFQUFpQixDQUNuQixJQUFJSyxFQUFxQk4sRUFBZUksR0FFcENFLEdBQXNCQSxJQUF1QkwsR0FDL0NDLEVBQXFCQyxFQUFpQkcsRUFBb0JELEdBSTlELElBQUl0VCxFQUFPOFMsRUFBb0JPLEdBRTNCTixJQUNGL1MsRUFBT0EsRUFBS25CLE9BQU9rVSxFQUFzQk0sS0FNM0MsSUFIQSxJQUFJRyxFQUFnQmQsRUFBV1UsR0FDM0JLLEVBQWdCZixFQUFXVyxHQUV0QnZZLEVBQUksRUFBR0EsRUFBSWtGLEVBQUt6QyxTQUFVekMsRUFBRyxDQUNwQyxJQUFJdUIsRUFBTTJELEVBQUtsRixHQUVmLEtBQUtxWCxFQUFjOVYsSUFBVWlYLEdBQWFBLEVBQVVqWCxJQUFXb1gsR0FBaUJBLEVBQWNwWCxJQUFXbVgsR0FBaUJBLEVBQWNuWCxJQUFPLENBQzdJLElBQUlxWCxFQUFhVixFQUF5QkssRUFBaUJoWCxHQUUzRCxJQUVFWixFQUFlMlgsRUFBaUIvVyxFQUFLcVgsR0FDckMsTUFBT3pTLE9BS2YsT0FBT21TLEksa3pEQ2pHVCxJQUFJTyxFQUFPQyxFQUFRLEdBQWdCRCxLQUluQ0UsR0FBUSxJQUFJQyxNQUFPQyxXQUVuQkMsSUFEVSxJQUFJRixNQUFPRyxhQUNmLElBQ05DLEVBQU0sR0FDTkMsRUFBTyxHQUNQQyxFQUFPLENBQ04sQ0FBQ0MsR0FBSSxTQUFVQyxJQUFLLE9BQ3BCLENBQUNELEdBQUksU0FBVUMsSUFBSyxPQUNwQixDQUFDRCxHQUFJLFVBQVdDLElBQUssUUFDckIsQ0FBQ0QsR0FBSSxZQUFhQyxJQUFLLE9BQ3ZCLENBQUNELEdBQUksV0FBWUMsSUFBSyxTQUN0QixDQUFDRCxHQUFJLFNBQVVDLElBQUssT0FDcEIsQ0FBQ0QsR0FBSSxXQUFZQyxJQUFLLFFBR0ZDLEUsOEJBWW5CLFdBQVl0UixHQUFPLDJCQUNqQixjQUFNQSxJQURXLGVBVUwsU0FBQ2hDLEdBQU0sTUFDc0MsRUFBS2dDLE1BQXREeUIsRUFEVyxFQUNYQSxRQUFTdkcsRUFERSxFQUNGQSxHQUFJcVcsRUFERixFQUNFQSxNQUFPQyxFQURULEVBQ1NBLGFBQWNDLEVBRHZCLEVBQ3VCQSxXQUNwQzlRLEVBQVUsRUFBS3dCLFFBQVF1UCxPQUU3QkYsRUFBYXhULEVBQUc5QyxHQUNaOEMsRUFBRTJULG1CQUlOM1QsRUFBRTRULGlCQUVGLEVBQUtDLFFBQVVDLFlBQVcsV0FDcEJyUSxFQUNGZCxFQUFRYyxRQUFRdkcsR0FFaEJ5RixFQUFRNUIsS0FBSzdELEdBRWZ1VyxFQUFXelQsRUFBRzlDLEtBQ2JxVyxPQTFCSCxFQUFLTSxRQUFVLEtBRkUsRSx5REFLYnBYLEtBQUtvWCxTQUNQRSxhQUFhdFgsS0FBS29YLFcsK0JBMEJwQixJQUFNN1IsRUFBUXpILE9BQU80QixPQUFPLEdBQUlNLEtBQUt1RixPQUlyQyxjQUhPQSxFQUFNdVIsYUFDTnZSLEVBQU13UixvQkFDTnhSLEVBQU15UixXQUVYLGtCQUFDZixFQUFELGlCQUFVMVEsRUFBVixDQUFpQmdTLFFBQVN2WCxLQUFLd1gsY0FBL0IsYyxHQWpEaUNDLElBQU0xTyxXLEVBQXhCOE4sRSxZQUNBLENBQ2pCQyxNQXBCWSxhQW9CWVksT0FDeEJYLGFBckJZLGFBcUJZWSxLQUN4QlgsV0F0QlksYUFzQllXLE8sRUFKUGQsRSxlQU1HLENBQ3BCQyxNQUFjLEVBQ2RDLGFBQWMsYUFDZEMsV0FBYyxlLEVBVEdILEUsZUFXR1osRUFBS3ZGLGMsSUEyQ3ZCa0gsRSw4QkFDTCxXQUFZclMsR0FBTSx3QkFDakIsY0FBTUEsSUFDRHZDLE1BQVEsQ0FDWjZVLE1BQU8sSUFFUixFQUFLQyxhQUFlLEVBQUtBLGFBQWFsWixLQUFsQixNQUNwQixFQUFLbVosV0FBYSxFQUFLQSxXQUFXblosS0FBaEIsTUFORCxFLCtDQVNqQixJQUFJb1osRUFBUyw2REFBK0RoWSxLQUFLZ0QsTUFBTTZVLE1BQVEsZ0VBQzNGSSxFQUFVLElBQUlDLGVBQ2xCRCxFQUFRRSxLQUFLLE1BQU9ILEdBQVEsR0FDNUJDLEVBQVFHLE9BQVMsV0FDaEIzQixFQUFPdkQsS0FBS3JDLE1BQU1vSCxFQUFRSSxVQUFVQyxRQUFRLEdBQUdDLGtCQUMvQ2pDLEVBQU1wRCxLQUFLckMsTUFBTW9ILEVBQVFJLFVBQVVDLFFBQVEsR0FBR0UsU0FBUzdWLFNBQVMyVCxJQUNoRUUsRUFBTXRELEtBQUtyQyxNQUFNb0gsRUFBUUksVUFBVUMsUUFBUSxHQUFHRSxTQUFTN1YsU0FBUzhWLEtBRWpFUixFQUFRUyxTLG1DQUdJQyxHQUNaM1ksS0FBS2dHLFNBQVMsQ0FDYjZSLE1BQU9jLEVBQU1oWixPQUFPdEIsVSwrQkFJckIsT0FDQyx5QkFBS3NZLEdBQUcsZUFDUCw2QkFDQywyQkFDQ0EsR0FBRyxlQUNIaUMsWUFBWSxhQUNadmEsTUFBTzJCLEtBQUtnRCxNQUFNNlUsTUFDakJnQixTQUFVN1ksS0FBSzhYLGVBQ2pCLDRCQUFRbkIsR0FBRyxnQkFBZ0JtQyxVQUFVLE1BQU12QixRQUFTdlgsS0FBSytYLFlBQ3hELGtCQUFDbEIsRUFBRCxDQUFXcFcsR0FBRyxlQUFlcVcsTUFBTyxJQUFLZ0MsVUFBVSxlLEdBcENoQ3JCLElBQU0xTyxXQTRDekJnUSxFLDhCQUNMLFdBQVl4VCxHQUFPLHdCQUNsQixjQUFNQSxJQUNEdkMsTUFBUSxDQUNaZ1csS0FBTSxHQUNOQyxLQUFNLGFBQ05DLFlBQWEsR0FDYkMsV0FBWSxHQUNaQyxNQUFPLEdBQ1BDLFVBQVUsSUFBSWpELE1BQU9DLFdBQWEsTUFBTyxJQUFJRCxNQUFPRyxhQUFlLEdBQUssS0FBTSxJQUFJSCxNQUFPRyxjQUFlLElBQUlILE1BQU9HLGVBRXBILEVBQUsrQyxXQUFhLEVBQUtBLFdBQVcxYSxLQUFoQixNQVZBLEUsc0RBYUMsV0FDbkJvQixLQUFLdVosV0FBYUMsYUFDZCxrQkFBTSxFQUFLeFQsVUFBUyxTQUFBaEQsR0FBSyxNQUFLLENBQ2hDcVcsVUFBVSxJQUFJakQsTUFBT0MsV0FBYSxNQUFPLElBQUlELE1BQU9HLGFBQWUsR0FBSyxLQUFNLElBQUlILE1BQU9HLGNBQWUsSUFBSUgsTUFBT0csb0JBRWpILEtBR0osSUFBSTBCLEVBQVUsSUFBSUMsZUFDZHVCLEVBQU0sdURBQXlEbkQsRUFBTSxRQUFVRSxFQUFNLGlGQUN6RnlCLEVBQVFFLEtBQUssTUFBT3NCLEdBQUssR0FDekJ4QixFQUFRRyxPQUFTLFdBQ2hCLElBQUlzQixFQUFjeEcsS0FBS3JDLE1BQU1vSCxFQUFRSSxVQUNyQyxFQUFLclMsVUFBUyxTQUFBaEQsR0FBSyxNQUFLLENBQ3ZCb1csTUFBT00sRUFBWU4sTUFDbkJKLEtBQU1VLEVBQVlDLFFBQVFDLFFBQVEsR0FBR1osS0FDckNFLFlBQWFoRyxLQUFLQyxVQUFVaE8sS0FBSzBVLE1BQU1ILEVBQVlDLFFBQVFHLE9BQzNEWCxXQUFZekMsR0FBTXZSLEtBQUswVSxPQUFPM0csS0FBS0MsVUFBVXVHLEVBQVlDLFFBQVFJLElBQU0sTUFBUyxPQUFTLEdBQUssR0FBR3BELFFBR25Hc0IsRUFBUVMsUyw2Q0FJTnNCLGNBQWNoYSxLQUFLdVosYyxpQ0FHWGhVLEdBQ0QsS0FBVEEsRUFDQXZGLEtBQUtnRyxVQUFTLFNBQUFoRCxHQUFLLE1BQUssQ0FDdkJpVyxLQUFNLGlCQUVQalosS0FBS2dHLFVBQVMsU0FBQWhELEdBQUssTUFBSyxDQUN2QmlXLEtBQU0sZ0IsK0JBSUMsV0FDUixPQUNDLDBCQUFNZ0IsTUFBTyxDQUNYQyxnQkFBa0IvRCxHQUFTLElBQUtBLEVBQVEsRUF6SzVCLG9DQUNDLHNDQTJLZCx5QkFBS1EsR0FBRyxVQUNQLGtCQUFDVixFQUFELENBQU94VixHQUFJLENBQUNQLFNBQVUsUUFBU2lhLE1BQU0sQ0FBQ2YsTUFBTyxJQUFLTixVQUFVLE9BQTVELGtCQUNBLGtCQUFDN0MsRUFBRCxDQUFNeFYsR0FBRyxJQUFJcVksVUFBVSxPQUF2QixlQUNBLGtCQUFDN0MsRUFBRCxDQUFPeFYsR0FBSSxDQUFDUCxTQUFVLFFBQVNpYSxNQUFNLENBQUNmLE1BQU8sSUFBS04sVUFBVSxPQUE1RCxtQkFFRCx5QkFDQ25DLEdBQUcsWUFDSHNELE1BQU8sQ0FBQ0csTUFBT3BhLEtBQUtnRCxNQUFNcVgsU0FBVyxZQUFjLFlBQ25ELDZCQUFTMUQsR0FBRyxhQUNYLDRCQUFLRixHQUNMLHlCQUFLRSxHQUFHLGNBQ1AseUJBQ0NBLEdBQUcsY0FDSHNELE1BQU8sQ0FBQ0ssTUFBTyxPQUFRQyxPQUFRLFFBQy9CQyxJQUFLLG9DQUFzQyxHQUF0QyxPQUF5Q3hhLEtBQUtnRCxNQUFNZ1csTUFBUSxZQUNsRSx5QkFBS3JDLEdBQUcsZUFBa0MsY0FBbkIzVyxLQUFLZ0QsTUFBTWlXLEtBQXVCalosS0FBS2dELE1BQU1rVyxZQUFjL1QsS0FBS3NWLE1BQU1DLEVBQU8xYSxLQUFLZ0QsTUFBTWtXLFlBQWEsU0FBNUgsS0FDQSx5QkFBS3ZDLEdBQUcsY0FDUCw0QkFDQ3NELE1BQU8sQ0FBQ1UsV0FBK0IsY0FBbkIzYSxLQUFLZ0QsTUFBTWlXLEtBQXVCLE9BQVMsT0FDL0RILFVBQVUsY0FDVnZCLFFBQVMsa0JBQU0sRUFBSytCLFdBQVcsT0FIaEMsTUFJQSw0QkFDQ1csTUFBTyxDQUFDVSxXQUErQixXQUFuQjNhLEtBQUtnRCxNQUFNaVcsS0FBb0IsT0FBUyxPQUM1REgsVUFBVSxjQUNWdkIsUUFBUyxrQkFBTSxFQUFLK0IsV0FBVyxPQUhoQyxTQVNGN0IsSUFBTS9KLFNBQVNuSCxJQUNkdkcsS0FBS3VGLE1BQU11RCxVQUFVLFNBQUE2RSxHQUFLLE9BQzFCOEosSUFBTTVKLGFBQWFGLEVBQU8sQ0FBQ3VMLFlBQWEsRUFBS2xXLE1BQU1rVyxZQUFhRSxNQUFPLEVBQUtwVyxNQUFNb1csTUFBT0gsS0FBTSxFQUFLalcsTUFBTWlXLGdCLEdBekZ2RnhCLElBQU0xTyxXQWlHaEMsU0FBUzJSLEVBQU83QyxFQUFPckQsR0FDdEIsT0FBUUEsR0FDUCxJQUFLLE9BQ0osT0FBd0IsRUFBRSxHQUFqQnFELEVBQVEsSUFFbEIsSUFBSyxXQUNKLE9BQU8xUyxLQUFLc1YsTUFBZSxNQUFSNUMsRUFBaUIsSUFBTSxJQUs3QyxJQUFJK0MsRUFBV25ELElBQU1vRCxZQUFZLHdCQUNoQ0MsZ0JBRGdDLFdBRTdCLE1BQU8sQ0FDUkMsWUFBYSxHQUNWQyxRQUFRLEVBQ1hDLEtBQU0sRUFDTkMsSUFBSyxFQUNMQyxVQUFXLEVBQ1hDLFNBQVUsRUFDVkMsU0FBVSxJQUdaMVMsT0FBUSxTQUFTcEQsR0FBTSxXQUNsQitWLEVBQU90YixLQUFLdUYsTUFBTTZULE1BQ3BCdFMsTUFBTSxFQUFHOUcsS0FBS3VGLE1BQU01QyxTQUFTd1gsTUFBTWYsT0FDbkM3UyxLQUFJLFNBQUFnVixHQUFHLE9BQ1IseUJBQ0N6QyxVQUFVLFVBQ1Z2QixRQUFTLFdBQ1IsRUFBS3ZSLFVBQVMsU0FBQWhELEdBQUssTUFBSyxDQUN2QmdZLFFBQVEsRUFDUkMsS0FBTTlWLEtBQUswVSxNQUFNMEIsRUFBSXpCLEtBQUttQixNQUMxQkMsSUFBSy9WLEtBQUswVSxNQUFNMEIsRUFBSXpCLEtBQUtvQixLQUN6QkMsVUFBWUksRUFBSUMsV0FDaEJKLFNBQVVqVyxLQUFLMFUsTUFBTTBCLEVBQUlFLFdBQ3pCSixTQUFVRSxFQUFJRixlQUdoQix5QkFBSzFFLEdBQUcsbUJBQ1AsMkJBQUlELEdBQU12UixLQUFLMFUsT0FBTzBCLEVBQUl4QixHQUFLLE1BQVMsT0FBUyxHQUFLLEdBQUduRCxLQUN6RCx5QkFDQ0QsR0FBRyxZQUNINkQsSUFBSyxvQ0FBc0NlLEVBQUkzQixRQUFRLEdBQUdaLEtBQU8sYUFFbkUseUJBQ0NyQyxHQUFHLFNBQ0hzRCxNQUFPLENBQ0p5QixVQUFXLE9BQ1huQixPQUFRLEVBQUtoVixNQUFNMlQsYUFBZSxHQUNsQyxFQUFLM1QsTUFBTTJULGFBQWUsSUFBMUIsVUFDMEIsR0FBdEIsSUFBTXFDLEVBQUl6QixLQUFLelUsS0FEbkIsZ0JBRTBCLEdBQXRCLElBQU1rVyxFQUFJekIsS0FBS3pVLEtBRm5CLE1BRFEsVUFJaUIsR0FBckIsR0FBS2tXLEVBQUl6QixLQUFLelUsS0FKVixTQUtaLHlCQUFLc1IsR0FBRyxTQUNQLHlCQUFLQSxHQUFHLFFBQ2EsY0FBbkIsRUFBS3BSLE1BQU0wVCxLQUNYOVQsS0FBS3NWLE1BQU1jLEVBQUl6QixLQUFLelUsS0FDcEJGLEtBQUtzVixNQUFNQyxFQUFPYSxFQUFJekIsS0FBS3pVLElBQUssU0FIbEMsS0FLQSx5QkFBS3NSLEdBQUcsTUFBTXNELE1BQU8sQ0FBQ00sT0FBUSxHQUFGLE9BQXFDLEdBQS9CZ0IsRUFBSXpCLEtBQUt6VSxJQUFNa1csRUFBSXpCLEtBQUsxVSxLQUE5QixTQUM1Qix5QkFBS3VSLEdBQUcsT0FDYSxjQUFuQixFQUFLcFIsTUFBTTBULEtBQ1g5VCxLQUFLc1YsTUFBTWMsRUFBSXpCLEtBQUsxVSxLQUNwQkQsS0FBS3NWLE1BQU1DLEVBQU9hLEVBQUl6QixLQUFLMVUsSUFBSyxTQUhsQyxVQU9ILE9BQ0EsNkJBQ0MseUJBQUt1UixHQUFHLFlBQ04yRSxHQUVGLDZCQUFTM0UsR0FBRyxTQUFTc0QsTUFBTyxDQUFDMEIsV0FBWTNiLEtBQUtnRCxNQUFNZ1ksT0FBUyxVQUFZLFdBQ3hFLHlCQUFLbEMsVUFBVSxjQUNkLDZCQUF5QixjQUFuQjlZLEtBQUt1RixNQUFNMFQsS0FDZGpaLEtBQUtnRCxNQUFNaVksS0FDWDlWLEtBQUtzVixNQUFNQyxFQUFPMWEsS0FBS2dELE1BQU1pWSxLQUFNLFNBRnRDLEtBR0EseUNBRUQseUJBQUtuQyxVQUFVLGNBQ2QsNkJBQXlCLGNBQW5COVksS0FBS3VGLE1BQU0wVCxLQUNkalosS0FBS2dELE1BQU1rWSxJQUNYL1YsS0FBS3NWLE1BQU1DLEVBQU8xYSxLQUFLZ0QsTUFBTWtZLElBQUssU0FGckMsS0FHQSx5Q0FFRCx5QkFBS3BDLFVBQVUsY0FDZCw2QkFBeUIsY0FBbkI5WSxLQUFLdUYsTUFBTTBULEtBQ2RqWixLQUFLZ0QsTUFBTW1ZLFVBQVksTUFDdkJULEVBQU8xYSxLQUFLZ0QsTUFBTW1ZLFVBQVcsWUFBYyxRQUM5Qyw0Q0FFRCx5QkFBS3JDLFVBQVUsY0FDZCw2QkFBeUIsY0FBbkI5WSxLQUFLdUYsTUFBTTBULEtBQ2RqWixLQUFLZ0QsTUFBTW9ZLFNBQ1hqVyxLQUFLc1YsTUFBTUMsRUFBTzFhLEtBQUtnRCxNQUFNb1ksU0FBVSxTQUYxQyxLQUdBLDJDQUVELHlCQUFLdEMsVUFBVSxjQUNkLDZCQUFNOVksS0FBS2dELE1BQU1xWSxTQUFqQixLQUNBLDJDQUdGLHVCQUFHMUUsR0FBRyxjQUFOLGlHQU1HaUYsRUFBTyxrQkFDWCxrQkFBQ0MsV0FBRCxDQUFZM1YsUUFBUzRWLFlBQWExUCxTQUFVMlAsRUFBUUMsSUFBSUMsWUFDdEQsa0JBQUMsUUFBRCxDQUFPblosS0FBSyxlQUFlcUosVUFBV3lMLElBQ3JDLGtCQUFDLFFBQUQsQ0FBTzlVLEtBQUssZUFBZXFKLFVBQVc0TSxHQUNyQyxrQkFBQyxRQUFELENBQU9qVyxLQUFLLFFBQVFxSixVQUFXeU8sT0FLckNzQixTQUFTdlQsT0FBTyxrQkFBQ2lULEVBQUQsTUFBVTlXLFNBQVNxWCxlQUFlLFMsZ0NDN1VsRCxJQU9JQyxFQUNBQyxFQVJBTixFQUFVNWUsRUFBT0QsUUFBVSxHQVUvQixTQUFTb2YsSUFDTCxNQUFNLElBQUk3WixNQUFNLG1DQUVwQixTQUFTOFosSUFDTCxNQUFNLElBQUk5WixNQUFNLHFDQXNCcEIsU0FBUytaLEVBQVdDLEdBQ2hCLEdBQUlMLElBQXFCL0UsV0FFckIsT0FBT0EsV0FBV29GLEVBQUssR0FHM0IsSUFBS0wsSUFBcUJFLElBQXFCRixJQUFxQi9FLFdBRWhFLE9BREErRSxFQUFtQi9FLFdBQ1pBLFdBQVdvRixFQUFLLEdBRTNCLElBRUksT0FBT0wsRUFBaUJLLEVBQUssR0FDL0IsTUFBTWxaLEdBQ0osSUFFSSxPQUFPNlksRUFBaUI3ZSxLQUFLLEtBQU1rZixFQUFLLEdBQzFDLE1BQU1sWixHQUVKLE9BQU82WSxFQUFpQjdlLEtBQUt5QyxLQUFNeWMsRUFBSyxNQXZDbkQsV0FDRyxJQUVRTCxFQURzQixtQkFBZi9FLFdBQ1lBLFdBRUFpRixFQUV6QixNQUFPL1ksR0FDTDZZLEVBQW1CRSxFQUV2QixJQUVRRCxFQUR3QixtQkFBakIvRSxhQUNjQSxhQUVBaUYsRUFFM0IsTUFBT2haLEdBQ0w4WSxFQUFxQkUsR0FqQjdCLEdBd0VBLElBRUlHLEVBRkFDLEVBQVEsR0FDUkMsR0FBVyxFQUVYQyxHQUFjLEVBRWxCLFNBQVNDLElBQ0FGLEdBQWFGLElBR2xCRSxHQUFXLEVBQ1BGLEVBQWE3YyxPQUNiOGMsRUFBUUQsRUFBYXZiLE9BQU93YixHQUU1QkUsR0FBYyxFQUVkRixFQUFNOWMsUUFDTmtkLEtBSVIsU0FBU0EsSUFDTCxJQUFJSCxFQUFKLENBR0EsSUFBSXhGLEVBQVVvRixFQUFXTSxHQUN6QkYsR0FBVyxFQUdYLElBREEsSUFBSUksRUFBTUwsRUFBTTljLE9BQ1ZtZCxHQUFLLENBR1AsSUFGQU4sRUFBZUMsRUFDZkEsRUFBUSxLQUNDRSxFQUFhRyxHQUNkTixHQUNBQSxFQUFhRyxHQUFZSSxNQUdqQ0osR0FBYyxFQUNkRyxFQUFNTCxFQUFNOWMsT0FFaEI2YyxFQUFlLEtBQ2ZFLEdBQVcsRUFuRWYsU0FBeUJNLEdBQ3JCLEdBQUliLElBQXVCL0UsYUFFdkIsT0FBT0EsYUFBYTRGLEdBR3hCLElBQUtiLElBQXVCRSxJQUF3QkYsSUFBdUIvRSxhQUV2RSxPQURBK0UsRUFBcUIvRSxhQUNkQSxhQUFhNEYsR0FFeEIsSUFFV2IsRUFBbUJhLEdBQzVCLE1BQU8zWixHQUNMLElBRUksT0FBTzhZLEVBQW1COWUsS0FBSyxLQUFNMmYsR0FDdkMsTUFBTzNaLEdBR0wsT0FBTzhZLEVBQW1COWUsS0FBS3lDLEtBQU1rZCxLQWdEN0NDLENBQWdCL0YsSUFpQnBCLFNBQVNnRyxFQUFLWCxFQUFLWSxHQUNmcmQsS0FBS3ljLElBQU1BLEVBQ1h6YyxLQUFLcWQsTUFBUUEsRUFZakIsU0FBUzVRLEtBNUJUc1AsRUFBUXVCLFNBQVcsU0FBVWIsR0FDekIsSUFBSS9YLEVBQU8sSUFBSTFDLE1BQU1wQyxVQUFVQyxPQUFTLEdBQ3hDLEdBQUlELFVBQVVDLE9BQVMsRUFDbkIsSUFBSyxJQUFJekMsRUFBSSxFQUFHQSxFQUFJd0MsVUFBVUMsT0FBUXpDLElBQ2xDc0gsRUFBS3RILEVBQUksR0FBS3dDLFVBQVV4QyxHQUdoQ3VmLEVBQU1yWSxLQUFLLElBQUk4WSxFQUFLWCxFQUFLL1gsSUFDSixJQUFqQmlZLEVBQU05YyxRQUFpQitjLEdBQ3ZCSixFQUFXTyxJQVNuQkssRUFBS3BlLFVBQVVpZSxJQUFNLFdBQ2pCamQsS0FBS3ljLElBQUkxYyxNQUFNLEtBQU1DLEtBQUtxZCxRQUU5QnRCLEVBQVF3QixNQUFRLFVBQ2hCeEIsRUFBUXlCLFNBQVUsRUFDbEJ6QixFQUFRQyxJQUFNLEdBQ2RELEVBQVEwQixLQUFPLEdBQ2YxQixFQUFRMkIsUUFBVSxHQUNsQjNCLEVBQVE0QixTQUFXLEdBSW5CNUIsRUFBUWpOLEdBQUtyQyxFQUNic1AsRUFBUTZCLFlBQWNuUixFQUN0QnNQLEVBQVE4QixLQUFPcFIsRUFDZnNQLEVBQVEvTSxJQUFNdkMsRUFDZHNQLEVBQVErQixlQUFpQnJSLEVBQ3pCc1AsRUFBUWdDLG1CQUFxQnRSLEVBQzdCc1AsRUFBUWlDLEtBQU92UixFQUNmc1AsRUFBUWtDLGdCQUFrQnhSLEVBQzFCc1AsRUFBUW1DLG9CQUFzQnpSLEVBRTlCc1AsRUFBUXBZLFVBQVksU0FBVWhHLEdBQVEsTUFBTyxJQUU3Q29lLEVBQVFvQyxRQUFVLFNBQVV4Z0IsR0FDeEIsTUFBTSxJQUFJOEUsTUFBTSxxQ0FHcEJzWixFQUFRcUMsSUFBTSxXQUFjLE1BQU8sS0FDbkNyQyxFQUFRc0MsTUFBUSxTQUFVQyxHQUN0QixNQUFNLElBQUk3YixNQUFNLG1DQUVwQnNaLEVBQVF3QyxNQUFRLFdBQWEsT0FBTyxJOzs7Ozs7OztHQzlLdkIsSUFBSWxoQixFQUFFLEVBQVEsSUFBaUJ3QixFQUFFLG1CQUFvQlYsUUFBUUEsT0FBT3FnQixJQUFJdGYsRUFBRUwsRUFBRVYsT0FBT3FnQixJQUFJLGlCQUFpQixNQUFNQyxFQUFFNWYsRUFBRVYsT0FBT3FnQixJQUFJLGdCQUFnQixNQUFNdGdCLEVBQUVXLEVBQUVWLE9BQU9xZ0IsSUFBSSxrQkFBa0IsTUFBTWxnQixFQUFFTyxFQUFFVixPQUFPcWdCLElBQUkscUJBQXFCLE1BQU1FLEVBQUU3ZixFQUFFVixPQUFPcWdCLElBQUksa0JBQWtCLE1BQU1HLEVBQUU5ZixFQUFFVixPQUFPcWdCLElBQUksa0JBQWtCLE1BQU1JLEVBQUUvZixFQUFFVixPQUFPcWdCLElBQUksaUJBQWlCLE1BQU12TyxFQUFFcFIsRUFBRVYsT0FBT3FnQixJQUFJLHFCQUFxQixNQUFNdE8sRUFBRXJSLEVBQUVWLE9BQU9xZ0IsSUFBSSxrQkFBa0IsTUFBTUssRUFBRWhnQixFQUFFVixPQUFPcWdCLElBQUksY0FBYyxNQUFNTSxFQUFFamdCLEVBQUVWLE9BQU9xZ0IsSUFBSSxjQUN4ZSxNQUFNTyxFQUFFLG1CQUFvQjVnQixRQUFRQSxPQUFPNmdCLFNBQVMsU0FBU2pSLEVBQUVqTSxHQUFHLElBQUksSUFBSUMsRUFBRSx5REFBeURELEVBQUVyRSxFQUFFLEVBQUVBLEVBQUVtQyxVQUFVQyxPQUFPcEMsSUFBSXNFLEdBQUcsV0FBVytRLG1CQUFtQmxULFVBQVVuQyxJQUFJLE1BQU0seUJBQXlCcUUsRUFBRSxXQUFXQyxFQUFFLGlIQUMvUCxJQUFJa2QsRUFBRSxDQUFDQyxVQUFVLFdBQVcsT0FBTSxHQUFJQyxtQkFBbUIsYUFBYUMsb0JBQW9CLGFBQWFDLGdCQUFnQixjQUFjQyxFQUFFLEdBQUcsU0FBU0MsRUFBRXpkLEVBQUVDLEVBQUV0RSxHQUFHdUMsS0FBS3VGLE1BQU16RCxFQUFFOUIsS0FBSzBILFFBQVEzRixFQUFFL0IsS0FBS3dmLEtBQUtGLEVBQUV0ZixLQUFLeWYsUUFBUWhpQixHQUFHd2hCLEVBQ3BOLFNBQVNTLEtBQTZCLFNBQVNDLEVBQUU3ZCxFQUFFQyxFQUFFdEUsR0FBR3VDLEtBQUt1RixNQUFNekQsRUFBRTlCLEtBQUswSCxRQUFRM0YsRUFBRS9CLEtBQUt3ZixLQUFLRixFQUFFdGYsS0FBS3lmLFFBQVFoaUIsR0FBR3doQixFQURzR00sRUFBRXZnQixVQUFVNGdCLGlCQUFpQixHQUFHTCxFQUFFdmdCLFVBQVVnSCxTQUFTLFNBQVNsRSxFQUFFQyxHQUFHLEdBQUcsaUJBQWtCRCxHQUFHLG1CQUFvQkEsR0FBRyxNQUFNQSxFQUFFLE1BQU1XLE1BQU1zTCxFQUFFLEtBQUsvTixLQUFLeWYsUUFBUUosZ0JBQWdCcmYsS0FBSzhCLEVBQUVDLEVBQUUsYUFBYXdkLEVBQUV2Z0IsVUFBVTZnQixZQUFZLFNBQVMvZCxHQUFHOUIsS0FBS3lmLFFBQVFOLG1CQUFtQm5mLEtBQUs4QixFQUFFLGdCQUNuZDRkLEVBQUUxZ0IsVUFBVXVnQixFQUFFdmdCLFVBQXNGLElBQUk4Z0IsRUFBRUgsRUFBRTNnQixVQUFVLElBQUkwZ0IsRUFBRUksRUFBRXZnQixZQUFZb2dCLEVBQUV0aUIsRUFBRXlpQixFQUFFUCxFQUFFdmdCLFdBQVc4Z0IsRUFBRUMsc0JBQXFCLEVBQUcsSUFBSUMsRUFBRSxDQUFDckcsUUFBUSxNQUFNc0csRUFBRW5pQixPQUFPa0IsVUFBVUMsZUFBZWloQixFQUFFLENBQUN2aEIsS0FBSSxFQUFHdVAsS0FBSSxFQUFHaVMsUUFBTyxFQUFHQyxVQUFTLEdBQ2hTLFNBQVNDLEVBQUV2ZSxFQUFFQyxFQUFFdEUsR0FBRyxJQUFJOEYsRUFBRTdGLEVBQUUsR0FBRzRpQixFQUFFLEtBQUsvZixFQUFFLEtBQUssR0FBRyxNQUFNd0IsRUFBRSxJQUFJd0IsVUFBSyxJQUFTeEIsRUFBRW1NLE1BQU0zTixFQUFFd0IsRUFBRW1NLFVBQUssSUFBU25NLEVBQUVwRCxNQUFNMmhCLEVBQUUsR0FBR3ZlLEVBQUVwRCxLQUFLb0QsRUFBRWtlLEVBQUUxaUIsS0FBS3dFLEVBQUV3QixLQUFLMmMsRUFBRWpoQixlQUFlc0UsS0FBSzdGLEVBQUU2RixHQUFHeEIsRUFBRXdCLElBQUksSUFBSWdkLEVBQUUzZ0IsVUFBVUMsT0FBTyxFQUFFLEdBQUcsSUFBSTBnQixFQUFFN2lCLEVBQUVvTCxTQUFTckwsT0FBTyxHQUFHLEVBQUU4aUIsRUFBRSxDQUFDLElBQUksSUFBSXRSLEVBQUVqTixNQUFNdWUsR0FBRy9pQixFQUFFLEVBQUVBLEVBQUUraUIsRUFBRS9pQixJQUFJeVIsRUFBRXpSLEdBQUdvQyxVQUFVcEMsRUFBRSxHQUFHRSxFQUFFb0wsU0FBU21HLEVBQUUsR0FBR25OLEdBQUdBLEVBQUVvUyxhQUFhLElBQUkzUSxLQUFLZ2QsRUFBRXplLEVBQUVvUyxrQkFBZSxJQUFTeFcsRUFBRTZGLEtBQUs3RixFQUFFNkYsR0FBR2dkLEVBQUVoZCxJQUFJLE1BQU0sQ0FBQ2lkLFNBQVN0aEIsRUFBRXNWLEtBQUsxUyxFQUFFbkQsSUFBSTJoQixFQUFFcFMsSUFBSTNOLEVBQUVnRixNQUFNN0gsRUFBRStpQixPQUFPVCxFQUFFckcsU0FDeFUsU0FBUytHLEVBQUU1ZSxHQUFHLE1BQU0saUJBQWtCQSxHQUFHLE9BQU9BLEdBQUdBLEVBQUUwZSxXQUFXdGhCLEVBQTBHLElBQUl5aEIsRUFBRSxPQUFPQyxFQUFFLEdBQUcsU0FBU0MsRUFBRS9lLEVBQUVDLEVBQUV0RSxFQUFFOEYsR0FBRyxHQUFHcWQsRUFBRS9nQixPQUFPLENBQUMsSUFBSW5DLEVBQUVrakIsRUFBRXBnQixNQUE4RCxPQUF4RDlDLEVBQUU4RCxPQUFPTSxFQUFFcEUsRUFBRW9qQixVQUFVL2UsRUFBRXJFLEVBQUVpYSxLQUFLbGEsRUFBRUMsRUFBRWdLLFFBQVFuRSxFQUFFN0YsRUFBRXFqQixNQUFNLEVBQVNyakIsRUFBRSxNQUFNLENBQUM4RCxPQUFPTSxFQUFFZ2YsVUFBVS9lLEVBQUU0VixLQUFLbGEsRUFBRWlLLFFBQVFuRSxFQUFFd2QsTUFBTSxHQUM1YixTQUFTQyxFQUFFbGYsR0FBR0EsRUFBRU4sT0FBTyxLQUFLTSxFQUFFZ2YsVUFBVSxLQUFLaGYsRUFBRTZWLEtBQUssS0FBSzdWLEVBQUU0RixRQUFRLEtBQUs1RixFQUFFaWYsTUFBTSxFQUFFLEdBQUdILEVBQUUvZ0IsUUFBUStnQixFQUFFdGMsS0FBS3hDLEdBRTJGLFNBQVNtZixFQUFFbmYsRUFBRUMsRUFBRXRFLEdBQUcsT0FBTyxNQUFNcUUsRUFBRSxFQURsTyxTQUFTb2YsRUFBRXBmLEVBQUVDLEVBQUV0RSxFQUFFOEYsR0FBRyxJQUFJN0YsU0FBU29FLEVBQUssY0FBY3BFLEdBQUcsWUFBWUEsSUFBRW9FLEVBQUUsTUFBSyxJQUFJd2UsR0FBRSxFQUFHLEdBQUcsT0FBT3hlLEVBQUV3ZSxHQUFFLE9BQVEsT0FBTzVpQixHQUFHLElBQUssU0FBUyxJQUFLLFNBQVM0aUIsR0FBRSxFQUFHLE1BQU0sSUFBSyxTQUFTLE9BQU94ZSxFQUFFMGUsVUFBVSxLQUFLdGhCLEVBQUUsS0FBS3VmLEVBQUU2QixHQUFFLEdBQUksR0FBR0EsRUFBRSxPQUFPN2lCLEVBQUU4RixFQUFFekIsRUFBRSxLQUFLQyxFQUFFLElBQUlvZixFQUFFcmYsRUFBRSxHQUFHQyxHQUFHLEVBQXlCLEdBQXZCdWUsRUFBRSxFQUFFdmUsRUFBRSxLQUFLQSxFQUFFLElBQUlBLEVBQUUsSUFBT0MsTUFBTUMsUUFBUUgsR0FBRyxJQUFJLElBQUl2QixFQUFFLEVBQUVBLEVBQUV1QixFQUFFakMsT0FBT1UsSUFBSSxDQUFRLElBQUlnZ0IsRUFBRXhlLEVBQUVvZixFQUFmempCLEVBQUVvRSxFQUFFdkIsR0FBZUEsR0FBRytmLEdBQUdZLEVBQUV4akIsRUFBRTZpQixFQUFFOWlCLEVBQUU4RixRQUFRLEdBQUcsT0FBT3pCLEdBQUcsaUJBQWtCQSxFQUFFeWUsRUFBRSxLQUFpQ0EsRUFBRSxtQkFBN0JBLEVBQUV4QixHQUFHamQsRUFBRWlkLElBQUlqZCxFQUFFLGVBQXNDeWUsRUFBRSxLQUFNLG1CQUFvQkEsRUFBRSxJQUFJemUsRUFBRXllLEVBQUVoakIsS0FBS3VFLEdBQUd2QixFQUNwZixJQUFJN0MsRUFBRW9FLEVBQUUyUCxRQUFRMlAsTUFBNkJkLEdBQUdZLEVBQTFCeGpCLEVBQUVBLEVBQUVXLE1BQU1raUIsRUFBRXhlLEVBQUVvZixFQUFFempCLEVBQUU2QyxLQUFjOUMsRUFBRThGLFFBQVEsR0FBRyxXQUFXN0YsRUFBRSxNQUFNRCxFQUFFLEdBQUdxRSxFQUFFVyxNQUFNc0wsRUFBRSxHQUFHLG9CQUFvQnRRLEVBQUUscUJBQXFCSyxPQUFPd0UsS0FBS1IsR0FBR0wsS0FBSyxNQUFNLElBQUloRSxFQUFFLEtBQUssT0FBTzZpQixFQUFxQ1ksQ0FBRXBmLEVBQUUsR0FBR0MsRUFBRXRFLEdBQUcsU0FBUzBqQixFQUFFcmYsRUFBRUMsR0FBRyxNQUFNLGlCQUFrQkQsR0FBRyxPQUFPQSxHQUFHLE1BQU1BLEVBQUVuRCxJQUg5SSxTQUFnQm1ELEdBQUcsSUFBSUMsRUFBRSxDQUFDLElBQUksS0FBSyxJQUFJLE1BQU0sTUFBTSxLQUFLLEdBQUdELEdBQUdrRixRQUFRLFNBQVEsU0FBU2xGLEdBQUcsT0FBT0MsRUFBRUQsTUFHK0N1ZixDQUFPdmYsRUFBRW5ELEtBQUtvRCxFQUFFdUUsU0FBUyxJQUFJLFNBQVNnYixFQUFFeGYsRUFBRUMsR0FBR0QsRUFBRTZWLEtBQUtwYSxLQUFLdUUsRUFBRTRGLFFBQVEzRixFQUFFRCxFQUFFaWYsU0FDeFgsU0FBU1EsRUFBR3pmLEVBQUVDLEVBQUV0RSxHQUFHLElBQUk4RixFQUFFekIsRUFBRU4sT0FBTzlELEVBQUVvRSxFQUFFZ2YsVUFBVWhmLEVBQUVBLEVBQUU2VixLQUFLcGEsS0FBS3VFLEVBQUU0RixRQUFRM0YsRUFBRUQsRUFBRWlmLFNBQVMvZSxNQUFNQyxRQUFRSCxHQUFHMGYsRUFBRTFmLEVBQUV5QixFQUFFOUYsR0FBRSxTQUFTcUUsR0FBRyxPQUFPQSxLQUFJLE1BQU1BLElBQUk0ZSxFQUFFNWUsS0FBS0EsRUFKdEosU0FBV0EsRUFBRUMsR0FBRyxNQUFNLENBQUN5ZSxTQUFTdGhCLEVBQUVzVixLQUFLMVMsRUFBRTBTLEtBQUs3VixJQUFJb0QsRUFBRW1NLElBQUlwTSxFQUFFb00sSUFBSTNJLE1BQU16RCxFQUFFeUQsTUFBTWtiLE9BQU8zZSxFQUFFMmUsUUFJbUVnQixDQUFFM2YsRUFBRXBFLElBQUlvRSxFQUFFbkQsS0FBS29ELEdBQUdBLEVBQUVwRCxNQUFNbUQsRUFBRW5ELElBQUksSUFBSSxHQUFHbUQsRUFBRW5ELEtBQUtxSSxRQUFRMlosRUFBRSxPQUFPLEtBQUtsakIsSUFBSThGLEVBQUVlLEtBQUt4QyxJQUFJLFNBQVMwZixFQUFFMWYsRUFBRUMsRUFBRXRFLEVBQUU4RixFQUFFN0YsR0FBRyxJQUFJNGlCLEVBQUUsR0FBRyxNQUFNN2lCLElBQUk2aUIsR0FBRyxHQUFHN2lCLEdBQUd1SixRQUFRMlosRUFBRSxPQUFPLEtBQWtCTSxFQUFFbmYsRUFBRXlmLEVBQWpCeGYsRUFBRThlLEVBQUU5ZSxFQUFFdWUsRUFBRS9jLEVBQUU3RixJQUFhc2pCLEVBQUVqZixHQUFHLElBQUkyZixFQUFFLENBQUMvSCxRQUFRLE1BQU0sU0FBU2dJLElBQUksSUFBSTdmLEVBQUU0ZixFQUFFL0gsUUFBUSxHQUFHLE9BQU83WCxFQUFFLE1BQU1XLE1BQU1zTCxFQUFFLE1BQU0sT0FBT2pNLEVBQ3hhLElBQUk4ZixFQUFHLENBQUNDLHVCQUF1QkgsRUFBRUksd0JBQXdCLENBQUNDLFNBQVMsTUFBTUMsa0JBQWtCaEMsRUFBRWlDLHFCQUFxQixDQUFDdEksU0FBUSxHQUFJamEsT0FBT3JDLEdBQUdILEVBQVF3USxTQUFTLENBQUNuSCxJQUFJLFNBQVN6RSxFQUFFQyxFQUFFdEUsR0FBRyxHQUFHLE1BQU1xRSxFQUFFLE9BQU9BLEVBQUUsSUFBSXlCLEVBQUUsR0FBbUIsT0FBaEJpZSxFQUFFMWYsRUFBRXlCLEVBQUUsS0FBS3hCLEVBQUV0RSxHQUFVOEYsR0FBR3FCLFFBQVEsU0FBUzlDLEVBQUVDLEVBQUV0RSxHQUFHLEdBQUcsTUFBTXFFLEVBQUUsT0FBT0EsRUFBcUJtZixFQUFFbmYsRUFBRXdmLEVBQXZCdmYsRUFBRThlLEVBQUUsS0FBSyxLQUFLOWUsRUFBRXRFLElBQVl1akIsRUFBRWpmLElBQUlnZixNQUFNLFNBQVNqZixHQUFHLE9BQU9tZixFQUFFbmYsR0FBRSxXQUFXLE9BQU8sT0FBTSxPQUFPb2dCLFFBQVEsU0FBU3BnQixHQUFHLElBQUlDLEVBQUUsR0FBcUMsT0FBbEN5ZixFQUFFMWYsRUFBRUMsRUFBRSxNQUFLLFNBQVNELEdBQUcsT0FBT0EsS0FBV0MsR0FBR29nQixLQUFLLFNBQVNyZ0IsR0FBRyxJQUFJNGUsRUFBRTVlLEdBQUcsTUFBTVcsTUFBTXNMLEVBQUUsTUFBTSxPQUFPak0sSUFDOWU1RSxFQUFRNkwsVUFBVXdXLEVBQUVyaUIsRUFBUWtsQixTQUFTbGtCLEVBQUVoQixFQUFRbWxCLFNBQVMzRCxFQUFFeGhCLEVBQVFvbEIsY0FBYzNDLEVBQUV6aUIsRUFBUXFsQixXQUFXamtCLEVBQUVwQixFQUFRc2xCLFNBQVN0UyxFQUFFaFQsRUFBUXVsQixtREFBbURiLEVBQ3JMMWtCLEVBQVEyUSxhQUFhLFNBQVMvTCxFQUFFQyxFQUFFdEUsR0FBRyxHQUFHLE1BQU9xRSxFQUFjLE1BQU1XLE1BQU1zTCxFQUFFLElBQUlqTSxJQUFJLElBQUl5QixFQUFFbEcsRUFBRSxHQUFHeUUsRUFBRXlELE9BQU83SCxFQUFFb0UsRUFBRW5ELElBQUkyaEIsRUFBRXhlLEVBQUVvTSxJQUFJM04sRUFBRXVCLEVBQUUyZSxPQUFPLEdBQUcsTUFBTTFlLEVBQUUsQ0FBb0UsUUFBbkUsSUFBU0EsRUFBRW1NLE1BQU1vUyxFQUFFdmUsRUFBRW1NLElBQUkzTixFQUFFeWYsRUFBRXJHLGNBQVMsSUFBUzVYLEVBQUVwRCxNQUFNakIsRUFBRSxHQUFHcUUsRUFBRXBELEtBQVFtRCxFQUFFMFMsTUFBTTFTLEVBQUUwUyxLQUFLTixhQUFhLElBQUlxTSxFQUFFemUsRUFBRTBTLEtBQUtOLGFBQWEsSUFBSWpGLEtBQUtsTixFQUFFa2UsRUFBRTFpQixLQUFLd0UsRUFBRWtOLEtBQUtpUixFQUFFamhCLGVBQWVnUSxLQUFLMUwsRUFBRTBMLFFBQUcsSUFBU2xOLEVBQUVrTixTQUFJLElBQVNzUixFQUFFQSxFQUFFdFIsR0FBR2xOLEVBQUVrTixJQUFJLElBQUlBLEVBQUVyUCxVQUFVQyxPQUFPLEVBQUUsR0FBRyxJQUFJb1AsRUFBRTFMLEVBQUV1RixTQUFTckwsT0FBTyxHQUFHLEVBQUV3UixFQUFFLENBQUNzUixFQUFFdmUsTUFBTWlOLEdBQUcsSUFBSSxJQUFJelIsRUFBRSxFQUFFQSxFQUFFeVIsRUFBRXpSLElBQUkraUIsRUFBRS9pQixHQUFHb0MsVUFBVXBDLEVBQUUsR0FBRytGLEVBQUV1RixTQUFTeVgsRUFBRSxNQUFNLENBQUNDLFNBQVN0aEIsRUFBRXNWLEtBQUsxUyxFQUFFMFMsS0FDeGY3VixJQUFJakIsRUFBRXdRLElBQUlvUyxFQUFFL2EsTUFBTWhDLEVBQUVrZCxPQUFPbGdCLElBQUlyRCxFQUFRbVMsY0FBYyxTQUFTdk4sRUFBRUMsR0FBOEssWUFBM0ssSUFBU0EsSUFBSUEsRUFBRSxPQUFNRCxFQUFFLENBQUMwZSxTQUFTNUIsRUFBRThELHNCQUFzQjNnQixFQUFFNGdCLGNBQWM3Z0IsRUFBRThnQixlQUFlOWdCLEVBQUUrZ0IsYUFBYSxFQUFFamEsU0FBUyxLQUFLZSxTQUFTLE9BQVFmLFNBQVMsQ0FBQzRYLFNBQVM3QixFQUFFbUUsU0FBU2hoQixHQUFVQSxFQUFFNkgsU0FBUzdILEdBQUc1RSxFQUFRNkgsY0FBY3NiLEVBQUVuakIsRUFBUTZsQixjQUFjLFNBQVNqaEIsR0FBRyxJQUFJQyxFQUFFc2UsRUFBRXpoQixLQUFLLEtBQUtrRCxHQUFZLE9BQVRDLEVBQUV5UyxLQUFLMVMsRUFBU0MsR0FBRzdFLEVBQVE4bEIsVUFBVSxXQUFXLE1BQU0sQ0FBQ3JKLFFBQVEsT0FBT3pjLEVBQVErbEIsV0FBVyxTQUFTbmhCLEdBQUcsTUFBTSxDQUFDMGUsU0FBU3ZRLEVBQUV0SCxPQUFPN0csSUFBSTVFLEVBQVEwUSxlQUFlOFMsRUFDM2V4akIsRUFBUWdtQixLQUFLLFNBQVNwaEIsR0FBRyxNQUFNLENBQUMwZSxTQUFTMUIsRUFBRXFFLE1BQU1yaEIsRUFBRXNoQixTQUFTLEVBQUVDLFFBQVEsT0FBT25tQixFQUFRNk8sS0FBSyxTQUFTakssRUFBRUMsR0FBRyxNQUFNLENBQUN5ZSxTQUFTM0IsRUFBRXJLLEtBQUsxUyxFQUFFZ1QsYUFBUSxJQUFTL1MsRUFBRSxLQUFLQSxJQUFJN0UsRUFBUW9tQixZQUFZLFNBQVN4aEIsRUFBRUMsR0FBRyxPQUFPNGYsSUFBSTJCLFlBQVl4aEIsRUFBRUMsSUFBSTdFLEVBQVFrUixXQUFXLFNBQVN0TSxFQUFFQyxHQUFHLE9BQU80ZixJQUFJdlQsV0FBV3RNLEVBQUVDLElBQUk3RSxFQUFRcW1CLGNBQWMsYUFBYXJtQixFQUFRc21CLFVBQVUsU0FBUzFoQixFQUFFQyxHQUFHLE9BQU80ZixJQUFJNkIsVUFBVTFoQixFQUFFQyxJQUFJN0UsRUFBUXVtQixvQkFBb0IsU0FBUzNoQixFQUFFQyxFQUFFdEUsR0FBRyxPQUFPa2tCLElBQUk4QixvQkFBb0IzaEIsRUFBRUMsRUFBRXRFLElBQ3RjUCxFQUFRd21CLGdCQUFnQixTQUFTNWhCLEVBQUVDLEdBQUcsT0FBTzRmLElBQUkrQixnQkFBZ0I1aEIsRUFBRUMsSUFBSTdFLEVBQVF5bUIsUUFBUSxTQUFTN2hCLEVBQUVDLEdBQUcsT0FBTzRmLElBQUlnQyxRQUFRN2hCLEVBQUVDLElBQUk3RSxFQUFRMG1CLFdBQVcsU0FBUzloQixFQUFFQyxFQUFFdEUsR0FBRyxPQUFPa2tCLElBQUlpQyxXQUFXOWhCLEVBQUVDLEVBQUV0RSxJQUFJUCxFQUFRMm1CLE9BQU8sU0FBUy9oQixHQUFHLE9BQU82ZixJQUFJa0MsT0FBTy9oQixJQUFJNUUsRUFBUTRtQixTQUFTLFNBQVNoaUIsR0FBRyxPQUFPNmYsSUFBSW1DLFNBQVNoaUIsSUFBSTVFLEVBQVF3Z0IsUUFBUSxXOzs7OztFQ2hCclQsSUFBSXJJLEVBQXdCdlgsT0FBT3VYLHNCQUMvQnBXLEVBQWlCbkIsT0FBT2tCLFVBQVVDLGVBQ2xDOGtCLEVBQW1Cam1CLE9BQU9rQixVQUFVZ2xCLHFCQUV4QyxTQUFTQyxFQUFTQyxHQUNqQixHQUFJQSxRQUNILE1BQU0sSUFBSWpSLFVBQVUseURBR3JCLE9BQU9uVixPQUFPb21CLEdBK0NmL21CLEVBQU9ELFFBNUNQLFdBQ0MsSUFDQyxJQUFLWSxPQUFPNEIsT0FDWCxPQUFPLEVBTVIsSUFBSXlrQixFQUFRLElBQUlDLE9BQU8sT0FFdkIsR0FEQUQsRUFBTSxHQUFLLEtBQ2tDLE1BQXpDcm1CLE9BQU9zWCxvQkFBb0IrTyxHQUFPLEdBQ3JDLE9BQU8sRUFLUixJQURBLElBQUlFLEVBQVEsR0FDSGpuQixFQUFJLEVBQUdBLEVBQUksR0FBSUEsSUFDdkJpbkIsRUFBTSxJQUFNRCxPQUFPRSxhQUFhbG5CLElBQU1BLEVBS3ZDLEdBQXdCLGVBSFhVLE9BQU9zWCxvQkFBb0JpUCxHQUFPOWQsS0FBSSxTQUFVMUgsR0FDNUQsT0FBT3dsQixFQUFNeGxCLE1BRUg0QyxLQUFLLElBQ2YsT0FBTyxFQUlSLElBQUk4aUIsRUFBUSxHQUlaLE1BSEEsdUJBQXVCempCLE1BQU0sSUFBSThELFNBQVEsU0FBVTRmLEdBQ2xERCxFQUFNQyxHQUFVQSxLQUdmLHlCQURFMW1CLE9BQU93RSxLQUFLeEUsT0FBTzRCLE9BQU8sR0FBSTZrQixJQUFROWlCLEtBQUssSUFNOUMsTUFBT2dqQixHQUVSLE9BQU8sR0FJUUMsR0FBb0I1bUIsT0FBTzRCLE9BQVMsU0FBVUMsRUFBUUcsR0FLdEUsSUFKQSxJQUFJWSxFQUVBaWtCLEVBREFsa0IsRUFBS3dqQixFQUFTdGtCLEdBR1RSLEVBQUksRUFBR0EsRUFBSVMsVUFBVUMsT0FBUVYsSUFBSyxDQUcxQyxJQUFLLElBQUlSLEtBRlQrQixFQUFPNUMsT0FBTzhCLFVBQVVULElBR25CRixFQUFlMUIsS0FBS21ELEVBQU0vQixLQUM3QjhCLEVBQUc5QixHQUFPK0IsRUFBSy9CLElBSWpCLEdBQUkwVyxFQUF1QixDQUMxQnNQLEVBQVV0UCxFQUFzQjNVLEdBQ2hDLElBQUssSUFBSXRELEVBQUksRUFBR0EsRUFBSXVuQixFQUFROWtCLE9BQVF6QyxJQUMvQjJtQixFQUFpQnhtQixLQUFLbUQsRUFBTWlrQixFQUFRdm5CLE1BQ3ZDcUQsRUFBR2trQixFQUFRdm5CLElBQU1zRCxFQUFLaWtCLEVBQVF2bkIsTUFNbEMsT0FBT3FELEksNkJDL0VSLElBQUlta0IsRUFBdUIsRUFBUSxJQUVuQyxTQUFTQyxLQUNULFNBQVNDLEtBQ1RBLEVBQXVCQyxrQkFBb0JGLEVBRTNDMW5CLEVBQU9ELFFBQVUsV0FDZixTQUFTOG5CLEVBQUt6ZixFQUFPMGYsRUFBVUMsRUFBZXZpQixFQUFVd2lCLEVBQWNDLEdBQ3BFLEdBQUlBLElBQVdSLEVBQWYsQ0FJQSxJQUFJSCxFQUFNLElBQUloaUIsTUFDWixtTEFLRixNQURBZ2lCLEVBQUk5bUIsS0FBTyxzQkFDTDhtQixHQUdSLFNBQVNZLElBQ1AsT0FBT0wsRUFGVEEsRUFBSzVVLFdBQWE0VSxFQU1sQixJQUFJTSxFQUFpQixDQUNuQmpJLE1BQU8ySCxFQUNQTyxLQUFNUCxFQUNOck4sS0FBTXFOLEVBQ050TixPQUFRc04sRUFDUmxtQixPQUFRa21CLEVBQ1JRLE9BQVFSLEVBQ1JTLE9BQVFULEVBRVJVLElBQUtWLEVBQ0xXLFFBQVNOLEVBQ1Q1WCxRQUFTdVgsRUFDVFksWUFBYVosRUFDYmEsV0FBWVIsRUFDWlMsS0FBTWQsRUFDTmUsU0FBVVYsRUFDVlcsTUFBT1gsRUFDUFksVUFBV1osRUFDWGEsTUFBT2IsRUFDUHJhLE1BQU9xYSxFQUVQYyxlQUFnQnJCLEVBQ2hCQyxrQkFBbUJGLEdBS3JCLE9BRkFTLEVBQWVjLFVBQVlkLEVBRXBCQSxJLDZCQ25EVG5vQixFQUFPRCxRQUZvQixnRCxjQ1QzQixJQUFJb2pCLEVBR0pBLEVBQUksV0FDSCxPQUFPdGdCLEtBREosR0FJSixJQUVDc2dCLEVBQUlBLEdBQUssSUFBSStGLFNBQVMsY0FBYixHQUNSLE1BQU85aUIsR0FFYyxpQkFBWHNCLFNBQXFCeWIsRUFBSXpiLFFBT3JDMUgsRUFBT0QsUUFBVW9qQixHLGNDbkJqQm5qQixFQUFPRCxRQUFVOEUsTUFBTUMsU0FBVyxTQUFVcWtCLEdBQzFDLE1BQThDLGtCQUF2Q3hvQixPQUFPa0IsVUFBVXNILFNBQVMvSSxLQUFLK29CLEs7Ozs7Ozs7O0dDUTNCLElBQUl2a0IsRUFBRSxtQkFBb0I1RCxRQUFRQSxPQUFPcWdCLElBQUkvZ0IsRUFBRXNFLEVBQUU1RCxPQUFPcWdCLElBQUksaUJBQWlCLE1BQU05Z0IsRUFBRXFFLEVBQUU1RCxPQUFPcWdCLElBQUksZ0JBQWdCLE1BQU1qYixFQUFFeEIsRUFBRTVELE9BQU9xZ0IsSUFBSSxrQkFBa0IsTUFBTStCLEVBQUV4ZSxFQUFFNUQsT0FBT3FnQixJQUFJLHFCQUFxQixNQUFNOEIsRUFBRXZlLEVBQUU1RCxPQUFPcWdCLElBQUksa0JBQWtCLE1BQU12UCxFQUFFbE4sRUFBRTVELE9BQU9xZ0IsSUFBSSxrQkFBa0IsTUFBTWplLEVBQUV3QixFQUFFNUQsT0FBT3FnQixJQUFJLGlCQUFpQixNQUFNbmhCLEVBQUUwRSxFQUFFNUQsT0FBT3FnQixJQUFJLG9CQUFvQixNQUFNaGhCLEVBQUV1RSxFQUFFNUQsT0FBT3FnQixJQUFJLHlCQUF5QixNQUFNM2YsRUFBRWtELEVBQUU1RCxPQUFPcWdCLElBQUkscUJBQXFCLE1BQU10ZixFQUFFNkMsRUFBRTVELE9BQU9xZ0IsSUFBSSxrQkFBa0IsTUFBTUMsRUFBRTFjLEVBQ3BmNUQsT0FBT3FnQixJQUFJLHVCQUF1QixNQUFNdGdCLEVBQUU2RCxFQUFFNUQsT0FBT3FnQixJQUFJLGNBQWMsTUFBTWxnQixFQUFFeUQsRUFBRTVELE9BQU9xZ0IsSUFBSSxjQUFjLE1BQU1HLEVBQUU1YyxFQUFFNUQsT0FBT3FnQixJQUFJLGVBQWUsTUFBTUksRUFBRTdjLEVBQUU1RCxPQUFPcWdCLElBQUkscUJBQXFCLE1BQU12TyxFQUFFbE8sRUFBRTVELE9BQU9xZ0IsSUFBSSxtQkFBbUIsTUFBTXRPLEVBQUVuTyxFQUFFNUQsT0FBT3FnQixJQUFJLGVBQWUsTUFDbFEsU0FBU0ssRUFBRS9jLEdBQUcsR0FBRyxpQkFBa0JBLEdBQUcsT0FBT0EsRUFBRSxDQUFDLElBQUk0YyxFQUFFNWMsRUFBRTBlLFNBQVMsT0FBTzlCLEdBQUcsS0FBS2poQixFQUFFLE9BQU9xRSxFQUFFQSxFQUFFMFMsTUFBUSxLQUFLblgsRUFBRSxLQUFLRyxFQUFFLEtBQUsrRixFQUFFLEtBQUsrYyxFQUFFLEtBQUtDLEVBQUUsS0FBS3JoQixFQUFFLE9BQU80QyxFQUFFLFFBQVEsT0FBT0EsRUFBRUEsR0FBR0EsRUFBRTBlLFVBQVksS0FBS2pnQixFQUFFLEtBQUsxQixFQUFFLEtBQUtQLEVBQUUsS0FBS0osRUFBRSxLQUFLK1EsRUFBRSxPQUFPbk4sRUFBRSxRQUFRLE9BQU80YyxHQUFHLEtBQUtoaEIsRUFBRSxPQUFPZ2hCLElBQUksU0FBU0ksRUFBRWhkLEdBQUcsT0FBTytjLEVBQUUvYyxLQUFLdEUsRUFBRU4sRUFBUXFwQixVQUFVbHBCLEVBQUVILEVBQVFzcEIsZUFBZWhwQixFQUFFTixFQUFRdXBCLGdCQUFnQmxtQixFQUFFckQsRUFBUXdwQixnQkFBZ0J6WCxFQUFFL1IsRUFBUXlwQixRQUFRbHBCLEVBQUVQLEVBQVFnWSxXQUFXclcsRUFBRTNCLEVBQVFrbEIsU0FBUzdlLEVBQUVyRyxFQUFRMHBCLEtBQUt0b0IsRUFBRXBCLEVBQVFpWSxLQUFLalgsRUFBRWhCLEVBQVEycEIsT0FBT25wQixFQUNoZlIsRUFBUW1sQixTQUFTL0IsRUFBRXBqQixFQUFRcWxCLFdBQVdoQyxFQUFFcmpCLEVBQVFzbEIsU0FBU3RqQixFQUFFaEMsRUFBUTRwQixZQUFZLFNBQVNobEIsR0FBRyxPQUFPZ2QsRUFBRWhkLElBQUkrYyxFQUFFL2MsS0FBS3pFLEdBQUdILEVBQVE2cEIsaUJBQWlCakksRUFBRTVoQixFQUFROHBCLGtCQUFrQixTQUFTbGxCLEdBQUcsT0FBTytjLEVBQUUvYyxLQUFLdkIsR0FBR3JELEVBQVErcEIsa0JBQWtCLFNBQVNubEIsR0FBRyxPQUFPK2MsRUFBRS9jLEtBQUttTixHQUFHL1IsRUFBUWdxQixVQUFVLFNBQVNwbEIsR0FBRyxNQUFNLGlCQUFrQkEsR0FBRyxPQUFPQSxHQUFHQSxFQUFFMGUsV0FBVy9pQixHQUFHUCxFQUFRaXFCLGFBQWEsU0FBU3JsQixHQUFHLE9BQU8rYyxFQUFFL2MsS0FBS2pELEdBQUczQixFQUFRa3FCLFdBQVcsU0FBU3RsQixHQUFHLE9BQU8rYyxFQUFFL2MsS0FBS3lCLEdBQUdyRyxFQUFRbXFCLE9BQU8sU0FBU3ZsQixHQUFHLE9BQU8rYyxFQUFFL2MsS0FBS3hELEdBQ3pkcEIsRUFBUStYLE9BQU8sU0FBU25ULEdBQUcsT0FBTytjLEVBQUUvYyxLQUFLNUQsR0FBR2hCLEVBQVFvcUIsU0FBUyxTQUFTeGxCLEdBQUcsT0FBTytjLEVBQUUvYyxLQUFLcEUsR0FBR1IsRUFBUXFxQixXQUFXLFNBQVN6bEIsR0FBRyxPQUFPK2MsRUFBRS9jLEtBQUt3ZSxHQUFHcGpCLEVBQVFzcUIsYUFBYSxTQUFTMWxCLEdBQUcsT0FBTytjLEVBQUUvYyxLQUFLeWUsR0FBR3JqQixFQUFRdXFCLFdBQVcsU0FBUzNsQixHQUFHLE9BQU8rYyxFQUFFL2MsS0FBSzVDLEdBQ3pPaEMsRUFBUXdxQixtQkFBbUIsU0FBUzVsQixHQUFHLE1BQU0saUJBQWtCQSxHQUFHLG1CQUFvQkEsR0FBR0EsSUFBSXlCLEdBQUd6QixJQUFJdEUsR0FBR3NFLElBQUl3ZSxHQUFHeGUsSUFBSXllLEdBQUd6ZSxJQUFJNUMsR0FBRzRDLElBQUkyYyxHQUFHLGlCQUFrQjNjLEdBQUcsT0FBT0EsSUFBSUEsRUFBRTBlLFdBQVdsaUIsR0FBR3dELEVBQUUwZSxXQUFXdGlCLEdBQUc0RCxFQUFFMGUsV0FBV3ZSLEdBQUduTixFQUFFMGUsV0FBV2pnQixHQUFHdUIsRUFBRTBlLFdBQVczaEIsR0FBR2lELEVBQUUwZSxXQUFXNUIsR0FBRzljLEVBQUUwZSxXQUFXdlEsR0FBR25PLEVBQUUwZSxXQUFXdFEsR0FBR3BPLEVBQUUwZSxXQUFXN0IsSUFBSXpoQixFQUFReXFCLE9BQU85SSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9cIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvLCBmcm9tKSB7XG4gIGlmIChmcm9tID09PSB1bmRlZmluZWQpIGZyb20gPSAnJztcblxuICB2YXIgdG9QYXJ0cyA9ICh0byAmJiB0by5zcGxpdCgnLycpKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IChmcm9tICYmIGZyb20uc3BsaXQoJy8nKSkgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcblxuICBpZiAoXG4gICAgbXVzdEVuZEFicyAmJlxuICAgIGZyb21QYXJ0c1swXSAhPT0gJycgJiZcbiAgICAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKVxuICApXG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lO1xuIiwiZnVuY3Rpb24gdmFsdWVPZihvYmopIHtcbiAgcmV0dXJuIG9iai52YWx1ZU9mID8gb2JqLnZhbHVlT2YoKSA6IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZi5jYWxsKG9iaik7XG59XG5cbmZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICAvLyBUZXN0IGZvciBzdHJpY3QgZXF1YWxpdHkgZmlyc3QuXG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICAvLyBPdGhlcndpc2UsIGlmIGVpdGhlciBvZiB0aGVtID09IG51bGwgdGhleSBhcmUgbm90IGVxdWFsLlxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIEFycmF5LmlzQXJyYXkoYikgJiZcbiAgICAgIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJlxuICAgICAgYS5ldmVyeShmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBpZiAodHlwZW9mIGEgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBiID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSB2YWx1ZU9mKGEpO1xuICAgIHZhciBiVmFsdWUgPSB2YWx1ZU9mKGIpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCBhLCBiKSkuZXZlcnkoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7XG4iLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7XG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCAnJykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpbnZhcmlhbnQ7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YocHJlZml4LnRvTG93ZXJDYXNlKCkpID09PSAwICYmICcvPyMnLmluZGV4T2YocGF0aC5jaGFyQXQocHJlZml4Lmxlbmd0aCkpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBfcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG59XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZikgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwkJDEoYSwgYikge1xuICAgIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsJCQxKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgdmFyIGJhc2VUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgdmFyIGhyZWYgPSAnJztcblxuICAgIGlmIChiYXNlVGFnICYmIGJhc2VUYWcuZ2V0QXR0cmlidXRlKCdocmVmJykpIHtcbiAgICAgIGhyZWYgPSBzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBjcmVhdGVQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGNyZWF0ZUNvbnRleHQgZnJvbSAnbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSAncGF0aC10by1yZWdleHAnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5cbi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcblxudmFyIGNyZWF0ZU5hbWVkQ29udGV4dCA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkQ29udGV4dChuYW1lKSB7XG4gIHZhciBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG52YXIgaGlzdG9yeUNvbnRleHQgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlTmFtZWRDb250ZXh0KFwiUm91dGVyLUhpc3RvcnlcIik7XG5cbi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcblxudmFyIGNyZWF0ZU5hbWVkQ29udGV4dCQxID0gZnVuY3Rpb24gY3JlYXRlTmFtZWRDb250ZXh0KG5hbWUpIHtcbiAgdmFyIGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG4gIGNvbnRleHQuZGlzcGxheU5hbWUgPSBuYW1lO1xuICByZXR1cm4gY29udGV4dDtcbn07XG5cbnZhciBjb250ZXh0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZU5hbWVkQ29udGV4dCQxKFwiUm91dGVyXCIpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgUm91dGVyLmNvbXB1dGVSb290TWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlUm9vdE1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgdXJsOiBcIi9cIixcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gXCIvXCJcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIFJvdXRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmhpc3RvcnkubG9jYXRpb25cbiAgICB9OyAvLyBUaGlzIGlzIGEgYml0IG9mIGEgaGFjay4gV2UgaGF2ZSB0byBzdGFydCBsaXN0ZW5pbmcgZm9yIGxvY2F0aW9uXG4gICAgLy8gY2hhbmdlcyBoZXJlIGluIHRoZSBjb25zdHJ1Y3RvciBpbiBjYXNlIHRoZXJlIGFyZSBhbnkgPFJlZGlyZWN0PnNcbiAgICAvLyBvbiB0aGUgaW5pdGlhbCByZW5kZXIuIElmIHRoZXJlIGFyZSwgdGhleSB3aWxsIHJlcGxhY2UvcHVzaCB3aGVuXG4gICAgLy8gdGhleSBtb3VudCBhbmQgc2luY2UgY0RNIGZpcmVzIGluIGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLCB3ZSBtYXlcbiAgICAvLyBnZXQgYSBuZXcgbG9jYXRpb24gYmVmb3JlIHRoZSA8Um91dGVyPiBpcyBtb3VudGVkLlxuXG4gICAgX3RoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gICAgaWYgKCFwcm9wcy5zdGF0aWNDb250ZXh0KSB7XG4gICAgICBfdGhpcy51bmxpc3RlbiA9IHByb3BzLmhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICBpZiAoX3RoaXMuX2lzTW91bnRlZCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9wZW5kaW5nTG9jYXRpb24pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBsb2NhdGlvbjogdGhpcy5fcGVuZGluZ0xvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5saXN0ZW4pIHRoaXMudW5saXN0ZW4oKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgbG9jYXRpb246IHRoaXMuc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCh0aGlzLnN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lKSxcbiAgICAgICAgc3RhdGljQ29udGV4dDogdGhpcy5wcm9wcy5zdGF0aWNDb250ZXh0XG4gICAgICB9XG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChoaXN0b3J5Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgbnVsbCxcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLmhpc3RvcnlcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJldlByb3BzLmhpc3RvcnkgPT09IHRoaXMucHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWVtb3J5Um91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTWVtb3J5Um91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE1lbW9yeVJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBpbml0aWFsSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxuICB9O1xuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxNZW1vcnlSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIExpZmVjeWNsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShMaWZlY3ljbGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpZmVjeWNsZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGlmZWN5Y2xlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vdW50KSB0aGlzLnByb3BzLm9uTW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVXBkYXRlKSB0aGlzLnByb3BzLm9uVXBkYXRlLmNhbGwodGhpcywgdGhpcywgcHJldlByb3BzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVubW91bnQpIHRoaXMucHJvcHMub25Vbm1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gTGlmZWN5Y2xlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwcm9tcHRpbmcgdGhlIHVzZXIgYmVmb3JlIG5hdmlnYXRpbmcgYXdheSBmcm9tIGEgc2NyZWVuLlxuICovXG5cbmZ1bmN0aW9uIFByb21wdChfcmVmKSB7XG4gIHZhciBtZXNzYWdlID0gX3JlZi5tZXNzYWdlLFxuICAgICAgX3JlZiR3aGVuID0gX3JlZi53aGVuLFxuICAgICAgd2hlbiA9IF9yZWYkd2hlbiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkd2hlbjtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFByb21wdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBpZiAoIXdoZW4gfHwgY29udGV4dC5zdGF0aWNDb250ZXh0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbWV0aG9kID0gY29udGV4dC5oaXN0b3J5LmJsb2NrO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIGlmIChwcmV2UHJvcHMubWVzc2FnZSAhPT0gbWVzc2FnZSkge1xuICAgICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uVW5tb3VudDogZnVuY3Rpb24gb25Vbm1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICB9LFxuICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgbWVzc2FnZVR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pO1xuICBQcm9tcHQucHJvcFR5cGVzID0ge1xuICAgIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICAgIG1lc3NhZ2U6IG1lc3NhZ2VUeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoKSB7XG4gIGlmIChjYWNoZVtwYXRoXSkgcmV0dXJuIGNhY2hlW3BhdGhdO1xuICB2YXIgZ2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0aCk7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0aF0gPSBnZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGdlbmVyYXRvcjtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0aCBhbmQgcGFyYW1ldGVycy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChwYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhdGggPSBcIi9cIjtcbiAgfVxuXG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHBhdGggPT09IFwiL1wiID8gcGF0aCA6IGNvbXBpbGVQYXRoKHBhdGgpKHBhcmFtcywge1xuICAgIHByZXR0eTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbmF2aWdhdGluZyBwcm9ncmFtbWF0aWNhbGx5IHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gUmVkaXJlY3QoX3JlZikge1xuICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIF9yZWYkcHVzaCA9IF9yZWYucHVzaCxcbiAgICAgIHB1c2ggPSBfcmVmJHB1c2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRwdXNoO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UmVkaXJlY3Q+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3RvcnksXG4gICAgICAgIHN0YXRpY0NvbnRleHQgPSBjb250ZXh0LnN0YXRpY0NvbnRleHQ7XG4gICAgdmFyIG1ldGhvZCA9IHB1c2ggPyBoaXN0b3J5LnB1c2ggOiBoaXN0b3J5LnJlcGxhY2U7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oY29tcHV0ZWRNYXRjaCA/IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGdlbmVyYXRlUGF0aCh0bywgY29tcHV0ZWRNYXRjaC5wYXJhbXMpIDogX2V4dGVuZHMoe30sIHRvLCB7XG4gICAgICBwYXRobmFtZTogZ2VuZXJhdGVQYXRoKHRvLnBhdGhuYW1lLCBjb21wdXRlZE1hdGNoLnBhcmFtcylcbiAgICB9KSA6IHRvKTsgLy8gV2hlbiByZW5kZXJpbmcgaW4gYSBzdGF0aWMgY29udGV4dCxcbiAgICAvLyBzZXQgdGhlIG5ldyBsb2NhdGlvbiBpbW1lZGlhdGVseS5cblxuICAgIGlmIChzdGF0aWNDb250ZXh0KSB7XG4gICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KCkge1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHByZXZQcm9wcy50byk7XG5cbiAgICAgICAgaWYgKCFsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgICAgICAgIGtleTogcHJldkxvY2F0aW9uLmtleVxuICAgICAgICB9KSkpIHtcbiAgICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdG86IHRvXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmcm9tOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUkMSA9IHt9O1xudmFyIGNhY2hlTGltaXQkMSA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQkMSA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoJDEocGF0aCwgb3B0aW9ucykge1xuICB2YXIgY2FjaGVLZXkgPSBcIlwiICsgb3B0aW9ucy5lbmQgKyBvcHRpb25zLnN0cmljdCArIG9wdGlvbnMuc2Vuc2l0aXZlO1xuICB2YXIgcGF0aENhY2hlID0gY2FjaGUkMVtjYWNoZUtleV0gfHwgKGNhY2hlJDFbY2FjaGVLZXldID0ge30pO1xuICBpZiAocGF0aENhY2hlW3BhdGhdKSByZXR1cm4gcGF0aENhY2hlW3BhdGhdO1xuICB2YXIga2V5cyA9IFtdO1xuICB2YXIgcmVnZXhwID0gcGF0aFRvUmVnZXhwKHBhdGgsIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHJlZ2V4cDogcmVnZXhwLFxuICAgIGtleXM6IGtleXNcbiAgfTtcblxuICBpZiAoY2FjaGVDb3VudCQxIDwgY2FjaGVMaW1pdCQxKSB7XG4gICAgcGF0aENhY2hlW3BhdGhdID0gcmVzdWx0O1xuICAgIGNhY2hlQ291bnQkMSsrO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBVUkwgcGF0aG5hbWUgdG8gYSBwYXRoLlxuICovXG5cblxuZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdGhuYW1lLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShvcHRpb25zKSkge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICBwYXRoOiBvcHRpb25zXG4gICAgfTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwYXRoID0gX29wdGlvbnMucGF0aCxcbiAgICAgIF9vcHRpb25zJGV4YWN0ID0gX29wdGlvbnMuZXhhY3QsXG4gICAgICBleGFjdCA9IF9vcHRpb25zJGV4YWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGV4YWN0LFxuICAgICAgX29wdGlvbnMkc3RyaWN0ID0gX29wdGlvbnMuc3RyaWN0LFxuICAgICAgc3RyaWN0ID0gX29wdGlvbnMkc3RyaWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHN0cmljdCxcbiAgICAgIF9vcHRpb25zJHNlbnNpdGl2ZSA9IF9vcHRpb25zLnNlbnNpdGl2ZSxcbiAgICAgIHNlbnNpdGl2ZSA9IF9vcHRpb25zJHNlbnNpdGl2ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzZW5zaXRpdmU7XG4gIHZhciBwYXRocyA9IFtdLmNvbmNhdChwYXRoKTtcbiAgcmV0dXJuIHBhdGhzLnJlZHVjZShmdW5jdGlvbiAobWF0Y2hlZCwgcGF0aCkge1xuICAgIGlmICghcGF0aCAmJiBwYXRoICE9PSBcIlwiKSByZXR1cm4gbnVsbDtcbiAgICBpZiAobWF0Y2hlZCkgcmV0dXJuIG1hdGNoZWQ7XG5cbiAgICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgkMShwYXRoLCB7XG4gICAgICBlbmQ6IGV4YWN0LFxuICAgICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZVxuICAgIH0pLFxuICAgICAgICByZWdleHAgPSBfY29tcGlsZVBhdGgucmVnZXhwLFxuICAgICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgICB2YXIgbWF0Y2ggPSByZWdleHAuZXhlYyhwYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcbiAgICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG4gICAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIC8vIHRoZSBwYXRoIHVzZWQgdG8gbWF0Y2hcbiAgICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsXG4gICAgICAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICAgIGlzRXhhY3Q6IGlzRXhhY3QsXG4gICAgICAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgICAgbWVtb1trZXkubmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIHt9KVxuICAgIH07XG4gIH0sIG51bGwpO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgcGF0aCkge1xuICB2YXIgdmFsdWUgPSBjaGlsZHJlbihwcm9wcyk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodmFsdWUgIT09IHVuZGVmaW5lZCwgXCJZb3UgcmV0dXJuZWQgYHVuZGVmaW5lZGAgZnJvbSB0aGUgYGNoaWxkcmVuYCBmdW5jdGlvbiBvZiBcIiArIChcIjxSb3V0ZVwiICsgKHBhdGggPyBcIiBwYXRoPVxcXCJcIiArIHBhdGggKyBcIlxcXCJcIiA6IFwiXCIpICsgXCI+LCBidXQgeW91IFwiKSArIFwic2hvdWxkIGhhdmUgcmV0dXJuZWQgYSBSZWFjdCBlbGVtZW50IG9yIGBudWxsYFwiKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHZhbHVlIHx8IG51bGw7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIHNpbmdsZSBwYXRoIGFuZCByZW5kZXJpbmcuXG4gKi9cblxuXG52YXIgUm91dGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkMSkge1xuICAgICAgIWNvbnRleHQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dCQxLmxvY2F0aW9uO1xuICAgICAgdmFyIG1hdGNoID0gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCA/IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG4gICAgICA6IF90aGlzLnByb3BzLnBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF90aGlzLnByb3BzKSA6IGNvbnRleHQkMS5tYXRjaDtcblxuICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIGNvbnRleHQkMSwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBtYXRjaFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIHJlbmRlciA9IF90aGlzJHByb3BzLnJlbmRlcjsgLy8gUHJlYWN0IHVzZXMgYW4gZW1wdHkgYXJyYXkgYXMgY2hpbGRyZW4gYnlcbiAgICAgIC8vIGRlZmF1bHQsIHNvIHVzZSBudWxsIGlmIHRoYXQncyB0aGUgY2FzZS5cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjaGlsZHJlbiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb3BzXG4gICAgICB9LCBwcm9wcy5tYXRjaCA/IGNoaWxkcmVuID8gdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IGNoaWxkcmVuIDogY29tcG9uZW50ID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IHJlbmRlciA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IG51bGwpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZS5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KHByb3BzLCBwcm9wTmFtZSkge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCAnY29tcG9uZW50JyBzdXBwbGllZCB0byAnUm91dGUnOiB0aGUgcHJvcCBpcyBub3QgYSB2YWxpZCBSZWFjdCBjb21wb25lbnRcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGF0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyldKSxcbiAgICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbFxuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMuY29tcG9uZW50KSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufVxuXG5mdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPlwiLCBtZXRob2ROYW1lKSA6IGludmFyaWFudChmYWxzZSkgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG5cbnZhciBTdGF0aWNSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJQVVNIXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJSRVBMQUNFXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0YXRpY1JvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm5hdmlnYXRlVG8gPSBmdW5jdGlvbiBuYXZpZ2F0ZVRvKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzJGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wcyRjb250ZXh0O1xuICAgIGNvbnRleHQuYWN0aW9uID0gYWN0aW9uO1xuICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMyJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wczIkY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMyJGNvbnRleHQsXG4gICAgICAgIF90aGlzJHByb3BzMiRsb2NhdGlvbiA9IF90aGlzJHByb3BzMi5sb2NhdGlvbixcbiAgICAgICAgbG9jYXRpb24gPSBfdGhpcyRwcm9wczIkbG9jYXRpb24gPT09IHZvaWQgMCA/IFwiL1wiIDogX3RoaXMkcHJvcHMyJGxvY2F0aW9uLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICAgIH0sXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhpc3Rvcnk6IGhpc3RvcnksXG4gICAgICBzdGF0aWNDb250ZXh0OiBjb250ZXh0XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3RhdGljUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cblxudmFyIFN3aXRjaCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTd2l0Y2gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN3aXRjaCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3dpdGNoLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgICAgdmFyIGVsZW1lbnQsIG1hdGNoOyAvLyBXZSB1c2UgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCBpbnN0ZWFkIG9mIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoKS5maW5kKClcbiAgICAgIC8vIGhlcmUgYmVjYXVzZSB0b0FycmF5IGFkZHMga2V5cyB0byBhbGwgY2hpbGQgZWxlbWVudHMgYW5kIHdlIGRvIG5vdCB3YW50XG4gICAgICAvLyB0byB0cmlnZ2VyIGFuIHVubW91bnQvcmVtb3VudCBmb3IgdHdvIDxSb3V0ZT5zIHRoYXQgcmVuZGVyIHRoZSBzYW1lXG4gICAgICAvLyBjb21wb25lbnQgYXQgZGlmZmVyZW50IFVSTHMuXG5cbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goX3RoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY2hpbGQ7XG4gICAgICAgICAgdmFyIHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG4gICAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfZXh0ZW5kcyh7fSwgY2hpbGQucHJvcHMsIHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgICB9KSkgOiBjb250ZXh0Lm1hdGNoO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtYXRjaCA/IFJlYWN0LmNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgY29tcHV0ZWRNYXRjaDogbWF0Y2hcbiAgICAgIH0pIDogbnVsbDtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gU3dpdGNoO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG5cbmZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBkaXNwbGF5TmFtZSA9IFwid2l0aFJvdXRlcihcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgXCIpXCI7XG5cbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJ3cmFwcGVkQ29tcG9uZW50UmVmXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFwiICsgZGlzcGxheU5hbWUgKyBcIiAvPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIGNvbnRleHQsIHtcbiAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEMucHJvcFR5cGVzID0ge1xuICAgICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59XG5cbnZhciB1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dDtcbmZ1bmN0aW9uIHVzZUhpc3RvcnkoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VIaXN0b3J5KClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoaGlzdG9yeUNvbnRleHQpO1xufVxuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VMb2NhdGlvbigpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpLmxvY2F0aW9uO1xufVxuZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUGFyYW1zKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIG1hdGNoID0gdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2gucGFyYW1zIDoge307XG59XG5mdW5jdGlvbiB1c2VSb3V0ZU1hdGNoKHBhdGgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVJvdXRlTWF0Y2goKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICB2YXIgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICB2YXIgbWF0Y2ggPSB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xuICByZXR1cm4gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgcGF0aCkgOiBtYXRjaDtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBnbG9iYWwgPSB3aW5kb3c7XG4gICAgdmFyIGtleSA9IFwiX19yZWFjdF9yb3V0ZXJfYnVpbGRfX1wiO1xuICAgIHZhciBidWlsZE5hbWVzID0ge1xuICAgICAgY2pzOiBcIkNvbW1vbkpTXCIsXG4gICAgICBlc206IFwiRVMgbW9kdWxlc1wiLFxuICAgICAgdW1kOiBcIlVNRFwiXG4gICAgfTtcblxuICAgIGlmIChnbG9iYWxba2V5XSAmJiBnbG9iYWxba2V5XSAhPT0gXCJlc21cIikge1xuICAgICAgdmFyIGluaXRpYWxCdWlsZE5hbWUgPSBidWlsZE5hbWVzW2dsb2JhbFtrZXldXTtcbiAgICAgIHZhciBzZWNvbmRhcnlCdWlsZE5hbWUgPSBidWlsZE5hbWVzW1wiZXNtXCJdOyAvLyBUT0RPOiBBZGQgbGluayB0byBhcnRpY2xlIHRoYXQgZXhwbGFpbnMgaW4gZGV0YWlsIGhvdyB0byBhdm9pZFxuICAgICAgLy8gbG9hZGluZyAyIGRpZmZlcmVudCBidWlsZHMuXG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBhcmUgbG9hZGluZyB0aGUgXCIgKyBzZWNvbmRhcnlCdWlsZE5hbWUgKyBcIiBidWlsZCBvZiBSZWFjdCBSb3V0ZXIgXCIgKyAoXCJvbiBhIHBhZ2UgdGhhdCBpcyBhbHJlYWR5IHJ1bm5pbmcgdGhlIFwiICsgaW5pdGlhbEJ1aWxkTmFtZSArIFwiIFwiKSArIFwiYnVpbGQsIHNvIHRoaW5ncyB3b24ndCB3b3JrIHJpZ2h0LlwiKTtcbiAgICB9XG5cbiAgICBnbG9iYWxba2V5XSA9IFwiZXNtXCI7XG4gIH1cbn1cblxuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBQcm9tcHQsIFJlZGlyZWN0LCBSb3V0ZSwgUm91dGVyLCBTdGF0aWNSb3V0ZXIsIFN3aXRjaCwgaGlzdG9yeUNvbnRleHQgYXMgX19IaXN0b3J5Q29udGV4dCwgY29udGV4dCBhcyBfX1JvdXRlckNvbnRleHQsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXIuanMubWFwXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5cbnZhciBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgPSAxMDczNzQxODIzO1xudmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB7fTtcblxuZnVuY3Rpb24gZ2V0VW5pcXVlSWQoKSB7XG4gIHZhciBrZXkgPSAnX19nbG9iYWxfdW5pcXVlX2lkX18nO1xuICByZXR1cm4gY29tbW9uanNHbG9iYWxba2V5XSA9IChjb21tb25qc0dsb2JhbFtrZXldIHx8IDApICsgMTtcbn1cblxuZnVuY3Rpb24gb2JqZWN0SXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RW1pdHRlcih2YWx1ZSkge1xuICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBvbjogZnVuY3Rpb24gb24oaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9LFxuICAgIG9mZjogZnVuY3Rpb24gb2ZmKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzID0gaGFuZGxlcnMuZmlsdGVyKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiBoICE9PSBoYW5kbGVyO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIodmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0Q29udGV4dChkZWZhdWx0VmFsdWUsIGNhbGN1bGF0ZUNoYW5nZWRCaXRzKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXgsIF9Db25zdW1lciRjb250ZXh0VHlwZTtcblxuICB2YXIgY29udGV4dFByb3AgPSAnX19jcmVhdGUtcmVhY3QtY29udGV4dC0nICsgZ2V0VW5pcXVlSWQoKSArICdfXyc7XG5cbiAgdmFyIFByb3ZpZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIoKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5lbWl0dGVyID0gY3JlYXRlRXZlbnRFbWl0dGVyKF90aGlzLnByb3BzLnZhbHVlKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gUHJvdmlkZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW2NvbnRleHRQcm9wXSA9IHRoaXMuZW1pdHRlciwgX3JlZjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgIT09IG5leHRQcm9wcy52YWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBuZXh0UHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBjaGFuZ2VkQml0cztcblxuICAgICAgICBpZiAob2JqZWN0SXMob2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IHR5cGVvZiBjYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGN1bGF0ZUNoYW5nZWRCaXRzKG9sZFZhbHVlLCBuZXdWYWx1ZSkgOiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybmluZygoY2hhbmdlZEJpdHMgJiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQpID09PSBjaGFuZ2VkQml0cywgJ2NhbGN1bGF0ZUNoYW5nZWRCaXRzOiBFeHBlY3RlZCB0aGUgcmV0dXJuIHZhbHVlIHRvIGJlIGEgJyArICczMS1iaXQgaW50ZWdlci4gSW5zdGVhZCByZWNlaXZlZDogJyArIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkQml0cyB8PSAwO1xuXG4gICAgICAgICAgaWYgKGNoYW5nZWRCaXRzICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuc2V0KG5leHRQcm9wcy52YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHZhciBDb25zdW1lciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgICBfaW5oZXJpdHNMb29zZShDb25zdW1lciwgX0NvbXBvbmVudDIpO1xuXG4gICAgZnVuY3Rpb24gQ29uc3VtZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyO1xuXG4gICAgICBfdGhpczIgPSBfQ29tcG9uZW50Mi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpczIuc3RhdGUgPSB7XG4gICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgfTtcblxuICAgICAgX3RoaXMyLm9uVXBkYXRlID0gZnVuY3Rpb24gKG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gX3RoaXMyLm9ic2VydmVkQml0cyB8IDA7XG5cbiAgICAgICAgaWYgKChvYnNlcnZlZEJpdHMgJiBjaGFuZ2VkQml0cykgIT09IDApIHtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBfdGhpczI7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90bzIgPSBDb25zdW1lci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IG5leHRQcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vbih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IHRoaXMucHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub2ZmKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5nZXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG9ubHlDaGlsZCh0aGlzLnByb3BzLmNoaWxkcmVuKSh0aGlzLnN0YXRlLnZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbnN1bWVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgQ29uc3VtZXIuY29udGV4dFR5cGVzID0gKF9Db25zdW1lciRjb250ZXh0VHlwZSA9IHt9LCBfQ29uc3VtZXIkY29udGV4dFR5cGVbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlKTtcbiAgcmV0dXJuIHtcbiAgICBQcm92aWRlcjogUHJvdmlkZXIsXG4gICAgQ29uc3VtZXI6IENvbnN1bWVyXG4gIH07XG59XG5cbnZhciBpbmRleCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQgfHwgY3JlYXRlUmVhY3RDb250ZXh0O1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSwgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMsIG9wdGlvbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJywgZmxhZ3Mob3B0aW9ucykpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIG9wdHMpIHtcbiAgICB2YXIgcGF0aCA9ICcnXG4gICAgdmFyIGRhdGEgPSBvYmogfHwge31cbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge31cbiAgICB2YXIgZW5jb2RlID0gb3B0aW9ucy5wcmV0dHkgPyBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgOiBlbmNvZGVVUklDb21wb25lbnRcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlblxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IGRhdGFbdG9rZW4ubmFtZV1cbiAgICAgIHZhciBzZWdtZW50XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBiZSBkZWZpbmVkJylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNhcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCByZXBlYXQsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSArICdgJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IGJlIGVtcHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc2VnbWVudCA9IGVuY29kZSh2YWx1ZVtqXSlcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeShzZWdtZW50KSArICdgJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnRcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSlcblxuICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgXCInICsgc2VnbWVudCArICdcIicpXG4gICAgICB9XG5cbiAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudFxuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlR3JvdXAgKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiRcXC8oKV0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEF0dGFjaCB0aGUga2V5cyBhcyBhIHByb3BlcnR5IG9mIHRoZSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcmVcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGF0dGFjaEtleXMgKHJlLCBrZXlzKSB7XG4gIHJlLmtleXMgPSBrZXlzXG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgU3dpdGNoLCBCcm93c2VyUm91dGVyIGFzIFJvdXRlciwgUm91dGUgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxudmFyIExpbmsgPSByZXF1aXJlKCdyZWFjdC1yb3V0ZXInKS5MaW5rXHJcbnZhciBQcm9wVHlwZXMgPSAncHJvcC10eXBlcycsXHJcbmRhcmtCYWNrZ3JvdW5kID0gXCJsaW5lYXItZ3JhZGllbnQoIzAxMDgxQywgIzAwMkFBMClcIixcclxubGlnaHRCYWNrZ3JvdW5kID0gXCJsaW5lYXItZ3JhZGllbnQoIzAwNEJBRSwgIzk5RDlGQylcIixcclxuaG91cnMgPSBuZXcgRGF0ZSgpLmdldEhvdXJzKCksXHJcbm1pbnV0ZXMgPSBuZXcgRGF0ZSgpLmdldE1pbnV0ZXMoKSxcclxubGF0ID0gJycsXHJcbmxvbiA9ICcnLFxyXG5jaXR5ID0gJycsXHJcbmRheXMgPSBbXHJcblx0e2lkOiBcIlN1bmRheVwiLCBhYmI6IFwiU3VuXCJ9LCBcclxuXHR7aWQ6IFwiTW9uZGF5XCIsIGFiYjogXCJNb25cIn0sIFxyXG5cdHtpZDogXCJUdWVzZGF5XCIsIGFiYjogXCJUdWVzXCJ9LCBcclxuXHR7aWQ6IFwiV2VkbmVzZGF5XCIsIGFiYjogXCJXZWRcIn0sIFxyXG5cdHtpZDogXCJUaHVyc2RheVwiLCBhYmI6IFwiVGh1cnNcIn0sIFxyXG5cdHtpZDogXCJGcmlkYXlcIiwgYWJiOiBcIkZyaVwifSwgXHJcblx0e2lkOiBcIlNhdHVyZGF5XCIsIGFiYjogXCJTYXRcIn1dO1xyXG5cclxuLy9kZWxheXMgcmVuZGVyaW5nIG9mIC9hcHBsaWNhdGlvbiByb3V0ZSB0byBhbGxvdyBmb3IgdGhlIEdlb2NvZGluZyBBUEkgY2FsbCB0byBtYWtlIGNoYW5nZXNcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVsYXlMaW5rIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xyXG4gICAgZGVsYXk6ICAgICAgICBQcm9wVHlwZXMubnVtYmVyLFxyXG4gICAgb25EZWxheVN0YXJ0OiBQcm9wVHlwZXMuZnVuYyxcclxuICAgIG9uRGVsYXlFbmQ6ICAgUHJvcFR5cGVzLmZ1bmNcclxuICB9O1xyXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XHJcbiAgICBkZWxheTogICAgICAgIDAsXHJcbiAgICBvbkRlbGF5U3RhcnQ6ICgpID0+IHt9LFxyXG4gICAgb25EZWxheUVuZDogICAoKSA9PiB7fVxyXG4gIH07XHJcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IExpbmsuY29udGV4dFR5cGVzO1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnRpbWVvdXQgPSBudWxsO1xyXG4gIH07XHJcbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XHJcbiAgICBpZiAodGhpcy50aW1lb3V0KSB7XHJcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGhhbmRsZUNsaWNrID0gKGUpID0+IHtcclxuICAgIGNvbnN0IHsgcmVwbGFjZSwgdG8sIGRlbGF5LCBvbkRlbGF5U3RhcnQsIG9uRGVsYXlFbmQgfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCBoaXN0b3J5ID0gdGhpcy5jb250ZXh0LnJvdXRlcjtcclxuXHRcdFxyXG4gICAgb25EZWxheVN0YXJ0KGUsIHRvKTtcclxuICAgIGlmIChlLmRlZmF1bHRQcmV2ZW50ZWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cdFx0XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcclxuICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBpZiAocmVwbGFjZSkge1xyXG4gICAgICAgIGhpc3RvcnkucmVwbGFjZSh0byk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaGlzdG9yeS5wdXNoKHRvKTtcclxuICAgICAgfVxyXG4gICAgICBvbkRlbGF5RW5kKGUsIHRvKTtcclxuICAgIH0sIGRlbGF5KTtcclxuICB9O1xyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCBwcm9wcyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMucHJvcHMpO1xyXG4gICAgZGVsZXRlIHByb3BzLmRlbGF5O1xyXG4gICAgZGVsZXRlIHByb3BzLm9uRGVsYXlTdGFydDtcclxuICAgIGRlbGV0ZSBwcm9wcy5vbkRlbGF5RW5kO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPExpbmsgey4uLnByb3BzfSBvbkNsaWNrPXt0aGlzLmhhbmRsZUNsaWNrfSA+U2VhcmNoPC9MaW5rPlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIENpdHlTZWFyY2ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG5cdGNvbnN0cnVjdG9yKHByb3BzKXtcclxuXHRcdHN1cGVyKHByb3BzKTtcclxuXHRcdHRoaXMuc3RhdGUgPSB7XHJcblx0XHRcdGlucHV0OiAnJyxcclxuXHRcdH1cclxuXHRcdHRoaXMuaGFuZGxlQ2hhbmdlID0gdGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKTtcclxuXHRcdHRoaXMudXBkYXRlQ2l0eSA9IHRoaXMudXBkYXRlQ2l0eS5iaW5kKHRoaXMpO1xyXG5cdH1cclxuXHR1cGRhdGVDaXR5KCkge1xyXG5cdFx0bGV0IGdlb0FQSSA9IFwiaHR0cHM6Ly9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2dlb2NvZGUvanNvbj9hZGRyZXNzPVwiICsgdGhpcy5zdGF0ZS5pbnB1dCArIFwiJmtleT1BSXphU3lCX29HMU9DNGd6ajdNdkJKeVVWUVRKcUdDQW9VbWVDZUUmbGlicmFyaWVzPXBsYWNlc1wiO1xyXG5cdFx0bGV0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuXHRcdHJlcXVlc3Qub3BlbihcIkdFVFwiLCBnZW9BUEksIHRydWUpO1xyXG5cdFx0cmVxdWVzdC5vbmxvYWQgPSAoKSA9PiB7XHJcblx0XHRcdGNpdHkgPSBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2UpLnJlc3VsdHNbMF0uZm9ybWF0dGVkX2FkZHJlc3M7XHJcblx0XHRcdGxhdCA9IEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZSkucmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbi5sYXQ7XHJcblx0XHRcdGxvbiA9IEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZSkucmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbi5sbmc7XHJcblx0XHR9XHJcblx0XHRyZXF1ZXN0LnNlbmQoKTtcclxuXHR9O1xyXG5cclxuXHRoYW5kbGVDaGFuZ2UoZXZlbnQpIHtcclxuXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRpbnB1dDogZXZlbnQudGFyZ2V0LnZhbHVlXHJcblx0XHR9KTtcclxuXHR9O1xyXG5cdHJlbmRlcigpIHtcclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxkaXYgaWQ9XCJzZWFyY2gtbWFpblwiPlxyXG5cdFx0XHRcdDxkaXY+XHJcblx0XHRcdFx0XHQ8aW5wdXRcclxuXHRcdFx0XHRcdFx0aWQ9XCJzZWFyY2gtaW5wdXRcIlxyXG5cdFx0XHRcdFx0XHRwbGFjZWhvbGRlcj1cIkVudGVyIENpdHlcIlxyXG5cdFx0XHRcdFx0XHR2YWx1ZT17dGhpcy5zdGF0ZS5pbnB1dH1cclxuICBcdFx0XHRcdFx0b25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfSAvPlxyXG5cdFx0XHRcdFx0PGJ1dHRvbiBpZD1cInNlYXJjaC1idXR0b25cIiBjbGFzc05hbWU9XCJidG5cIiBvbkNsaWNrPXt0aGlzLnVwZGF0ZUNpdHl9PlxyXG5cdFx0XHRcdFx0XHQ8RGVsYXlMaW5rIHRvPVwiL2FwcGxpY2F0aW9uXCIgZGVsYXk9ezgwMH0gY2xhc3NOYW1lPVwiYnRuXCIgLz5cclxuXHRcdFx0XHRcdDwvYnV0dG9uPlxyXG5cdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdClcclxuXHR9XHJcbn07XHJcblxyXG5jbGFzcyBBcHBsaWNhdGlvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcblx0Y29uc3RydWN0b3IocHJvcHMpIHtcclxuXHRcdHN1cGVyKHByb3BzKVxyXG5cdFx0dGhpcy5zdGF0ZSA9IHtcclxuXHRcdFx0aWNvbjogJycsXHJcblx0XHRcdHVuaXQ6IFwiZmFocmVuaGVpdFwiLFxyXG5cdFx0XHRjdXJyZW50VGVtcDogJycsXHJcblx0XHRcdGN1cnJlbnREYXk6ICcnLFxyXG5cdFx0XHRkYWlseTogJycsXHJcblx0XHRcdHRpbWVUZXN0OiBuZXcgRGF0ZSgpLmdldEhvdXJzKCkgKyBcIjpcIiArIChuZXcgRGF0ZSgpLmdldE1pbnV0ZXMoKSA8IDEwID8gXCIwXCIgKyBuZXcgRGF0ZSgpLmdldE1pbnV0ZXMoKSA6IG5ldyBEYXRlKCkuZ2V0TWludXRlcygpKVxyXG5cdFx0fVxyXG5cdFx0dGhpcy51bml0Q2hhbmdlID0gdGhpcy51bml0Q2hhbmdlLmJpbmQodGhpcyk7XHJcblx0fVxyXG5cclxuXHRjb21wb25lbnREaWRNb3VudCgpIHtcclxuXHRcdHRoaXMuaW50ZXJ2YWxJRCA9IHNldEludGVydmFsKFxyXG4gICAgICAoKSA9PiB0aGlzLnNldFN0YXRlKHN0YXRlID0+ICh7XHJcblx0XHRcdFx0dGltZVRlc3Q6IG5ldyBEYXRlKCkuZ2V0SG91cnMoKSArIFwiOlwiICsgKG5ldyBEYXRlKCkuZ2V0TWludXRlcygpIDwgMTAgPyBcIjBcIiArIG5ldyBEYXRlKCkuZ2V0TWludXRlcygpIDogbmV3IERhdGUoKS5nZXRNaW51dGVzKCkpXHJcblx0XHRcdH0pKSxcclxuICAgICAgMTAwMDBcclxuICAgICk7XHJcblx0XHQgXHJcblx0XHRsZXQgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG5cdFx0dmFyIEFQSSA9IFwiaHR0cHM6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41L29uZWNhbGw/bGF0PVwiICsgbGF0ICsgXCImbG9uPVwiICsgbG9uICsgXCImdW5pdHM9aW1wZXJpYWwmZXhjbHVkZT1taW51dGVseSxob3VybHkmYXBwaWQ9M2RhZmY4YjZlOTM3ODFjMWQ4MDI3N2JiZWQ3MzExOTVcIjtcclxuXHRcdHJlcXVlc3Qub3BlbihcIkdFVFwiLCBBUEksIHRydWUpO1xyXG5cdFx0cmVxdWVzdC5vbmxvYWQgPSAoKSA9PiB7XHJcblx0XHRcdGxldCBBUElSZXNwb25zZSA9IEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZSk7XHJcblx0XHRcdHRoaXMuc2V0U3RhdGUoc3RhdGUgPT4gKHtcclxuXHRcdFx0XHRkYWlseTogQVBJUmVzcG9uc2UuZGFpbHksXHJcblx0XHRcdFx0aWNvbjogQVBJUmVzcG9uc2UuY3VycmVudC53ZWF0aGVyWzBdLmljb24sXHJcblx0XHRcdFx0Y3VycmVudFRlbXA6IEpTT04uc3RyaW5naWZ5KE1hdGguZmxvb3IoQVBJUmVzcG9uc2UuY3VycmVudC50ZW1wKSksXHJcblx0XHRcdFx0Y3VycmVudERheTogZGF5c1soTWF0aC5mbG9vcigoSlNPTi5zdHJpbmdpZnkoQVBJUmVzcG9uc2UuY3VycmVudC5kdCkgLSAxODAwMCkgLyA4NjQwMCkgKyA0KSAlIDddLmlkXHJcblx0XHRcdH0pKTtcclxuXHRcdH1cclxuXHRcdHJlcXVlc3Quc2VuZCgpO1xyXG5cdH07XHJcblxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsSUQpO1xyXG4gIH07XHJcblx0XHJcblx0dW5pdENoYW5nZShwcm9wcykge1xyXG5cdFx0cHJvcHMgPT0gXCJmXCIgP1xyXG5cdFx0dGhpcy5zZXRTdGF0ZShzdGF0ZSA9PiAoe1xyXG5cdFx0XHR1bml0OiBcImZhaHJlbmhlaXRcIlxyXG5cdFx0fSkpIDpcclxuXHRcdHRoaXMuc2V0U3RhdGUoc3RhdGUgPT4gKHtcclxuXHRcdFx0dW5pdDogXCJjZWxzaXVzXCJcclxuXHRcdH0pKVxyXG5cdH07XHJcblx0XHJcblx0cmVuZGVyKCkge1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PG1haW4gc3R5bGU9e3tcclxuXHRcdFx0XHRcdGJhY2tncm91bmRJbWFnZTogKGhvdXJzID49IDIwfHwgaG91cnMgPCA1KSA/IFxyXG5cdFx0XHRcdFx0ZGFya0JhY2tncm91bmQgOiBcclxuXHRcdFx0XHRcdGxpZ2h0QmFja2dyb3VuZH19PlxyXG5cdFx0XHRcdDxuYXYgaWQ9XCJoZWFkZXJcIj5cclxuXHRcdFx0XHRcdDxMaW5rICB0bz17e3BhdGhuYW1lOiBcIi93ZWVrXCIsIHF1ZXJ5OntkYWlseTogNX19fSBjbGFzc05hbWU9XCJidG5cIj41LURheSBGb3JlY2FzdDwvTGluaz5cclxuXHRcdFx0XHRcdDxMaW5rIHRvPVwiL1wiIGNsYXNzTmFtZT1cImJ0blwiPkNpdHkgU2VhcmNoPC9MaW5rPlxyXG5cdFx0XHRcdFx0PExpbmsgIHRvPXt7cGF0aG5hbWU6IFwiL3dlZWtcIiwgcXVlcnk6e2RhaWx5OiA3fX19IGNsYXNzTmFtZT1cImJ0blwiPjctRGF5IEZvcmVjYXN0PC9MaW5rPlxyXG5cdFx0XHRcdDwvbmF2PlxyXG5cdFx0XHRcdDxkaXYgXHJcblx0XHRcdFx0XHRpZD1cImNvbnRhaW5lclwiXHJcblx0XHRcdFx0XHRzdHlsZT17e2NvbG9yOiB0aGlzLnN0YXRlLmRhcmtNb2RlID8gXCJsaWdodGdyZXlcIiA6IFwiI0YwRjBGMFwifX0+XHJcblx0XHRcdFx0XHQ8c2VjdGlvbiBpZD1cImFjdGl2ZURheVwiPlxyXG5cdFx0XHRcdFx0XHQ8aDQ+e2NpdHl9PC9oND5cclxuXHRcdFx0XHRcdFx0PGRpdiBpZD1cImFjdGl2ZVRlbXBcIj5cclxuXHRcdFx0XHRcdFx0XHQ8aW1nIFxyXG5cdFx0XHRcdFx0XHRcdFx0aWQ9XCJjdXJyZW50SWNvblwiIFxyXG5cdFx0XHRcdFx0XHRcdFx0c3R5bGU9e3t3aWR0aDogXCI2NXB4XCIsIGhlaWdodDogXCI2NXB4XCJ9fSBcclxuXHRcdFx0XHRcdFx0XHRcdHNyYz17XCJodHRwOi8vb3BlbndlYXRoZXJtYXAub3JnL2ltZy93bi9cIiArIGAke3RoaXMuc3RhdGUuaWNvbn1gICtcIkAyeC5wbmdcIn0gLz5cclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGlkPVwiY3VycmVudFRlbXBcIj57dGhpcy5zdGF0ZS51bml0ID09IFwiZmFocmVuaGVpdFwiID8gdGhpcy5zdGF0ZS5jdXJyZW50VGVtcCA6IE1hdGgucm91bmQobWV0cmljKHRoaXMuc3RhdGUuY3VycmVudFRlbXAsIFwidGVtcFwiKSl9JiMxNzY7PC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0PGRpdiBpZD1cInVuaXRDaGFuZ2VcIj5cclxuXHRcdFx0XHRcdFx0XHRcdDxidXR0b25cclxuXHRcdFx0XHRcdFx0XHRcdFx0c3R5bGU9e3tmb250V2VpZ2h0OiB0aGlzLnN0YXRlLnVuaXQgPT0gXCJmYWhyZW5oZWl0XCIgPyBcImJvbGRcIiA6IFwiNDAwXCJ9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRjbGFzc05hbWU9XCJidG4gdW5pdEJ0blwiXHJcblx0XHRcdFx0XHRcdFx0XHRcdG9uQ2xpY2s9eygpID0+IHRoaXMudW5pdENoYW5nZShcImZcIil9PkYmIzE3Njs8L2J1dHRvbj5cclxuXHRcdFx0XHRcdFx0XHRcdDxidXR0b25cclxuXHRcdFx0XHRcdFx0XHRcdFx0c3R5bGU9e3tmb250V2VpZ2h0OiB0aGlzLnN0YXRlLnVuaXQgPT0gXCJjZWxzaXVzXCIgPyBcImJvbGRcIiA6IFwiNDAwXCJ9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRjbGFzc05hbWU9XCJidG4gdW5pdEJ0blwiXHJcblx0XHRcdFx0XHRcdFx0XHRcdG9uQ2xpY2s9eygpID0+IHRoaXMudW5pdENoYW5nZShcImNcIil9PkMmIzE3Njs8L2J1dHRvbj5cclxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHQ8L3NlY3Rpb24+XHJcblx0XHRcdFx0XHR7LypwYXNzZXMgdW5pdCB0eXBlIHRvIGNoYW5nZSB0ZW1wIHVuaXRzXHJcblx0XHRcdFx0XHRcdCBwYXNzZXMgZGFpbHkgIyB0byB0ZWxsIGhvdyBtYW55IGRheSBjYXJkcyB0byByZW5kZXIgKDUgdnMgNykqL31cclxuXHRcdFx0XHRcdHtSZWFjdC5DaGlsZHJlbi5tYXBcclxuXHRcdFx0XHRcdFx0KHRoaXMucHJvcHMuY2hpbGRyZW4sIGNoaWxkID0+IFxyXG5cdFx0XHRcdFx0XHRcdFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge2N1cnJlbnRUZW1wOiB0aGlzLnN0YXRlLmN1cnJlbnRUZW1wLCBkYWlseTogdGhpcy5zdGF0ZS5kYWlseSwgdW5pdDogdGhpcy5zdGF0ZS51bml0fSkpXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdDwvbWFpbj5cclxuXHRcdClcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1ldHJpYyhpbnB1dCwgdHlwZSkge1xyXG5cdHN3aXRjaCAodHlwZSkge1xyXG5cdFx0Y2FzZSBcInRlbXBcIjpcclxuXHRcdFx0cmV0dXJuICgoaW5wdXQgLSAzMikgKiAoNS85KSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSBcImRpc3RhbmNlXCI6XHJcblx0XHRcdHJldHVybiBNYXRoLnJvdW5kKChpbnB1dCAqIDEuNjA5KSAqIDEwKSAvIDEwO1xyXG5cdFx0XHRicmVhaztcclxuXHR9XHJcbn1cclxuXHJcbnZhciBXZWVrQ2FyZCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuXHRnZXRJbml0aWFsU3RhdGUoKSB7XHJcbiAgICByZXR1cm4ge1xyXG5cdFx0XHRhdmVyYWdlSGlnaDogW10sXHJcbiAgICAgIGFjdGl2ZTogZmFsc2UsXHJcblx0XHRcdG1vcm46IDAsXHJcblx0XHRcdGV2ZTogMCxcclxuXHRcdFx0d2luZFNwZWVkOiAwLFxyXG5cdFx0XHRkZXdQb2ludDogMCxcclxuXHRcdFx0aHVtaWRpdHk6IDBcclxuICAgIH07XHJcbiAgfSxcclxuXHRyZW5kZXI6IGZ1bmN0aW9uKHByb3BzKXtcclxuXHRcdHZhciB3ZWVrID0gdGhpcy5wcm9wcy5kYWlseVxyXG5cdFx0XHQuc2xpY2UoMCwgdGhpcy5wcm9wcy5sb2NhdGlvbi5xdWVyeS5kYWlseSlcclxuXHRcdFx0Lm1hcChkYXkgPT5cclxuXHRcdFx0PGRpdlxyXG5cdFx0XHRcdGNsYXNzTmFtZT1cImRheUNhcmRcIlxyXG5cdFx0XHRcdG9uQ2xpY2s9eygpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMuc2V0U3RhdGUoc3RhdGUgPT4gKHtcclxuXHRcdFx0XHRcdFx0YWN0aXZlOiB0cnVlLFxyXG5cdFx0XHRcdFx0XHRtb3JuOiBNYXRoLmZsb29yKGRheS50ZW1wLm1vcm4pLFxyXG5cdFx0XHRcdFx0XHRldmU6IE1hdGguZmxvb3IoZGF5LnRlbXAuZXZlKSxcclxuXHRcdFx0XHRcdFx0d2luZFNwZWVkOiAoZGF5LndpbmRfc3BlZWQpLFxyXG5cdFx0XHRcdFx0XHRkZXdQb2ludDogTWF0aC5mbG9vcihkYXkuZGV3X3BvaW50KSxcclxuXHRcdFx0XHRcdFx0aHVtaWRpdHk6IGRheS5odW1pZGl0eSxcclxuXHRcdFx0XHRcdH0pKVxyXG5cdFx0XHRcdH19PlxyXG5cdFx0XHRcdDxkaXYgaWQ9XCJkYXlDYXJkQ29tYmluZXJcIj5cclxuXHRcdFx0XHRcdDxwPntkYXlzWyhNYXRoLmZsb29yKChkYXkuZHQgLSAxODAwMCkgLyA4NjQwMCkgKyA0KSAlIDddLmFiYn08L3A+XHJcblx0XHRcdFx0XHQ8aW1nIFxyXG5cdFx0XHRcdFx0XHRpZD1cImRhaWx5SWNvblwiXHJcblx0XHRcdFx0XHRcdHNyYz17XCJodHRwOi8vb3BlbndlYXRoZXJtYXAub3JnL2ltZy93bi9cIiArIGRheS53ZWF0aGVyWzBdLmljb24gKyBcIkAyeC5wbmdcIn0gLz5cclxuXHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHQ8ZGl2IFxyXG5cdFx0XHRcdFx0aWQ9XCJzcGFjZXJcIiBcclxuXHRcdFx0XHRcdHN0eWxlPXt7XHJcblx0XHRcdFx0XHRcdFx0XHRtaW5IZWlnaHQ6IFwiMTVweFwiLCBcclxuXHRcdFx0XHRcdFx0XHRcdGhlaWdodDogdGhpcy5wcm9wcy5jdXJyZW50VGVtcCA+PSAzMCA/XHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzLnByb3BzLmN1cnJlbnRUZW1wID49IDEwMCA/XHJcblx0XHRcdFx0XHRcdFx0XHRgJHsoMTMwIC0gZGF5LnRlbXAubWF4KSAqIDJ9cHhgIDpcclxuXHRcdFx0XHRcdFx0XHRcdGAkeygxMDAgLSBkYXkudGVtcC5tYXgpICogMn1weGAgOiBcclxuXHRcdFx0XHRcdFx0XHRcdGAkeyg0MCAtIGRheS50ZW1wLm1heCkgKiAyfXB4YH19IC8+XHJcblx0XHRcdFx0PGRpdiBpZD1cInRlbXBzXCI+XHJcblx0XHRcdFx0XHQ8ZGl2IGlkPVwiaGlnaFwiPntcclxuXHRcdFx0XHRcdFx0XHR0aGlzLnByb3BzLnVuaXQgPT0gXCJmYWhyZW5oZWl0XCIgPyBcclxuXHRcdFx0XHRcdFx0XHRNYXRoLnJvdW5kKGRheS50ZW1wLm1heCkgOiBcclxuXHRcdFx0XHRcdFx0XHRNYXRoLnJvdW5kKG1ldHJpYyhkYXkudGVtcC5tYXgsIFwidGVtcFwiKSl9JiMxNzY7XHJcblx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdDxkaXYgaWQ9XCJiYXJcIiBzdHlsZT17e2hlaWdodDogYCR7KGRheS50ZW1wLm1heCAtIGRheS50ZW1wLm1pbikgKiAzfXB4YH19IC8+XHJcblx0XHRcdFx0XHQ8ZGl2IGlkPVwibG93XCI+e1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMucHJvcHMudW5pdCA9PSBcImZhaHJlbmhlaXRcIiA/IFxyXG5cdFx0XHRcdFx0XHRcdE1hdGgucm91bmQoZGF5LnRlbXAubWluKSA6IFxyXG5cdFx0XHRcdFx0XHRcdE1hdGgucm91bmQobWV0cmljKGRheS50ZW1wLm1pbiwgXCJ0ZW1wXCIpKX0mIzE3Njs8L2Rpdj5cclxuXHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQpO1x0XHRcdFx0XHRcdFxyXG5cdFx0cmV0dXJuKFxyXG5cdFx0PGRpdj5cdFxyXG5cdFx0XHQ8ZGl2IGlkPVwid2Vla0NhcmRcIj5cclxuXHRcdFx0XHR7d2Vla31cclxuXHRcdFx0PC9kaXY+XHJcblx0XHRcdDxzZWN0aW9uIGlkPVwiaG91cmx5XCIgc3R5bGU9e3t2aXNpYmlsaXR5OiB0aGlzLnN0YXRlLmFjdGl2ZSA/IFwidmlzaWJsZVwiIDogXCJoaWRkZW5cIn19PlxyXG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiaG91cmx5Q2FyZFwiPlxyXG5cdFx0XHRcdFx0PGRpdj57dGhpcy5wcm9wcy51bml0ID09IFwiZmFocmVuaGVpdFwiID8gXHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzLnN0YXRlLm1vcm4gOiBcclxuXHRcdFx0XHRcdFx0XHRcdE1hdGgucm91bmQobWV0cmljKHRoaXMuc3RhdGUubW9ybiwgXCJ0ZW1wXCIpKX0mIzE3Njs8L2Rpdj5cclxuXHRcdFx0XHRcdDxkaXY+TW9ybmluZzwvZGl2PlxyXG5cdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiaG91cmx5Q2FyZFwiPlxyXG5cdFx0XHRcdFx0PGRpdj57dGhpcy5wcm9wcy51bml0ID09IFwiZmFocmVuaGVpdFwiID8gXHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzLnN0YXRlLmV2ZSA6IFxyXG5cdFx0XHRcdFx0XHRcdFx0TWF0aC5yb3VuZChtZXRyaWModGhpcy5zdGF0ZS5ldmUsIFwidGVtcFwiKSl9JiMxNzY7PC9kaXY+XHJcblx0XHRcdFx0XHQ8ZGl2PkV2ZW5pbmc8L2Rpdj5cclxuXHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImhvdXJseUNhcmRcIj5cclxuXHRcdFx0XHRcdDxkaXY+e3RoaXMucHJvcHMudW5pdCA9PSBcImZhaHJlbmhlaXRcIiA/IFxyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5zdGF0ZS53aW5kU3BlZWQgKyBcIk1waFwiIDogXHJcblx0XHRcdFx0XHRcdFx0XHRtZXRyaWModGhpcy5zdGF0ZS53aW5kU3BlZWQsIFwiZGlzdGFuY2VcIikgKyBcIkttL2hcIn08L2Rpdj5cclxuXHRcdFx0XHRcdDxkaXY+V2luZCBTcGVlZDwvZGl2PlxyXG5cdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiaG91cmx5Q2FyZFwiPlxyXG5cdFx0XHRcdFx0PGRpdj57dGhpcy5wcm9wcy51bml0ID09IFwiZmFocmVuaGVpdFwiID8gXHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzLnN0YXRlLmRld1BvaW50IDogXHJcblx0XHRcdFx0XHRcdFx0XHRNYXRoLnJvdW5kKG1ldHJpYyh0aGlzLnN0YXRlLmRld1BvaW50LCBcInRlbXBcIikpfSYjMTc2OzwvZGl2PlxyXG5cdFx0XHRcdFx0PGRpdj5EZXcgUG9pbnQ8L2Rpdj5cclxuXHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImhvdXJseUNhcmRcIj5cclxuXHRcdFx0XHRcdDxkaXY+e3RoaXMuc3RhdGUuaHVtaWRpdHl9JTwvZGl2PlxyXG5cdFx0XHRcdFx0PGRpdj5IdW1pZGl0eTwvZGl2PlxyXG5cdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHQ8L3NlY3Rpb24+XHJcblx0XHRcdDxwIGlkPVwiZGlzY2xhaW1lclwiPipEaXNjbGFpbWVyIC0gT3BlbndlYXRoZXJtYXAncyBBUEkgZGF0YSB1c2VzIFVOSVggdGltZS4gQ3VycmVudCBkYXRhIG1heSBiZSBzbGlnaHRseSBvZmYqPC9wPlxyXG5cdFx0PC9kaXY+XHJcblx0XHQpO1xyXG5cdH1cclxufSk7XHJcblxyXG5jb25zdCBSb290ID0gKCkgPT4gKFxyXG5cdFx0PEhhc2hSb3V0ZXIgaGlzdG9yeT17aGFzaEhpc3Rvcnl9IGJhc2VuYW1lPXtwcm9jZXNzLmVudi5QVUJMSUNfVVJMfT5cclxuXHRcdCAgPFJvdXRlIHBhdGg9Jy93ZWF0aGVyLWFwcCcgY29tcG9uZW50PXtDaXR5U2VhcmNofSAvPlxyXG5cdFx0XHQgIDxSb3V0ZSBwYXRoPScvYXBwbGljYXRpb24nIGNvbXBvbmVudD17QXBwbGljYXRpb259PlxyXG5cdFx0XHRcdCAgPFJvdXRlIHBhdGg9Jy93ZWVrJyBjb21wb25lbnQ9e1dlZWtDYXJkfSAvPlxyXG5cdFx0XHQgIDwvUm91dGU+XHJcblx0XHQ8L0hhc2hSb3V0ZXI+XHJcbik7XHJcblxyXG5SZWFjdERPTS5yZW5kZXIoPFJvb3QgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXBwXCIpKTtcclxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHA9bj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxxPW4/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixyPW4/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHQ9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx2PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHc9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx4PW4/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHk9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsej1uP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LEE9bj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTpcbjYwMTE2LEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEMoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9XG52YXIgRD17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sRT17fTtmdW5jdGlvbiBGKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUU7dGhpcy51cGRhdGVyPWN8fER9Ri5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtGLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3IoQyg4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Ri5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07XG5mdW5jdGlvbiBHKCl7fUcucHJvdG90eXBlPUYucHJvdG90eXBlO2Z1bmN0aW9uIEgoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RTt0aGlzLnVwZGF0ZXI9Y3x8RH12YXIgST1ILnByb3RvdHlwZT1uZXcgRztJLmNvbnN0cnVjdG9yPUg7bChJLEYucHJvdG90eXBlKTtJLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBKPXtjdXJyZW50Om51bGx9LEs9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixjKXt2YXIgZSxkPXt9LGc9bnVsbCxrPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUsuY2FsbChiLGUpJiYhTC5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zm9yKHZhciBoPUFycmF5KGYpLG09MDttPGY7bSsrKWhbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1ofWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2VdJiYoZFtlXT1mW2VdKTtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEsa2V5OmcscmVmOmsscHJvcHM6ZCxfb3duZXI6Si5jdXJyZW50fX1cbmZ1bmN0aW9uIE4oYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE8oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nLFE9W107ZnVuY3Rpb24gUihhLGIsYyxlKXtpZihRLmxlbmd0aCl7dmFyIGQ9US5wb3AoKTtkLnJlc3VsdD1hO2Qua2V5UHJlZml4PWI7ZC5mdW5jPWM7ZC5jb250ZXh0PWU7ZC5jb3VudD0wO3JldHVybiBkfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmMsY29udGV4dDplLGNvdW50OjB9fVxuZnVuY3Rpb24gUyhhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlEubGVuZ3RoJiZRLnB1c2goYSl9XG5mdW5jdGlvbiBUKGEsYixjLGUpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBjKGUsYSxcIlwiPT09Yj9cIi5cIitVKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBrPTA7azxhLmxlbmd0aDtrKyspe2Q9YVtrXTt2YXIgZj1iK1UoZCxrKTtnKz1UKGQsZixjLGUpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9QiYmYVtCXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxrPVxuMDshKGQ9YS5uZXh0KCkpLmRvbmU7KWQ9ZC52YWx1ZSxmPWIrVShkLGsrKyksZys9VChkLGYsYyxlKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1kKXRocm93IGM9XCJcIithLEVycm9yKEMoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWM/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YyxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gVihhLGIsYyl7cmV0dXJuIG51bGw9PWE/MDpUKGEsXCJcIixiLGMpfWZ1bmN0aW9uIFUoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIFcoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gYWEoYSxiLGMpe3ZhciBlPWEucmVzdWx0LGQ9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/WChhLGUsYyxmdW5jdGlvbihhKXtyZXR1cm4gYX0pOm51bGwhPWEmJihPKGEpJiYoYT1OKGEsZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIikrYykpLGUucHVzaChhKSl9ZnVuY3Rpb24gWChhLGIsYyxlLGQpe3ZhciBnPVwiXCI7bnVsbCE9YyYmKGc9KFwiXCIrYykucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKTtiPVIoYixnLGUsZCk7VihhLGFhLGIpO1MoYil9dmFyIFk9e2N1cnJlbnQ6bnVsbH07ZnVuY3Rpb24gWigpe3ZhciBhPVkuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcihDKDMyMSkpO3JldHVybiBhfVxudmFyIGJhPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlksUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3N1c3BlbnNlOm51bGx9LFJlYWN0Q3VycmVudE93bmVyOkosSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpsfTtleHBvcnRzLkNoaWxkcmVuPXttYXA6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W107WChhLGUsbnVsbCxiLGMpO3JldHVybiBlfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO2I9UihudWxsLG51bGwsYixjKTtWKGEsVyxiKTtTKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVihhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1goYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtpZighTyhhKSl0aHJvdyBFcnJvcihDKDE0MykpO3JldHVybiBhfX07XG5leHBvcnRzLkNvbXBvbmVudD1GO2V4cG9ydHMuRnJhZ21lbnQ9cjtleHBvcnRzLlByb2ZpbGVyPXU7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUg7ZXhwb3J0cy5TdHJpY3RNb2RlPXQ7ZXhwb3J0cy5TdXNwZW5zZT15O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9YmE7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoQygyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxnPWEucmVmLGs9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihnPWIucmVmLGs9Si5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBmPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGggaW4gYilLLmNhbGwoYixoKSYmIUwuaGFzT3duUHJvcGVydHkoaCkmJihlW2hdPXZvaWQgMD09PWJbaF0mJnZvaWQgMCE9PWY/ZltoXTpiW2hdKX12YXIgaD1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWgpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxoKXtmPUFycmF5KGgpO2Zvcih2YXIgbT0wO208aDttKyspZlttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWZ9cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6Zyxwcm9wczplLF9vd25lcjprfX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnYsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOngscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOkEsX2N0b3I6YSxfc3RhdHVzOi0xLF9yZXN1bHQ6bnVsbH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp6LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VDb250ZXh0KGEsYil9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBaKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9O1xuZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gWigpLnVzZVJlZHVjZXIoYSxiLGMpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gWigpLnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gWigpLnVzZVN0YXRlKGEpfTtleHBvcnRzLnZlcnNpb249XCIxNi4xMy4xXCI7XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iXSwic291cmNlUm9vdCI6IiJ9